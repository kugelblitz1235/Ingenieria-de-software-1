

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (10 June 2021 18:26:03) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!


----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-1.st----!

!classRemoval: #CartTest stamp: 'BAG 6/10/2021 18:26:51'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-2.st----!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:27:11'!
ERROR!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-1.st----!

!classRemoval: #CartTest stamp: 'BAG 6/10/2021 18:27:33'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-1.st----!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-2.st----!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:27:50'!
ERROR!

----STARTUP---- (10 June 2021 18:34:01) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!


----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-1.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:34:32'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:34:32'!
PASSED!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-2.st----!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:35:05'!
ERROR!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-3.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:35:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:35:32'!
PASSED!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-4.st----!

!testRun: #CartTest #test03AfterAddingABookTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:35:44'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:35:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:35:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingABookTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:35:51'!
FAILURE!

!testRun: #CartTest #test03AfterAddingABookTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:35:51'!
FAILURE!

!testRun: #CartTest #test03AfterAddingABookTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:36:08'!
FAILURE!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-18.st----!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:37:03'!
FAILURE!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingABookTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:37:03'!
FAILURE!

!classRemoval: #Cart stamp: 'BAG 6/10/2021 18:37:11'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'BAG 6/10/2021 18:37:11'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-18.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/10/2021 19:40:14'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BAG 6/10/2021 19:40:18'!
TestCase subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'BAG 6/10/2021 19:47:10'!
test01
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartErrorMessage.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'nil' stamp: 'BAG 6/10/2021 19:47:32'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'nil' stamp: 'BAG 6/10/2021 19:47:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'nil' stamp: 'BAG 6/10/2021 19:47:55'!
itemSellByTheStore
	
	^ 'validBook'! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:48:12'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 19:48:27'!
checkout: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 19:49:52' prior: 50860142!
checkout: aCart 
	self class invalidCartErrorMessage.! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:49:54'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'BAG 6/10/2021 19:50:12'!
invalidCartErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'BAG 6/10/2021 19:50:39' prior: 50860154!
invalidCartErrorMessage
	^'No se puede cobrar con un carrito inválido.'! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:50:41'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:50:50'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:50:50'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 19:51:14' prior: 50860116!
test01
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:51:17'!
FAILURE!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 19:51:39' prior: 50860147!
checkout: aCart 
	self error: self class invalidCartErrorMessage.! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:51:40'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:51:43'!
PASSED!

!methodRemoval: Cashier class #invalidCartErrorMessage stamp: 'BAG 6/10/2021 19:52:05'!
invalidCartErrorMessage
	^'No se puede cobrar con un carrito inválido.'!
!Cashier methodsFor: 'nil' stamp: 'BAG 6/10/2021 19:52:33'!
invalidCartErrorMessage
	^'No se puede cobrar con un carrito inválido.'! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 19:52:45' prior: 50860186!
checkout: aCart 
	self error: self invalidCartErrorMessage.! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:52:49'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:52:49'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 19:53:26' prior: 50860172!
test01
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:53:29'!
PASSED!

Date dateAndTimeNow.!

Date dateAndTimeNow + Date dateAndTimeNow.!

(Date dateAndTimeNow) + (Date dateAndTimeNow).!

now := Date dateAndTimeNow!

now := FixedGregorianDate today.!

now yesterday.!

now := FixedGregorianDate yesterday!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:23:09'!
test0xCanNotCheckoutWithExpiredCard
	| cart cashier card |
	
	card := FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart with: card] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier InvalidCardErrorDescription.
		
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:24:27'!
test02
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	cashier checkout: cart. 
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:27:36' prior: 50860132!
defaultCatalog
	
	^ Dictionary with: (self itemSellByTheStore @5).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:28:14' prior: 50860250!
test02
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self assert: 5 equals: (cashier checkout: cart). 
	
		! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:28:16'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:29:07' prior: 50860257!
defaultCatalog
	
	^ Dictionary with: ((self itemSellByTheStore)@5).! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:29:08'!
ERROR!

Dictionary with: (1@1).!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:32:29' prior: 50860273!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: 5).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:34:07' prior: 50860263!
test02
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cashier := Cashier new.
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart). 
	
		! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:34:08'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 20:34:49' prior: 50860205!
checkout: aCart 
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:34:54'!
ERROR!

catalog at: self itemSellByTheStore!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:36:44' prior: 50860128!
createCart
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore. 
	^cart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:36:58' prior: 50860310!
createCart
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	^cart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:37:13' prior: 50860288!
test02
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart). 
	
		! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:37:14'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 20:37:48' prior: 50860300!
checkout: aCart 
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	^5.! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:37:57'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 20:37:57'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:37:57'!
ERROR!

!testRun: #CashierTest #test0xCanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 20:37:57'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'BAG 6/10/2021 20:38:31' prior: 50860056!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: 5).! !
!Cart methodsFor: 'assertions' stamp: 'BAG 6/10/2021 20:39:46' prior: 50859904!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:40:11'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 20:40:13'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:40:57'!
test01CanNotCheckoutAnEmptyCart
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: CashierTest #test01 stamp: 'BAG 6/10/2021 20:40:57'!
test01
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty ]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:41:31'!
test02CheckoutCartWithOneItemReturnsTotal
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart). 
	
		! !

!methodRemoval: CashierTest #test02 stamp: 'BAG 6/10/2021 20:41:31'!
test02
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart). 
	
		!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:43:26'!
test03CheckoutCartWithManyItemsReturnsTotal
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cart add: 5 of: self itemSellByTheStore.
	cashier := Cashier new.
	
	self assert: (catalog at: self itemSellByTheStore)*5 equals: (cashier checkout: cart). 
	
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 20:43:29'!
FAILURE!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 20:45:17' prior: 50860336!
checkout: aCart 
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	^5* aCart items size.! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 20:45:18'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'BAG 6/10/2021 21:40:32'!
total

	^items sum:[:item | catalog at: item].! !
!Cart methodsFor: 'queries' stamp: 'BAG 6/10/2021 21:40:45' prior: 50860465!
total

	^items sum:[:item | catalog at: item] ifEmpty:[0].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 21:41:04' prior: 50860440!
test03CheckoutCartWithManyItemsReturnsTotal
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cart add: 5 of: self itemSellByTheStore.
	cashier := Cashier new.
	
	self assert: cart total equals: (cashier checkout: cart). 
	
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:41:09'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:41:18'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 21:41:37' prior: 50860456!
checkout: aCart 
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	^aCart total.! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:41:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/10/2021 21:41:38'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/10/2021 21:41:38'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:41:38'!
PASSED!

!testRun: #CashierTest #test0xCanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:41:38'!
ERROR!

!testRun: #CashierTest #test0xCanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:41:38'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:41:45'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 21:45:54'!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card |
	
	card := FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart with: card] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier InvalidCardErrorDescription.
		].
	
		! !

!methodRemoval: CashierTest #test0xCanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:45:57'!
test0xCanNotCheckoutWithExpiredCard
	| cart cashier card |
	
	card := FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart with: card] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier InvalidCardErrorDescription.
		
		].
	
		!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:46:04'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 21:46:56'!
checkout: aCart with: aFixedGregorianDate 
	self shouldBeImplemented.! !

FixedGregorianDate yesterday < FixedGregorianDate today!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 21:51:07' prior: 50860552!
checkout: aCart with: aCard 
	aCard < FixedGregorianDate today ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:51:14'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:51:14'!
ERROR!
!Cashier methodsFor: 'error descriptions' stamp: 'BAG 6/10/2021 21:52:27'!
invalidCardErrorMessage
	^'No se puede cobrar con una tarjeta vencida.'! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/10/2021 21:52:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/10/2021 21:52:30'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:52:30'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:52:30'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:52:30'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 21:53:14' prior: 50860521!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card |
	
	card := FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart with: card] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier invalidCardErrorMessage.
		].
	
		! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/10/2021 21:53:19'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/10/2021 21:53:19'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:53:19'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:53:19'!
PASSED!

Object subclass: #Card
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'BAG 6/10/2021 21:59:12'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card class methodsFor: 'nil' stamp: 'BAG 6/10/2021 21:59:54'!
for: aExpirationDate
	self new initializeFor: aExpirationDate .! !
!Card class methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 21:59:57' prior: 50860631!
for: aExpirationDate
	^self new initializeFor: aExpirationDate .! !
!Card methodsFor: 'no messages' stamp: 'BAG 6/10/2021 22:00:27'!
initializeFor: aExpirationDate
	expirationDate := aExpirationDate ! !
!Card methodsFor: 'nil' stamp: 'BAG 6/10/2021 22:01:39'!
hasExpired! !
!Card methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 22:02:39' prior: 50860646!
hasExpired
	^expirationDate < FixedGregorianDate today.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 22:03:07' prior: 50860594!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card |
	
	card := Card for: FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart with: card] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier invalidCardErrorMessage.
		].
	
		! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 22:03:45' prior: 50860559!
checkout: aCart with: aCard 
	(aCard hasExpired) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/10/2021 22:03:47'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/10/2021 22:03:47'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 22:03:47'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 22:03:47'!
PASSED!

----SNAPSHOT----(10 June 2021 22:06:03) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (14 June 2021 17:41:01) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!Card methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 17:46:47'!
isExpiredOn: aDate
	^expirationDate < aDate montOfYear.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 17:48:11'!
checkout: aCart with: aCard on: today
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 17:49:13' prior: 50860655!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card today |
	
	card := Card for: FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	today := FixedGregorianDate today.
	
	self should:[cashier checkout: cart with: card on: today] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier invalidCardErrorMessage.
		].
	
		! !
!Cart class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 17:57:59'!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber numberOfDigits: 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	"terminar con la instanciacion"! !

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BAG 6/14/2021 17:58:35'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreTestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 17:58:52'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 18:09:41'!
toCheckout: aCart charging: aCard on: today registeredOn: salesBook
	"CHEQUEAER QUE EL CARRITO NO ESTÉ VACIO"
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 18:09:59' prior: 50860755!
toCheckout: aCart charging: aCard on: today registeredOn: salesBook
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !
!Cart class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 18:37:30' prior: 50860723!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber numberOfDigits: 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'BAG 6/14/2021 18:38:30'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'BAG 6/14/2021 18:38:32'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'BAG 6/14/2021 18:38:29'!
initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .
	number := aNumber.
	owner := anOwner.
	 ! !

!methodRemoval: Cart #initializeCardNumbered:owner:expiredOn: stamp: 'BAG 6/14/2021 18:38:54'!
initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .
	number := aNumber.
	owner := anOwner.
	 !

!classDefinition: #Card category: 'TusLibros' stamp: 'BAG 6/14/2021 18:39:14'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'BAG 6/14/2021 18:39:15'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:39:13'!
initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .
	number := aNumber.
	owner := anOwner.
	expirationDate := anExpirationMonthOfYear .! !

!methodRemoval: Cart class #numbered:owner:expiredOn: stamp: 'BAG 6/14/2021 18:39:31'!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber numberOfDigits: 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .!
!Card class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 18:39:41'!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber numberOfDigits: 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .! !

!methodRemoval: Card class #for: stamp: 'BAG 6/14/2021 18:39:46'!
for: aExpirationDate
	^self new initializeFor: aExpirationDate .!

!methodRemoval: Card #initializeFor: stamp: 'BAG 6/14/2021 18:39:52'!
initializeFor: aExpirationDate
	expirationDate := aExpirationDate !

!methodRemoval: Card #hasExpired stamp: 'BAG 6/14/2021 18:39:54'!
hasExpired
	^expirationDate < FixedGregorianDate today.!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 18:40:59'!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !

!methodRemoval: Cashier #toCheckout:charging:on:registeredOn: stamp: 'BAG 6/14/2021 18:40:59'!
toCheckout: aCart charging: aCard on: today registeredOn: salesBook
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.!

!methodRemoval: Cashier #checkout:with: stamp: 'BAG 6/14/2021 18:41:09'!
checkout: aCart with: aCard 
	(aCard hasExpired) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.!

!methodRemoval: Cashier #checkout:with:on: stamp: 'BAG 6/14/2021 18:41:24'!
checkout: aCart with: aCard on: today
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:46:11' prior: 50860395!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: card on: FixedGregorianDate today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: salesBook isEmpty 
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:46:28' prior: 50860908!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: card on: FixedGregorianDate today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

22 digitLength = 16!

22 digitLength!

222222 digitLength !

222222 digitLength!

22222222 digitLength !

22222222 decimalDigitLength!
!Card class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 18:49:16' prior: 50860850!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber decimalDigitLength = 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 18:49:24'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:55:34' prior: 50860418!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow . 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	catalog := self  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: FixedGregorianDate today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  self itemSellByTheStore equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 18:55:36'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:55:55' prior: 50860696!
isExpiredOn: aDate
	^expirationDate < aDate monthOfYear.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 18:55:57'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:56:34' prior: 50860995!
isExpiredOn: aDate
	^expirationDate < aDate.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 18:56:35'!
FAILURE!

!methodRemoval: Cashier #checkout: stamp: 'BAG 6/14/2021 18:56:52'!
checkout: aCart 
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	^aCart total.!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 18:57:54' prior: 50860874!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	sale := aCart total.
	salesBook add: sale.
	
	^sale.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:58:42' prior: 50860969!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow . 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	catalog := self  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: FixedGregorianDate today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 18:58:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 18:58:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 18:58:44'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 18:58:44'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 18:58:44'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:01:17' prior: 50860708!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := Card for: FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:01:24'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:01:55' prior: 50861068!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:01:58'!
FAILURE!
!Card class methodsFor: 'nil' stamp: 'BAG 6/14/2021 19:02:39'!
invalidCardErrorMessage
	^'No se puede cobrar con una tarjeta vencida.'! !
!Card class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:02:59'!
expiredCardErrorMessage
	^'No se puede cobrar con una tarjeta vencida.'! !

!methodRemoval: Card class #invalidCardErrorMessage stamp: 'BAG 6/14/2021 19:02:59'!
invalidCardErrorMessage
	^'No se puede cobrar con una tarjeta vencida.'!
!Card class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 19:03:27' prior: 50860953!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber decimalDigitLength = 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: self expiredCardErrorMessage].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .! !
!Card class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 19:04:45' prior: 50861129!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber decimalDigitLength = 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .! !

!methodRemoval: Card class #expiredCardErrorMessage stamp: 'BAG 6/14/2021 19:04:50'!
expiredCardErrorMessage
	^'No se puede cobrar con una tarjeta vencida.'!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:05:00'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:05:00'!
FAILURE!

error messageText!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:06:57' prior: 50861090!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier new.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:06:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 19:06:59'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 19:06:59'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 19:06:59'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:06:59'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 19:06:59'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:07:08'!
PASSED!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/14/2021 19:18:41'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator class methodsFor: 'nil' stamp: 'BAG 6/14/2021 19:31:30'!
debitFor: creditCardNumber with: aCardExpirationDate owner: anOwner amount: anAmount
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:32:42'!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	
	salesBook := OrderedCollection new.
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier new.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!StoreTestObjectFactory methodsFor: 'no messages' stamp: 'BAG 6/14/2021 19:36:25'!
createMerchantProcessor
	^MerchantProcessorSimulator new.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 19:37:00'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:36:58' overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:39:59' prior: 50861230!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 19:40:03'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 19:40:10'!
for: aMerchantProcessorSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aMerchantProcessorSimulator ! !
!Cashier class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 19:40:31' prior: 50861296!
for: aMerchantProcessor
	^self new initializeFor: aMerchantProcessor ! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 19:40:34'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BAG 6/14/2021 19:41:07'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'BAG 6/14/2021 19:41:07'!
initializeFor: aMerchantProcessor 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'BAG 6/14/2021 19:41:15' prior: 50861320!
initializeFor: aMerchantProcessor 
	merchantProcessor := aMerchantProcessor.! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 19:41:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 19:41:18'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 19:41:18'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 19:41:18'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:41:18'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 19:41:18'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 19:41:18'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 19:41:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:42:11' prior: 50861270!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'validCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/14/2021 19:48:20'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'validCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'BAG 6/14/2021 19:49:25'!
initializeWithValidCards: aCollectionOfValidCards
	validCards := aCollectionOfValidCards .! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:50:14'!
withValidCards: aCollectionOfValidCards
	^self new initializeWithValidCards: aCollectionOfValidCards. ! !

!methodRemoval: MerchantProcessorSimulator class #debitFor:with:owner:amount: stamp: 'BAG 6/14/2021 19:50:43'!
debitFor: creditCardNumber with: aCardExpirationDate owner: anOwner amount: anAmount
	!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'BAG 6/14/2021 19:51:06'!
debitFor: creditCard amount: anAmount
	! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:51:42' prior: 50861415!
debitFor: card amount: anAmount
	! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:56:28' prior: 50861420!
debitFor: card amount: anAmount
	validCards includes: card ifFalse: [self error: self ]! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:56:34' prior: 50861425!
debitFor: card amount: anAmount
	(validCards includes: card) ifFalse: [self error: self ]! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:57:08' prior: 50861432!
debitFor: card amount: anAmount
	(validCards includes: card) ifFalse: [self error: MerchantProcessorSimulator stolenCreditCardErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:57:12' prior: 50861439!
debitFor: card amount: anAmount
	(validCards includes: card) ifFalse: [self error: self class stolenCreditCardErrorDescription].! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:57:54'!
stolenCreditCardErrorDescription
	^'No puede realizarse el débito porque la tarjeta es robada'.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 19:58:49' prior: 50861016!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	sale := aCart total.
	merchantProcessor debitFor: aCard amount: sale.
	salesBook add: sale.
	
	^sale.! !

!classRenamed: #Card as: #CreditCard stamp: 'BAG 6/14/2021 20:03:19'!
Smalltalk renameClassNamed: #Card as: #CreditCard!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:03:19' prior: 50861359!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:03:19' prior: 50861028!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow . 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	catalog := self  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: FixedGregorianDate today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:03:19' prior: 50860928!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: card on: FixedGregorianDate today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:03:19' prior: 50861167!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier new.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:03:35'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 20:03:35'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:03:35'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:09:02'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:11:30' prior: 50861548!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:11:48' prior: 50861504!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow . 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	catalog := self  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: FixedGregorianDate today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:11:50'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:13:26'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:13:26'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:15:08' prior: 50861252!
createMerchantProcessor
	| validCards |
	validCards := OrderedCollection with: CreditCard new.
	^MerchantProcessorSimulator withValidCards: validCards.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:16:13' prior: 50861677!
createMerchantProcessor
	| validCards card |
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday.
	validCards := OrderedCollection with: card.
	^MerchantProcessorSimulator withValidCards: validCards.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:16:24' prior: 50861480!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := CreditCard numbered: 1234567812345678 owner: 'Pepe' expiredOn: FixedGregorianDate tomorrow. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:16:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 20:16:26'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:16:26'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 20:16:26'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 20:16:26'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:16:26'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:16:31'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 20:16:52'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:16:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:17:01'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:17:01'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:50:02'!
initializeWithValidAccounts: aCollectionOfValidAccount
	validCards := aCollectionOfValidAccount .! !

!methodRemoval: MerchantProcessorSimulator #initializeWithValidCards: stamp: 'BAG 6/14/2021 20:50:07'!
initializeWithValidCards: aCollectionOfValidCards
	validCards := aCollectionOfValidCards .!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:50:27' prior: 50861402!
withValidCards: aCollectionOfValidAccounts
	^self new initializeWithValidAccounts: aCollectionOfValidAccounts. ! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:51:03'!
withValidAccounts: aCollectionOfValidAccounts
	^self new initializeWithValidAccounts: aCollectionOfValidAccounts. ! !

!methodRemoval: MerchantProcessorSimulator class #withValidCards: stamp: 'BAG 6/14/2021 20:51:03'!
withValidCards: aCollectionOfValidAccounts
	^self new initializeWithValidAccounts: aCollectionOfValidAccounts. !
!StoreTestObjectFactory methodsFor: 'nil' stamp: 'BAG 6/14/2021 20:59:16'!
createCart
	^Cart for: self createMerchantProcessor. ! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:59:42' prior: 50861790!
createCart
	^Cart for: self defaultCatalog. ! !
!StoreTestObjectFactory methodsFor: 'nil' stamp: 'BAG 6/14/2021 20:59:55'!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: 5).! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:00:07'!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:00:19' prior: 50861796!
createCart
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	^cart! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:00:33' prior: 50861811!
createCart
	^Cart acceptingItemsOf: self defaultCatalog.
	
	! !
!StoreTestObjectFactory methodsFor: 'nil' stamp: 'BAG 6/14/2021 21:01:00'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:01:17'!
today
	^FixedGregorianDate today! !

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:02:21'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'nil' stamp: 'BAG 6/14/2021 21:02:19' overrides: 16896425!
initialize
	today:= FixedGregorianDate today.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:02:29' prior: 50861828!
today
	^today! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:03:16'!
expiredCreditCart
	^CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:03:37'!
notExpiredCreditCart
	^CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:04:18' prior: 50861527!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory notExpiredCreditCart. 
	salesBook := OrderedCollection new.
	cart := testObjectFactory createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: card on: FixedGregorianDate today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:04:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:04:20'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:04:20'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:04:20'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 21:04:20'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:04:20'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:04:26'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:04:47' prior: 50861863!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory notExpiredCreditCart. 
	salesBook := OrderedCollection new.
	cart := testObjectFactory createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: card on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !
!StoreTestObjectFactory methodsFor: 'nil' stamp: 'BAG 6/14/2021 21:05:08'!
createCashier
	^Cashier new.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:05:23'!
createSalesBook
	^OrderedCollection new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:05:55' prior: 50861905!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory notExpiredCreditCart. 
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier := testObjectFactory createCashier .
	
	self 
		should: [cashier checkout: cart charging: card on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:06:01'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:06:33' prior: 50861642!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory notExpiredCreditCart.
	salesBook := OrderedCollection new.
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	catalog := self  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: FixedGregorianDate today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:07:24' prior: 50861957!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory notExpiredCreditCart.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCart. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:07:27'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:07:27'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:07:56'!
expiredCreditCard
	^CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.! !

!methodRemoval: StoreTestObjectFactory #expiredCreditCart stamp: 'BAG 6/14/2021 21:07:56'!
expiredCreditCart
	^CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:08:06'!
notExpiredCreditCard
	^CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:08:06' prior: 50861980!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory notExpiredCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCart. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:08:06' prior: 50861933!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory notExpiredCreditCard. 
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier := testObjectFactory createCashier .
	
	self 
		should: [cashier checkout: cart charging: card on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!methodRemoval: StoreTestObjectFactory #notExpiredCreditCart stamp: 'BAG 6/14/2021 21:08:06'!
notExpiredCreditCart
	^CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:08:32' prior: 50862031!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory notExpiredCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:08:34'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:11:57'!
initializeWithValidCards: aCollectionOfValidAccount
	validCards := aCollectionOfValidAccount .! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:11:57' prior: 50861777!
withValidAccounts: aCollectionOfValidAccounts
	^self new initializeWithValidCards: aCollectionOfValidAccounts. ! !

!methodRemoval: MerchantProcessorSimulator #initializeWithValidAccounts: stamp: 'BAG 6/14/2021 21:11:57'!
initializeWithValidAccounts: aCollectionOfValidAccount
	validCards := aCollectionOfValidAccount .!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:12:06' prior: 50862109!
initializeWithValidCards: aCollectionOfValidCards
	validCards := aCollectionOfValidCards .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:13:31'!
initializeWithStolenCards: aCollectionOfValidCards
	validCards := aCollectionOfValidCards .! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:13:31' prior: 50862116!
withValidAccounts: aCollectionOfValidAccounts
	^self new initializeWithStolenCards: aCollectionOfValidAccounts. ! !

!methodRemoval: MerchantProcessorSimulator #initializeWithValidCards: stamp: 'BAG 6/14/2021 21:13:31'!
initializeWithValidCards: aCollectionOfValidCards
	validCards := aCollectionOfValidCards .!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/14/2021 21:13:40'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:13:41' prior: 50862136!
initializeWithStolenCards: aCollectionOfValidCards
	stolenCards := aCollectionOfValidCards .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:13:41' prior: 50861448!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifFalse: [self error: self class stolenCreditCardErrorDescription].! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:14:30'!
withStolenCards: aCollectionOfValidAccounts
	^self new initializeWithStolenCards: aCollectionOfValidAccounts. ! !

!methodRemoval: MerchantProcessorSimulator class #withValidAccounts: stamp: 'BAG 6/14/2021 21:14:30'!
withValidAccounts: aCollectionOfValidAccounts
	^self new initializeWithStolenCards: aCollectionOfValidAccounts. !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:14:43' prior: 50862180!
withStolenCards: aCollectionOfValidStolen
	^self new initializeWithStolenCards: aCollectionOfValidStolen. ! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:15:40' prior: 50861686!
createMerchantProcessor
	| stolenCards card |
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday.
	stolenCards := OrderedCollection with: card.
	^MerchantProcessorSimulator withStolenCards: stolenCards.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:15:56'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:15:56'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:17:13'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:17:13'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:17:48' prior: 50861924!
createCashier
	^Cashier for: self createMerchantProcessor .! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:17:53'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:17:53'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:18:22' prior: 50862201!
createMerchantProcessor
	| stolenCards card |
	card := self expiredCreditCard .
	stolenCards := OrderedCollection with: card.
	^MerchantProcessorSimulator withStolenCards: stolenCards.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:19:23'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:19:23'!
ERROR!

testFactory:=StoreTestObjectFactory new.!

testFactory expiredCreditCard = testFactory notExpiredCreditCard. !

testFactory expiredCreditCard = testFactory expiredCreditCard.   !

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:23:08'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:23:09'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today expiredCreditCard notExpiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:23:06' prior: 50861840 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.
	notExpiredCreditCard := CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:23:17' prior: 50862010!
expiredCreditCard
	^expiredCreditCard .! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:23:25' prior: 50862024!
notExpiredCreditCard
	^notExpiredCreditCard .! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:23:32'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:23:32'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:24:35' prior: 50862238!
createMerchantProcessor
	| stolenCards card |
	card := self notExpiredCreditCard .
	stolenCards := OrderedCollection with: card.
	^MerchantProcessorSimulator withStolenCards: stolenCards.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:24:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:24:46'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:28:50' prior: 50860474!
test03CheckoutCartWithManyItemsReturnsTotal
	| card cart cashier catalog |
	catalog := testObjectFactory defaultCatalog .	
	cart := testObjectFactory createCart.
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	cashier := testObjectFactory createCashier.
	card :=  testObjectFactory expiredCreditCard.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  card 
								  on: testObjectFactory today 
								  registeredOn: testObjectFactory createSalesBook ). 
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:29:13' prior: 50862323!
test03CheckoutCartWithManyItemsReturnsTotal
	| card cart cashier |
	
	cart := testObjectFactory createCart.
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	cashier := testObjectFactory createCashier.
	card :=  testObjectFactory expiredCreditCard.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  card 
								  on: testObjectFactory today 
								  registeredOn: testObjectFactory createSalesBook ). 
	
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:29:16'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:01'!
stolenCreditCard
	^notExpiredCreditCard .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:01' prior: 50862082!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory stolenCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:01' prior: 50862055!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory stolenCreditCard. 
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier := testObjectFactory createCashier .
	
	self 
		should: [cashier checkout: cart charging: card on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:01' prior: 50862307!
createMerchantProcessor
	| stolenCards card |
	card := self stolenCreditCard .
	stolenCards := OrderedCollection with: card.
	^MerchantProcessorSimulator withStolenCards: stolenCards.! !

!methodRemoval: StoreTestObjectFactory #notExpiredCreditCard stamp: 'BAG 6/14/2021 21:30:01'!
notExpiredCreditCard
	^notExpiredCreditCard .!

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:30:20'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today expiredCreditCard stolenCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:20' prior: 50862277 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.
	stolenCreditCard := CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:20' prior: 50862363!
stolenCreditCard
	^stolenCreditCard .! !

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:31:00'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today expiredCreditCard stolenCreditCard validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:59' prior: 50862436 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.
	stolenCreditCard := CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .
	validCreditCard := CreditCard numbered: 1234567812345689  owner: 'Roberto'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:31:21'!
validCreditCard
	^validCreditCard .! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:32:50'!
PASSED!

stolenCards includes: card!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:35:11' prior: 50862172!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:35:12'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:35:22' prior: 50862368!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory validCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:35:29' prior: 50862392!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory validCreditCard. 
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier := testObjectFactory createCashier .
	
	self 
		should: [cashier checkout: cart charging: card on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:35:32'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:35:34'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:35:45' prior: 50862342!
test03CheckoutCartWithManyItemsReturnsTotal
	| card cart cashier |
	
	cart := testObjectFactory createCart.
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	cashier := testObjectFactory createCashier.
	card :=  testObjectFactory validCreditCard.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  card 
								  on: testObjectFactory today 
								  registeredOn: testObjectFactory createSalesBook ). 
	
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:35:48'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:36:07' prior: 50861618!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := testObjectFactory expiredCreditCard. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:36:18' prior: 50862572!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := testObjectFactory expiredCreditCard. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:36:47' prior: 50862594!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory expiredCreditCard. 
	cart := testObjectFactory createCart.
	cart add:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 21:36:51'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:37:28' prior: 50861697!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory stolenCreditCard. 
	cart := testObjectFactory createCart.
	cart add:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:37:34' prior: 50862640!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory stolenCreditCard. 
	cart := testObjectFactory createCart.
	cart add:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:37:39'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'BAG 6/14/2021 21:37:50'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CashierTest #defaultCatalog stamp: 'BAG 6/14/2021 21:37:53'!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: 5).!

!methodRemoval: CashierTest #createCart stamp: 'BAG 6/14/2021 21:37:56'!
createCart
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	^cart!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:38:03' prior: 50862500!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory validCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: testObjectFactory itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: testObjectFactory itemSellByTheStore) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:38:47'!
test06CanNotCheckoutWithFakeCard
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory fakeCreditCard. 
	cart := testObjectFactory createCart.
	cart add:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:38:55'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:39:04'!
fakeCreditCard
	self shouldBeImplemented.! !

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:39:20'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today expiredCreditCard stolenCreditCard validCreditCard fakeCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:39:19' prior: 50862843!
fakeCreditCard
	^ fakeCreditCard! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:39:56'!
fakeCreditCardErrorDescription
	^'No puede realizarse el débito porque la tarjeta es falsa'.! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 21:42:11'!
withStolenCards: aCollectionOfValidStolen andValidCards: withValidCards 
	^self new initializeWithStolenCards: aCollectionOfValidStolen. ! !

!methodRemoval: MerchantProcessorSimulator class #withStolenCards: stamp: 'BAG 6/14/2021 21:42:11'!
withStolenCards: aCollectionOfValidStolen
	^self new initializeWithStolenCards: aCollectionOfValidStolen. !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 21:42:45' prior: 50862870!
withStolenCards: aCollectionOfValidStolen andValidCards: withValidCards 
	^self new initializeWithStolenCards: aCollectionOfValidStolen andValidCards: withValidCards. ! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/14/2021 21:43:47'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards validCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:43:46'!
initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards
	stolenCards := aCollectionOfStolenCards .
	validCards := aCollectionOfValidCards.! !

!methodRemoval: MerchantProcessorSimulator #initializeWithStolenCards: stamp: 'BAG 6/14/2021 21:43:51'!
initializeWithStolenCards: aCollectionOfValidCards
	stolenCards := aCollectionOfValidCards .!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 21:44:20' prior: 50862885!
withStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards 
	^self new initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards. ! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:47:06' prior: 50862413!
createMerchantProcessor
	| stolenCards validCards |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCreditCards: validCards.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:47:14' prior: 50862928!
createMerchantProcessor
	| stolenCards validCards |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards.! !

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:47:41'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:47:41'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:48:20' prior: 50862464 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.
	stolenCreditCard := CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .
	validCreditCard := CreditCard numbered: 1234567812345689  owner: 'Roberto'  expiredOn: FixedGregorianDate tomorrow .
	fakeCreditCard := CreditCard numbered: 1234567812345689  owner: 'Carlos'  expiredOn: FixedGregorianDate tomorrow .! !

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:48:28'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:48:28'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:48:43'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:48:49'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:48:49'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:49:55' prior: 50862489!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:57:03'!
test07CanNotCheckoutWithoutEnoughBalance
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory fakeCreditCard. 
	cart := testObjectFactory createCart.
	cart add:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator withoutBalanceCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:57:52' prior: 50863024!
test07CanNotCheckoutWithoutEnoughBalance
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory validCreditCard. 
	cart := testObjectFactory createCart.
	cart add: 80 of:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!MerchantProcessorSimulator class methodsFor: 'error description' stamp: 'BAG 6/14/2021 21:58:13'!
notEnoughBalanceErrorDescription
	^'No puede realizarse el débito porque la tarjeta no tiene saldo suficiente'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:59:27'!
initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards andAccounts: aCollectionOfAccounts
	stolenCards := aCollectionOfStolenCards .
	validCards := aCollectionOfValidCards.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/14/2021 21:59:51'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards validCards accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:59:47' prior: 50863077!
initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards andAccounts: anAccounts
	stolenCards := aCollectionOfStolenCards .
	validCards := aCollectionOfValidCards.
	accounts := anAccounts .! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 22:00:47'!
withStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards andAccounts: accounts
	^self new initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards andAccounts: accounts. ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 22:01:22' prior: 50863107!
withStolenCards: aStolenCards andValidCards: aValidCards andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: accounts. ! !

!methodRemoval: MerchantProcessorSimulator class #withStolenCards:andValidCards: stamp: 'BAG 6/14/2021 22:01:34'!
withStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards 
	^self new initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards. !

!methodRemoval: MerchantProcessorSimulator #initializeWithStolenCards:andValidCards: stamp: 'BAG 6/14/2021 22:01:47'!
initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards
	stolenCards := aCollectionOfStolenCards .
	validCards := aCollectionOfValidCards.!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:02:05' prior: 50863096!
initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: anAccounts
	stolenCards := aStolenCards .
	validCards := aValidCards.
	accounts := anAccounts .! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:05:10' prior: 50862940!
createMerchantProcessor
	| stolenCards validCards accounts |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: 30).
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:05:24' prior: 50863155!
createMerchantProcessor
	| stolenCards validCards accounts |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: 30).
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards andAccounts: accounts.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:05:46' prior: 50861800!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: self itemSellByTheStorePrice).! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:05:59'!
itemSellByTheStorePrice
	
	^ 5! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:06:34' prior: 50863170!
createMerchantProcessor
	| stolenCards validCards accounts |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards andAccounts: accounts.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:07:00' prior: 50863198!
createMerchantProcessor
	| stolenCards validCards accounts |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards andAccounts: accounts.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:11:22' prior: 50862995!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 22:11:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:14:12' prior: 50862551!
test03CheckoutCartWithManyItemsReturnsTotal
	| card cart cashier salesBook |
	
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	cashier := testObjectFactory createCashier.
	card :=  testObjectFactory validCreditCard.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  card 
								  on: testObjectFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: 25 equals: salesBook first.
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 22:14:15'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:14:54' prior: 50863249!
test03CheckoutCartWithManyItemsReturnsTotal
	| card cart cashier salesBook |
	
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	cashier := testObjectFactory createCashier.
	card :=  testObjectFactory validCreditCard.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  card 
								  on: testObjectFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: (5 * testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 22:14:57'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:15:41' prior: 50862748!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory validCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: testObjectFactory itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert: 5 equals: salesBook first.
	self assert:  (catalog at: testObjectFactory itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:15:56' prior: 50863300!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory validCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: testObjectFactory itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 22:15:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:03:49'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'nil' stamp: 'BAG 6/14/2021 23:03:48' overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:04:28' prior: 50860006!
test01NewCartsAreCreatedEmpty

	self assert: testObjectFactory createCart isEmpty! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 23:04:31'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:04:50' prior: 50859984!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectFactory createCart.
	
	self 
		should: [ cart add: testObjectFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:04:57' prior: 50860011!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectFactory createCart.
	
	cart add: testObjectFactory itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:05:05' prior: 50859971!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:05:12' prior: 50860026!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:10:15' prior: 50860039!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectFactory createCart.
	
	cart add: testObjectFactory itemSellByTheStore.
	self assert: (cart includes: testObjectFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:10:23' prior: 50860019!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectFactory createCart.
	
	self deny: (cart includes: testObjectFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:10:38' prior: 50859997!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectFactory createCart.
	
	cart add: 2 of: testObjectFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectFactory itemSellByTheStore) = 2! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!methodRemoval: CartTest #createCart stamp: 'BAG 6/14/2021 23:10:47'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'BAG 6/14/2021 23:10:50'!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: 5).!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'BAG 6/14/2021 23:10:53'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'BAG 6/14/2021 23:10:55'!
itemNotSellByTheStore
	
	^'invalidBook'!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:08'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:10'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1 cart1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:39'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1 cart1 cashier1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1 cart1 cashier1 catalog1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:13:36' prior: 50861265 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	salesBook1 := testObjectFactory createSalesBook.
	cart1 := testObjectFactory createCart.
	cashier1 := testObjectFactory createCashier.
	catalog1 := testObjectFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:14:35' prior: 50862524!
test01CanNotCheckoutAnEmptyCart
	self 
		should: [cashier1 checkout: cart1 charging: validCreditCard on: testObjectFactory today registeredOn: salesBook1]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier1 invalidCartErrorMessage.
			self assert: cart1 isEmpty.
			self assert: salesBook1 isEmpty. 
		].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 23:14:39'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:15:25' prior: 50863326!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart1 add: testObjectFactory itemSellByTheStore. 
	self assert: (catalog1 at: testObjectFactory itemSellByTheStore) equals: (cashier1 checkout: cart1 charging: validCreditCard  on: testObjectFactory today registeredOn: salesBook1 ). 
	self assert: 1 equals: salesBook1 size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook1 first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 23:15:30'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:16:09' prior: 50863274!
test03CheckoutCartWithManyItemsReturnsTotal
	cart1 add: 5 of: testObjectFactory itemSellByTheStore.
	
	self assert: cart1 total equals: (cashier1 checkout: cart1 
								  charging:  validCreditCard 
								  on: testObjectFactory today 
								  registeredOn: salesBook1). 
	self assert: 1 equals: salesBook1 size. 
	self assert: (5 * testObjectFactory itemSellByTheStorePrice) equals: salesBook1 first.
		! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:16:47'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1 cart1 cashier1 catalog1 expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:16:45' prior: 50862615!
test04CanNotCheckoutWithExpiredCard
	cart1 add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart1 charging: expiredCreditCard  on: testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier1 invalidCardErrorMessage.
			self assert: salesBook1 isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:17:03' prior: 50863688 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	expiredCreditCard := testObjectFactory expiredCreditCard.
	salesBook1 := testObjectFactory createSalesBook.
	cart1 := testObjectFactory createCart.
	cashier1 := testObjectFactory createCashier.
	catalog1 := testObjectFactory defaultCatalog .! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 23:17:08'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:17:34' prior: 50862663!
test05CanNotCheckoutWithStolenCard
	cart1 add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart1 charging: stolenCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:17:37'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:18:05' prior: 50862817!
test06CanNotCheckoutWithFakeCard
	cart1 add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart1 charging: fakeCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 23:18:08'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:18:37' prior: 50863047!
test07CanNotCheckoutWithoutEnoughBalance
	cart1 add: 80 of:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart1 charging: validCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:19:23'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1 cart cashier1 catalog1 expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863826!
test06CanNotCheckoutWithFakeCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: fakeCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863846!
test07CanNotCheckoutWithoutEnoughBalance
	cart add: 80 of:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: validCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863806!
test05CanNotCheckoutWithStolenCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: stolenCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863721!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart add: testObjectFactory itemSellByTheStore. 
	self assert: (catalog1 at: testObjectFactory itemSellByTheStore) equals: (cashier1 checkout: cart charging: validCreditCard  on: testObjectFactory today registeredOn: salesBook1 ). 
	self assert: 1 equals: salesBook1 size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook1 first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863768!
test04CanNotCheckoutWithExpiredCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: expiredCreditCard  on: testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier1 invalidCardErrorMessage.
			self assert: salesBook1 isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863785 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	expiredCreditCard := testObjectFactory expiredCreditCard.
	salesBook1 := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier1 := testObjectFactory createCashier.
	catalog1 := testObjectFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863741!
test03CheckoutCartWithManyItemsReturnsTotal
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	
	self assert: cart total equals: (cashier1 checkout: cart 
								  charging:  validCreditCard 
								  on: testObjectFactory today 
								  registeredOn: salesBook1). 
	self assert: 1 equals: salesBook1 size. 
	self assert: (5 * testObjectFactory itemSellByTheStorePrice) equals: salesBook1 first.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863704!
test01CanNotCheckoutAnEmptyCart
	self 
		should: [cashier1 checkout: cart charging: validCreditCard on: testObjectFactory today registeredOn: salesBook1]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier1 invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook1 isEmpty. 
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:19:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook cart cashier1 catalog1 expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50863925!
test06CanNotCheckoutWithFakeCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: fakeCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50863942!
test07CanNotCheckoutWithoutEnoughBalance
	cart add: 80 of:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: validCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50863959!
test05CanNotCheckoutWithStolenCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: stolenCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50863976!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart add: testObjectFactory itemSellByTheStore. 
	self assert: (catalog1 at: testObjectFactory itemSellByTheStore) equals: (cashier1 checkout: cart charging: validCreditCard  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50863992!
test04CanNotCheckoutWithExpiredCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: expiredCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier1 invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50864009 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	expiredCreditCard := testObjectFactory expiredCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier1 := testObjectFactory createCashier.
	catalog1 := testObjectFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50864027!
test03CheckoutCartWithManyItemsReturnsTotal
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	
	self assert: cart total equals: (cashier1 checkout: cart 
								  charging:  validCreditCard 
								  on: testObjectFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: (5 * testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50864043!
test01CanNotCheckoutAnEmptyCart
	self 
		should: [cashier1 checkout: cart charging: validCreditCard on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier1 invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:19:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook cart cashier1 catalog expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:36' prior: 50864151 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	expiredCreditCard := testObjectFactory expiredCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier1 := testObjectFactory createCashier.
	catalog := testObjectFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:36' prior: 50864118!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart add: testObjectFactory itemSellByTheStore. 
	self assert: (catalog at: testObjectFactory itemSellByTheStore) equals: (cashier1 checkout: cart charging: validCreditCard  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:19:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook cart cashier catalog expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864068!
test06CanNotCheckoutWithFakeCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: fakeCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864084!
test07CanNotCheckoutWithoutEnoughBalance
	cart add: 80 of:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: validCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864101!
test05CanNotCheckoutWithStolenCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: stolenCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864228!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart add: testObjectFactory itemSellByTheStore. 
	self assert: (catalog at: testObjectFactory itemSellByTheStore) equals: (cashier checkout: cart charging: validCreditCard  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864134!
test04CanNotCheckoutWithExpiredCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: expiredCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864210 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	expiredCreditCard := testObjectFactory expiredCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier := testObjectFactory createCashier.
	catalog := testObjectFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864169!
test03CheckoutCartWithManyItemsReturnsTotal
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  validCreditCard 
								  on: testObjectFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: (5 * testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864185!
test01CanNotCheckoutAnEmptyCart
	self 
		should: [cashier checkout: cart charging: validCreditCard on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:25' prior: 50863146!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCards := aStolenCard .
	validCards := aValidCard.
	accounts := anAccount .! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:08:32'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCards accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:32' prior: 50864437!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCard := aStolenCard .
	validCards := aValidCard.
	accounts := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:32' prior: 50863232!
debitFor: card amount: anAmount
	(stolenCard includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:08:38'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCard accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:38' prior: 50864455!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCard := aStolenCard .
	validCard := aValidCard.
	accounts := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:38' prior: 50864464!
debitFor: card amount: anAmount
	(stolenCard includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:08:43'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCard account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:43' prior: 50864487!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCard := aStolenCard .
	validCard := aValidCard.
	account := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:43' prior: 50864496!
debitFor: card amount: anAmount
	(stolenCard includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > account at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:08:59'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards validCard account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:59' prior: 50864519!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCards := aStolenCard .
	validCard := aValidCard.
	account := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:59' prior: 50864528!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > account at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:09:04'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards validCards account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:04' prior: 50864551!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCards := aStolenCard .
	validCards := aValidCard.
	account := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:04' prior: 50864560!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > account at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:09:08'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards validCards accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:08' prior: 50864583!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCards := aStolenCard .
	validCards := aValidCard.
	accounts := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:08' prior: 50864592!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:16' prior: 50864615!
initializeWithStolenCards: aStolenCards andValidCards: aValidCard andAccounts: anAccount
	stolenCards := aStolenCards .
	validCards := aValidCard.
	accounts := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:19' prior: 50864638!
initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: anAccount
	stolenCards := aStolenCards .
	validCards := aValidCards.
	accounts := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:23' prior: 50864647!
initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: anAccounts
	stolenCards := aStolenCards .
	validCards := aValidCards.
	accounts := anAccounts .! !

----SNAPSHOT----(15 June 2021 00:09:30) CuisUniversity-4532.image priorSource: 16929209!

----QUIT----(15 June 2021 00:10:12) CuisUniversity-4532.image priorSource: 17056434!

----STARTUP---- (15 June 2021 18:27:42) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:29' prior: 50864624!
debitFor: card amount: anAmount
	(stolenCards = card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 18:30:32'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCards accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:32' prior: 50864656!
initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: anAccounts
	stolenCard := aStolenCards .
	validCards := aValidCards.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:32' prior: 50864675!
debitFor: card amount: anAmount
	(stolenCard = card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:42' prior: 50864707!
debitFor: card amount: anAmount
	(stolenCard = card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards = card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 18:30:45'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCard accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:45' prior: 50864697!
initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: anAccounts
	stolenCard := aStolenCards .
	validCard := aValidCards.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:45' prior: 50864721!
debitFor: card amount: anAmount
	(stolenCard = card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard = card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:33:34' prior: 50864743!
initializeWithStolenCards: aStolenCard andValidCards: aValidCards andAccounts: anAccounts
	stolenCard := aStolenCard .
	validCard := aValidCards.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:33:39' prior: 50864766!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCard := aStolenCard .
	validCard := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/15/2021 18:33:52' prior: 50863118!
withStolenCards: aStolenCard andValidCards: aValidCards andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCards andAccounts: accounts. ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/15/2021 18:34:03' prior: 50864784!
withStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts. ! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:34:59' prior: 50863215!
createMerchantProcessor
	| stolenCards validCards accounts |
	stolenCards := self stolenCreditCard.
	validCards := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards andAccounts: accounts.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:40:15' prior: 50864803!
createMerchantProcessor
	| stolenCard validCards accounts |
	stolenCard := self stolenCreditCard.
	validCards := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCards: stolenCard andValidCards: validCards andAccounts: accounts.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:40:20' prior: 50864866!
createMerchantProcessor
	| stolenCard validCard accounts |
	stolenCard := self stolenCreditCard.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCards: stolenCard andValidCards: validCard andAccounts: accounts.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:40:38' prior: 50864881!
createMerchantProcessor
	| stolenCard validCard accounts |
	stolenCard := self stolenCreditCard.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCard: stolenCard andValidCard: validCard andAccounts: accounts.! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/15/2021 18:40:53'!
withStolenCard: aStolenCard andValidCard: aValidCard andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts. ! !

!methodRemoval: MerchantProcessorSimulator class #withStolenCards:andValidCards:andAccounts: stamp: 'BAG 6/15/2021 18:40:53'!
withStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts. !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

----SNAPSHOT----(15 June 2021 18:50:04) CuisUniversity-4532.image priorSource: 17056524!

----STARTUP---- (16 June 2021 23:07:22) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:17:57' prior: 50864752!
debitFor: card amount: anAmount
	(stolenCard = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/16/2021 23:18:18'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCardNumber validCard accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:18:18' prior: 50864775!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCardNumber := aStolenCard .
	validCard := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:18:18' prior: 50864985!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:21:34' prior: 50865018!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard number = card number and: validCard owner = card owner) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!CreditCard methodsFor: 'accesing' stamp: 'BAG 6/16/2021 23:28:11'!
number
	^number ! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:28:32' prior: 50865032!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard number = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/16/2021 23:28:36'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCard accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:28:36' prior: 50865008!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCard := aStolenCard .
	validCard := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:28:36' prior: 50865050!
debitFor: card amount: anAmount
	(stolenCard = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard number = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:29:13' prior: 50865082!
debitFor: card amount: anAmount
	(stolenCard number = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard number = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/16/2021 23:29:18'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCardNumber validCard accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:29:18' prior: 50865073!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCardNumber := aStolenCard .
	validCard := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:29:18' prior: 50865096!
debitFor: card amount: anAmount
	(stolenCardNumber number = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard number = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:29:29' prior: 50865129!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/16/2021 23:29:33'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCardNumber validCardNumber accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:29:33' prior: 50865119!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCardNumber := aStolenCard .
	validCardNumber := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:29:33' prior: 50865143!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCardNumber = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/16/2021 23:30:49'!
withStolenCardNumber: aStolenCard andValidCardNumber: aValidCard andAccount: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts. ! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:30:49' prior: 50864896!
createMerchantProcessor
	| stolenCard validCard accounts |
	stolenCard := self stolenCreditCard.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCard andValidCardNumber: validCard andAccount: accounts.! !

!methodRemoval: MerchantProcessorSimulator class #withStolenCard:andValidCard:andAccounts: stamp: 'BAG 6/16/2021 23:30:49'!
withStolenCard: aStolenCard andValidCard: aValidCard andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts. !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/16/2021 23:30:55' prior: 50865190!
withStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCard andAccount: accounts
	^self new initializeWithStolenCards: aStolenCardNumber andValidCards: aValidCard andAccounts: accounts. ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/16/2021 23:31:00' prior: 50865225!
withStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: accounts
	^self new initializeWithStolenCards: aStolenCardNumber andValidCards: aValidCardNumber andAccounts: accounts. ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/16/2021 23:31:08' prior: 50865235!
withStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: account
	^self new initializeWithStolenCards: aStolenCardNumber andValidCards: aValidCardNumber andAccounts: account. ! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:31:28'!
initializeWithStolenCardNumber: aStolenCard andValidCardNumber: aValidCard andAccount: anAccounts
	stolenCardNumber := aStolenCard .
	validCardNumber := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:31:28' prior: 50865246!
withStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: account
	^self new initializeWithStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: account. ! !

!methodRemoval: MerchantProcessorSimulator #initializeWithStolenCards:andValidCards:andAccounts: stamp: 'BAG 6/16/2021 23:31:28'!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCardNumber := aStolenCard .
	validCardNumber := aValidCard.
	accounts := anAccounts .!
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:31:36' prior: 50865256!
initializeWithStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCard andAccount: anAccounts
	stolenCardNumber := aStolenCardNumber .
	validCardNumber := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:31:41' prior: 50865286!
initializeWithStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: anAccounts
	stolenCardNumber := aStolenCardNumber .
	validCardNumber := aValidCardNumber.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:31:45' prior: 50865296!
initializeWithStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: anAccount
	stolenCardNumber := aStolenCardNumber .
	validCardNumber := aValidCardNumber.
	accounts := anAccount .! !
!StoreTestObjectFactory methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:35:45' prior: 50862959 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := 
	stolenCreditCard := CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .
	validCreditCard := CreditCard numbered: 1234567812345689  owner: 'Roberto'  expiredOn: FixedGregorianDate tomorrow .
	fakeCreditCard := CreditCard numbered: 1234567812345690  owner: 'Carlos'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'credit card' stamp: 'BAG 6/16/2021 23:36:08' prior: 50862290!
expiredCreditCard
	^CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.! !
!StoreTestObjectFactory methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:36:37' prior: 50865318 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := 
	stolenCreditCard := 
	validCreditCard := CreditCard numbered: 1234567812345689  owner: 'Roberto'  expiredOn: FixedGregorianDate tomorrow .
	fakeCreditCard := CreditCard numbered: 1234567812345690  owner: 'Carlos'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'credit card' stamp: 'BAG 6/16/2021 23:36:51' prior: 50862449!
stolenCreditCard
	^CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:37:06' prior: 50865343 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := 
	stolenCreditCard := 
	validCreditCard := 
	fakeCreditCard := CreditCard numbered: 1234567812345690  owner: 'Carlos'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'credit card' stamp: 'BAG 6/16/2021 23:37:22' prior: 50862480!
validCreditCard
	^CreditCard numbered: 1234567812345689  owner: 'Roberto'  expiredOn: FixedGregorianDate tomorrow.! !
!StoreTestObjectFactory methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:37:35' prior: 50865365 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.! !
!StoreTestObjectFactory methodsFor: 'credit card' stamp: 'BAG 6/16/2021 23:37:45' prior: 50862858!
fakeCreditCard
	^ CreditCard numbered: 1234567812345690  owner: 'Carlos'  expiredOn: FixedGregorianDate tomorrow .! !

Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/16/2021 23:37:52'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:39:13' prior: 50865200!
createMerchantProcessor
	| stolenCard validCard accounts |
	stolenCard := self stolenCreditCard.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: 1234567812345679 andValidCardNumber: validCard andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:39:39' prior: 50865409!
createMerchantProcessor
	| stolenCard validCard accounts |
	stolenCard := self stolenCreditCard number.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: 1234567812345679 andValidCardNumber: validCard andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:39:47' prior: 50865424!
createMerchantProcessor
	| stolenCardNumber validCard accounts |
	stolenCardNumber := self stolenCreditCard number.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: 1234567812345679 andValidCardNumber: validCard andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:40:01' prior: 50865440!
createMerchantProcessor
	| stolenCardNumber validCard accounts |
	stolenCardNumber := self stolenCreditCard number.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCard andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:40:23' prior: 50865456!
createMerchantProcessor
	| stolenCardNumber validCard accounts |
	stolenCardNumber := self stolenCreditCard number.
	validCard := self validCreditCard .
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCard andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:40:27' prior: 50865472!
createMerchantProcessor
	| stolenCardNumber validCardNumber accounts |
	stolenCardNumber := self stolenCreditCard number.
	validCardNumber := self validCreditCard .
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCardNumber andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:40:32' prior: 50865488!
createMerchantProcessor
	| stolenCardNumber validCardNumber account |
	stolenCardNumber := self stolenCreditCard number.
	validCardNumber := self validCreditCard .
	account := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCardNumber andAccount: account.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:40:37' prior: 50865505!
createMerchantProcessor
	| stolenCardNumber validCardNumber account |
	stolenCardNumber := self stolenCreditCard number.
	validCardNumber := self validCreditCard number.
	account := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCardNumber andAccount: account.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/16/2021 23:40:51'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:40:51'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/16/2021 23:40:51'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/16/2021 23:40:51'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/16/2021 23:40:51'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/16/2021 23:40:51'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/16/2021 23:40:51'!
FAILURE!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:40:58'!
ERROR!
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:42:21' prior: 50865521!
createMerchantProcessor
	| stolenCardNumber validCardNumber account |
	stolenCardNumber := self stolenCreditCard number.
	validCardNumber := self validCreditCard number.
	account := Dictionary with: (Association key: validCardNumber value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCardNumber andAccount: account.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/16/2021 23:42:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:42:24'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/16/2021 23:42:24'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/16/2021 23:42:24'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/16/2021 23:42:24'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/16/2021 23:42:24'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/16/2021 23:42:24'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:42:37' prior: 50865176!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCardNumber = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card number) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:46:08' prior: 50861462!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	sale := aCart total.
	merchantProcessor debitFor: aCard amount: sale.
	salesBook add: sale.
	
	^sale.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:46:53'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage]! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:46:53' prior: 50865639!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	self assertCartIsNotEmpty: aCart.
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	sale := aCart total.
	merchantProcessor debitFor: aCard amount: sale.
	salesBook add: sale.
	
	^sale.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:48:31'!
assertCreditCard: today IsNotExpiredOn: aCard

	^ (aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage]! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:48:31' prior: 50865658!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCard: today IsNotExpiredOn: aCard.
	
	sale := aCart total.
	merchantProcessor debitFor: aCard amount: sale.
	salesBook add: sale.
	
	^sale.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:49:06' prior: 50865670!
assertCreditCard: aCreditCard IsNotExpiredOn: aDate

	^ (aCreditCard isExpiredOn: aDate) ifTrue:[self error: self invalidCardErrorMessage]! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:49:36' prior: 50865677!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCard: aCard IsNotExpiredOn: today.
	
	sale := aCart total.
	merchantProcessor debitFor: aCard amount: sale.
	salesBook add: sale.
	
	^sale.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:49:42' prior: 50865697!
checkout: aCart charging: aCreditCard on: today registeredOn: salesBook
	| sale |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCard: aCreditCard IsNotExpiredOn: today.
	
	sale := aCart total.
	merchantProcessor debitFor: aCreditCard amount: sale.
	salesBook add: sale.
	
	^sale.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:49:59' prior: 50865709!
checkout: aCart charging: aCreditCard on: aDate registeredOn: salesBook
	| sale |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCard: aCreditCard IsNotExpiredOn: aDate.
	
	sale := aCart total.
	merchantProcessor debitFor: aCreditCard amount: sale.
	salesBook add: sale.
	
	^sale.! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:51:10' prior: 50865603!
debitFor: aCreditCard amount: anAmount
	(stolenCardNumber = aCreditCard number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCardNumber = aCreditCard number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:52:11'!
assertCreditCardIsNotStolen: aCreditCard

	^ (stolenCardNumber = aCreditCard number) ifTrue: [self error: self class stolenCreditCardErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:52:11' prior: 50865782!
debitFor: aCreditCard amount: anAmount
	self assertCreditCardIsNotStolen: aCreditCard.
	(validCardNumber = aCreditCard number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:52:36'!
assertCreditCardIsValid: aCreditCard

	^ (validCardNumber = aCreditCard number) ifFalse: [self error: self class fakeCreditCardErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:52:36' prior: 50865806!
debitFor: aCreditCard amount: anAmount
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	(anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:56:22'!
assertAccountForCreditCard: aCreditCard canDebit: anAmount

	^ (anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:56:22' prior: 50865827!
debitFor: aCreditCard amount: anAmount
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountForCreditCard: aCreditCard canDebit: anAmount.! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:56:36'!
assertAccountFor: aCreditCard canDebit: anAmount

	^ (anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:56:36' prior: 50865847!
debitFor: aCreditCard amount: anAmount
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.! !

!methodRemoval: MerchantProcessorSimulator #assertAccountForCreditCard:canDebit: stamp: 'BAG 6/16/2021 23:56:36'!
assertAccountForCreditCard: aCreditCard canDebit: anAmount

	^ (anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription]!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:02:11'!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: validCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:03:00' prior: 50865931!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:testObjectFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:03:05'!
FAILURE!

accounts!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 00:12:15' prior: 50865865!
debitFor: aCreditCard amount: anAmount
	| balance |
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	balance := accounts at: aCreditCard number.
	balance := balance - anAmount .
	accounts at: aCreditCard number put: balance.! !

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:12:17'!
ERROR!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:12:26'!
FAILURE!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:12:26'!
FAILURE!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:12:30'!
FAILURE!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:12:30'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:13:03' prior: 50865948!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:testObjectFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:14:35' prior: 50866005!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:testObjectFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (testObjectFactory itemSellByTheStorePrice) equals: salesBook size.
		].
	
		! !

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:14:37'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:14:52' prior: 50866025!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:testObjectFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:17:02' prior: 50864371!
test01CanNotCheckoutAnEmptyCart
	| salesBook1 |
	salesBook1 := testObjectFactory createSalesBook.
	
	self 
		should: [cashier checkout: cart charging: testObjectFactory validCreditCard on: testObjectFactory today registeredOn: salesBook1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 00:17:06'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory cart cashier '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/17/2021 00:17:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory cart cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/17/2021 00:17:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'storeFactory cart cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864288!
test05CanNotCheckoutWithStolenCard
	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: stolenCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864271!
test07CanNotCheckoutWithoutEnoughBalance
	cart add: 80 of:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: validCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864337 overrides: 16927572!
setUp
	storeFactory := StoreTestObjectFactory new.
	validCreditCard := storeFactory validCreditCard.
	stolenCreditCard := storeFactory stolenCreditCard.
	fakeCreditCard := storeFactory fakeCreditCard.
	expiredCreditCard := storeFactory expiredCreditCard.
	salesBook := storeFactory createSalesBook.
	cart := storeFactory createCart.
	cashier := storeFactory createCashier.
	catalog := storeFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864355!
test03CheckoutCartWithManyItemsReturnsTotal
	cart add: 5 of: storeFactory itemSellByTheStore.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  validCreditCard 
								  on: storeFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: (5 * storeFactory itemSellByTheStorePrice) equals: salesBook first.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864321!
test04CanNotCheckoutWithExpiredCard
	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: expiredCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864255!
test06CanNotCheckoutWithFakeCard
	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: fakeCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50866105!
test01CanNotCheckoutAnEmptyCart
	| salesBook1 |
	salesBook1 := storeFactory createSalesBook.
	
	self 
		should: [cashier checkout: cart charging: storeFactory validCreditCard on: storeFactory today registeredOn: salesBook1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864305!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart add: storeFactory itemSellByTheStore. 
	self assert: (catalog at: storeFactory itemSellByTheStore) equals: (cashier checkout: cart charging: validCreditCard  on: storeFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (storeFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50866052!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:storeFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (storeFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:17:48' prior: 50866243!
test01CanNotCheckoutAnEmptyCart
	| salesBook |
	salesBook := storeFactory createSalesBook.
	
	self 
		should: [cashier checkout: cart charging: storeFactory validCreditCard on: storeFactory today registeredOn: salesBook ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:19:15' prior: 50866260!
test02CheckoutCartWithOneItemReturnsTotal
	| catalog salesBook |
	salesBook := storeFactory createSalesBook .
	catalog := storeFactory  defaultCatalog.
	 
	cart add: storeFactory itemSellByTheStore. 
	self assert: (catalog at: storeFactory itemSellByTheStore) equals: (cashier checkout: 
														cart charging: storeFactory validCreditCard  
														on: storeFactory today 
														registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (storeFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:24:33' prior: 50866195!
test03CheckoutCartWithManyItemsReturnsTotal
	| salesBook |
	salesBook := storeFactory createSalesBook.
	
	cart add: 5 of: storeFactory itemSellByTheStore.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  storeFactory validCreditCard 
								  on: storeFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: (5 * storeFactory itemSellByTheStorePrice) equals: salesBook first.
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:25:31' prior: 50866211!
test04CanNotCheckoutWithExpiredCard
	| salesBook |
	salesBook := storeFactory createSalesBook. 
	
	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: storeFactory expiredCreditCard  on: storeFactory today  registeredOn: salesBook] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:26:10' prior: 50866145!
test05CanNotCheckoutWithStolenCard
	| salesBook |
	salesBook := storeFactory createSalesBook. 
	
	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: storeFactory stolenCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:26:37' prior: 50866227!
test06CanNotCheckoutWithFakeCard
	| salesBook |
	salesBook := storeFactory createSalesBook.

	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: storeFactory fakeCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:26:50' prior: 50866161!
test07CanNotCheckoutWithoutEnoughBalance
	| salesBook |
	salesBook := storeFactory createSalesBook.
	
	cart add: 80 of:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: storeFactory validCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:28:18' prior: 50866276!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 5 of:storeFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (storeFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!
!CashierTest methodsFor: 'setup' stamp: 'BAG 6/17/2021 00:29:45' prior: 50866178 overrides: 16927572!
setUp
	storeFactory := StoreTestObjectFactory new.
	cart := storeFactory createCart.
	cashier := storeFactory createCashier.
	! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 00:36:03'!
substract: anAmount from: anAccountNumber
	| balance |
	
	balance := accounts at: anAccountNumber .
	balance := balance - anAmount .
	accounts at: anAccountNumber put: balance.! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 00:36:27' prior: 50865973!
debitFor: aCreditCard amount: anAmount
	
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

----SNAPSHOT----(17 June 2021 00:41:06) CuisUniversity-4532.image priorSource: 17066442!

----QUIT----(17 June 2021 00:41:12) CuisUniversity-4532.image priorSource: 17117940!

----STARTUP---- (17 June 2021 16:07:41) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 16:09:34'!
test09CanNotCheckoutWithBalanceExceeded
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 5 of:storeFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (storeFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 16:10:03' prior: 50866596!
test09CanNotCheckoutWithBalanceExceeded
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 5 of:storeFactory expensiveItemSellByTheStore. 
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (storeFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 16:10:09' prior: 50866622!
test09CanNotCheckoutWithBalanceExceeded
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 2 of:storeFactory expensiveItemSellByTheStore. 
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (storeFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !
!StoreTestObjectFactory methodsFor: 'sell item' stamp: 'BAG 6/17/2021 16:10:28'!
expensiveItemSellByTheStore
	
	^ 'expensive validBook'! !
!StoreTestObjectFactory methodsFor: 'sell item' stamp: 'BAG 6/17/2021 16:11:34'!
expensiveItemSellByTheStorePrice
	
	^ 923456789123456! !
!StoreTestObjectFactory methodsFor: 'catalog' stamp: 'BAG 6/17/2021 16:12:36' prior: 50863186!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: self itemSellByTheStorePrice) 
			     with: (Association key: self expensiveItemSellByTheStore  value: self expensiveItemSellByTheStorePrice).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:12:43'!
FAILURE!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:12:43'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 16:13:23' prior: 50866645!
test09CanNotCheckoutWithBalanceExceeded
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 2 of:storeFactory expensiveItemSellByTheStore. 
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 0 equals: salesBook size.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 16:13:51' prior: 50866747!
test09CanNotCheckoutWithBalanceExceeded
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 2 of:storeFactory expensiveItemSellByTheStore. 
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator balanceExceededErrorDescription.
			self assert: 0 equals: salesBook size.
		].
	
		! !

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:13:55'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'error description' stamp: 'BAG 6/17/2021 16:14:10'!
balanceExceededErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessorSimulator class methodsFor: 'error description' stamp: 'BAG 6/17/2021 16:14:47' prior: 50866793!
balanceExceededErrorDescription
	^'No puede debitarse un monto con más de 15 digitos'.! !

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:14:51'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:16:47' prior: 50866524!
debitFor: aCreditCard amount: anAmount
	
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	(anAmount asInteger asString size > 15) ifTrue: [self error: self class balanceExceededErrorDescription ].
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:16:53'!
FAILURE!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:16:53'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:17:09' prior: 50866809!
debitFor: aCreditCard amount: anAmount

	(anAmount asInteger asString size > 15) ifTrue: [self error: self class balanceExceededErrorDescription ].
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

123456789 numberOfDigitsInBase: 10.!

123456789123456789 numberOfDigitsInBase: 10. !

123456789123456789123 numberOfDigitsInBase: 10.  18 !

123456789123456789123 numberOfDigitsInBase: 10.!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:18:43' prior: 50866882!
debitFor: aCreditCard amount: anAmount

	((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class balanceExceededErrorDescription ].
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:19:02' prior: 50866958!
debitFor: aCreditCard amount: anAmount

	((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class balanceExceededErrorDescription ].
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:19:42'!
assertValidAmount: anAmount

	^ ((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class balanceExceededErrorDescription ]! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:19:42' prior: 50867028!
debitFor: aCreditCard amount: anAmount

	self assertValidAmount: anAmount.
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

----SNAPSHOT----(17 June 2021 16:20:30) CuisUniversity-4532.image priorSource: 17118030!

----QUIT----(17 June 2021 16:20:34) CuisUniversity-4532.image priorSource: 17136706!

----STARTUP---- (17 June 2021 20:37:02) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!


!classRemoval: #StoreTestObjectFactory stamp: 'BAG 6/17/2021 20:38:21'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulator stamp: 'BAG 6/17/2021 20:38:22'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCardNumber validCardNumber accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'BAG 6/17/2021 20:38:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'BAG 6/17/2021 20:38:23'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'BAG 6/17/2021 20:38:24'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'BAG 6/17/2021 20:38:24'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'storeFactory cart cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'BAG 6/17/2021 20:38:25'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/TusLibros-33.st----!

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/17/2021 20:50:53'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #RestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/17/2021 20:51:12'!
Object subclass: #RestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'nil' stamp: 'BAG 6/17/2021 20:58:27'!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface new.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [
			self assert: true.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 21:01:28' prior: 50867807!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface new.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 21:01:31'!
ERROR!
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/17/2021 21:02:03'!
createCartForUser: aString withPassword: aString2 
	self shouldBeImplemented.! !
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/17/2021 21:03:41' prior: 50867837!
createCartForUser: aUsername withPassword: aPassword 
	self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 21:03:41'!
ERROR!
!RestInterface class methodsFor: 'error descriptions' stamp: 'BAG 6/17/2021 21:03:54'!
canNotCreateCartWithInvalidCredentialsErrorDescription
	self shouldBeImplemented.! !
!RestInterface class methodsFor: 'error descriptions' stamp: 'BAG 6/17/2021 21:04:16' prior: 50867854!
canNotCreateCartWithInvalidCredentialsErrorDescription
	^'No se puede crear un carrito con credenciales inválidas.'! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 21:04:18'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 21:04:18'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 21:11:58'!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface new.
	cartID := restInterface createCartForUser: 'RupertoEl+Kpo' withPassword: '3333'. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/17/2021 21:12:05'!
ERROR!
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/17/2021 21:15:07' prior: 50867843!
createCartForUser: aUsername withPassword: aPassword 
	(aUsername = 'RupertoEl+Kpo' and: aPassword = '3333') ifFalse: [self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription].
	
	^'1'
	! !

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/17/2021 21:15:10'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/17/2021 21:18:31'!
listCart: aString 
	self shouldBeImplemented.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/17/2021 21:19:03' prior: 50867903!
listCart: aCartID
	^OrderedCollection new. 
	! !

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/17/2021 21:19:05'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 21:19:05'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/17/2021 21:19:05'!
PASSED!

Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/17/2021 21:20:21'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/17/2021 21:23:35'!
initializeWithAuthenticator: aUserAuthenticator
	userAuthenticator := aUserAuthenticator.
	
	! !
!RestInterface class methodsFor: 'nil' stamp: 'BAG 6/17/2021 21:24:15'!
withAuthenticator: aUserAuthenticator
	^self new initializeWithAuthenticator: aUserAuthenticator. ! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/17/2021 21:26:08'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'userAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'nil' stamp: 'BAG 6/17/2021 21:26:06' overrides: 16927572!
setUp
	userAuthenticator := Dictionary with: (Association key:'RupertoEl+Kpo'  value:'3333'). ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 21:26:28' prior: 50867874!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: userAuthenticator.
	cartID := restInterface createCartForUser: 'RupertoEl+Kpo' withPassword: '3333'. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/17/2021 21:30:04' prior: 50867890!
createCartForUser: aUsername withPassword: aPassword 
	userAuthenticator at:  'RupertoEl+Kpo' ifPresent:[:password | password = aPassword ]  ifAbsent: [self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription]. 
	
	^'1'
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 21:30:06'!
ERROR!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/17/2021 21:30:06'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 21:30:06'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 21:30:46' prior: 50867819!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: userAuthenticator.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 21:30:47'!
FAILURE!
!RestInterfaceTest methodsFor: 'nil' stamp: 'BAG 6/17/2021 23:40:07'!
authenticate: aUsername with: aPassword
	! !
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/17/2021 23:40:16' prior: 50867975!
createCartForUser: aUsername withPassword: aPassword 
	
	
	^'1'
	! !
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/17/2021 23:40:28' prior: 50868066!
createCartForUser: aUsername withPassword: aPassword 
	userAuthenticator at:  'RupertoEl+Kpo' ifPresent:[:password | password = aPassword ]  ifAbsent: [self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription]. 
	
	^'1'
	! !
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/17/2021 23:40:57' prior: 50868072!
createCartForUser: aUsername withPassword: aPassword 
	userAuthenticator authenticate: aUsername with: aPassword. 
	
	^'1'
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:41:39' prior: 50868061!
authenticate: aUsername with: aPassword
	^userAuthenticator at:  'RupertoEl+Kpo' ifPresent:[:password | password = aPassword ]  ifAbsent: [false]. 
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/17/2021 23:43:04'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'userAuthenticator validPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:43:03' prior: 50868091!
authenticate: aUsername with: aPassword
	^userAuthenticator = aUsername and: validPassword = aPassword. 
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/17/2021 23:43:13'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:43:13' prior: 50867962!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: validUsername.
	cartID := restInterface createCartForUser: 'RupertoEl+Kpo' withPassword: '3333'. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:43:13' prior: 50868108!
authenticate: aUsername with: aPassword
	^validUsername = aUsername and: validPassword = aPassword. 
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:43:13' prior: 50867955 overrides: 16927572!
setUp
	validUsername := Dictionary with: (Association key:'RupertoEl+Kpo'  value:'3333'). ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:43:13' prior: 50868042!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: validUsername.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:44:05' prior: 50868145 overrides: 16927572!
setUp
	validUsername _ 'RupertoEl+Kpo' . 
	validPassword _ '3333'. ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:44:22' prior: 50868152!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:44:26' prior: 50868123!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: 'RupertoEl+Kpo' withPassword: '3333'. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 23:44:43'!
FAILURE!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/17/2021 23:44:43'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 23:44:43'!
FAILURE!
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/17/2021 23:45:29' prior: 50868083!
createCartForUser: aUsername withPassword: aPassword 
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription] . 
	
	^'1'
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/17/2021 23:45:31'!
PASSED!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/17/2021 23:46:06'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword storeFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:46:04' prior: 50868169 overrides: 16927572!
setUp
	validUsername _ 'RupertoEl+Kpo' . 
	validPassword _ '3333'. 
	
	storeFactory _ StoreTestObjectsFactory new.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:47:05'!
test03CanCreateMultipleCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: 'RupertoEl+Kpo' withPassword: '3333'. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:47:40' prior: 50868343!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID1 := restInterface createCartForUser: 'RupertoEl+Kpo' withPassword: '3333'. 
	cartItems := restInterface listCart: cartID1.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:48:24' prior: 50868356!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID1.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:48:33' prior: 50868191!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:49:17' prior: 50868369!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:50:33' prior: 50868397!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/17/2021 23:50:36'!
FAILURE!

Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/17/2021 23:53:43'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/17/2021 23:53:52' prior: 50867935!
initializeWithAuthenticator: aUserAuthenticator
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	
	! !
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/17/2021 23:54:36' prior: 50868264!
createCartForUser: aUsername withPassword: aPassword 
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription] . 
	
	nextID := nextID +1.
	^nextID.
	! !

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/17/2021 23:55:01'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/17/2021 23:55:01'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/17/2021 23:55:01'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/17/2021 23:55:01'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 23:57:29'!
test04AddBookToCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !

(1@1) == (1@1)!

(1@1) = (1@1) !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/18/2021 00:02:12' prior: 50868484!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	restInterface add: 1 of: '1' to: cartID  .
	
	self assert: 1 equals: cartItems size.
	self assert: (1@'1') equals: cartItems first.
	! !

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:02:14'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/18/2021 00:02:33' prior: 50868505!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	restInterface add: 1 of: '1' toCart: cartID  .
	
	self assert: 1 equals: cartItems size.
	self assert: (1@'1') equals: cartItems first.
	! !

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:02:37'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/18/2021 00:02:49'!
add: aSmallInteger of: aString toCart: aSmallInteger3 
	self shouldBeImplemented.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/18/2021 00:03:43' prior: 50868542!
add: aQuantity of: aBookISBN toCart: aCartID
	 
	! !

Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/18/2021 00:05:53'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/18/2021 00:06:12' prior: 50868453!
initializeWithAuthenticator: aUserAuthenticator
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	
	! !
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/18/2021 00:08:29' prior: 50868460!
createCartForUser: aUsername withPassword: aPassword 
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription] . 
	
	nextID := nextID +1.
	activeCarts at: nextID put: Cart new.
	
	^nextID.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/18/2021 00:08:37' prior: 50868336 overrides: 16927572!
setUp
	validUsername _ 'RupertoEl+Kpo' . 
	validPassword _ '3333'. 
	! !

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/18/2021 00:08:42'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/18/2021 00:10:48' prior: 50868574!
createCartForUser: aUsername withPassword: aPassword 
	| storeFactory |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription] . 
	storeFactory _ StoreTestObjectsFactory new.
	
	nextID := nextID +1.
	activeCarts at: nextID put: (Cart acceptingItemsOf: storeFactory defaultCatalog).
	
	^nextID.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/18/2021 00:10:55'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/18/2021 00:10:55'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/18/2021 00:10:55'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:10:55'!
FAILURE!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:10:55'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/18/2021 00:11:43' prior: 50868524!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	restInterface add: 1 of: 'validBook' toCart: cartID  .
	
	self assert: 1 equals: cartItems size.
	self assert: (1@'1') equals: cartItems first.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/18/2021 00:14:20' prior: 50867908!
listCart: aCartID
	| cart |
	cart _ activeCarts at: aCartID.
	
	^OrderedCollection new. 
	! !
!Cart methodsFor: 'queries' stamp: 'BAG 6/18/2021 00:16:05'!
uniqueItems
	^items! !
!Cart methodsFor: 'queries' stamp: 'BAG 6/18/2021 00:18:30' prior: 50868659!
uniqueItems
	^OrderedCollection withAll: (Set withAll: items).! !

!methodRemoval: Cart #uniqueItems stamp: 'BAG 6/18/2021 00:21:37'!
uniqueItems
	^OrderedCollection withAll: (Set withAll: items).!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/18/2021 00:22:18' prior: 50868654!
listCart: aCartID
	| cart |
	cart _ activeCarts at: aCartID.
	
	
	^OrderedCollection new. 
	! !

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/18/2021 00:22:42'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/18/2021 00:22:41' prior: 50868566!
initializeWithAuthenticator: aUserAuthenticator
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	catalog := StoreTestObjectsFactory new defaultCatalog. 
	
	! !
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/18/2021 00:22:52' prior: 50868606!
createCartForUser: aUsername withPassword: aPassword 
	| storeFactory |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription] . 
	storeFactory _ StoreTestObjectsFactory new.
	
	nextID := nextID +1.
	activeCarts at: nextID put: (Cart acceptingItemsOf: catalog).
	
	^nextID.
	! !
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/18/2021 00:23:01' prior: 50868697!
createCartForUser: aUsername withPassword: aPassword 
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription] . 
	
	nextID := nextID +1.
	activeCarts at: nextID put: (Cart acceptingItemsOf: catalog).
	
	^nextID.
	! !

dict _ Dictionary with: (Association key: 1 value: 'pepe').!

dict do:[:elem | elem].!

dict do:[:elem | elem].!

dict do:[:elem | elem].!

dict := Dictionary with: (Association key: 1 value:'pepe' ).!

dict keys.!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/18/2021 00:31:05' prior: 50868672!
listCart: aCartID
	| cart listCart |
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID.
	
	catalog keys do:[ :book | 	
		| quantity |
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[listCart add: (book@quantity)].
		].
	
	^listCart.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/18/2021 00:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/18/2021 00:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/18/2021 00:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:31:09'!
FAILURE!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:31:09'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/18/2021 00:31:43' prior: 50868638!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	restInterface add: 1 of: 'validBook' toCart: cartID  .
	
	self assert: 1 equals: cartItems size.
	self assert: ('validBook'@1) equals: cartItems first.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/18/2021 00:32:11' prior: 50868760!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 1 equals: cartItems size.
	self assert: ('validBook'@1) equals: cartItems first.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/18/2021 00:33:10' prior: 50868548!
add: aQuantity of: aBookISBN toCart: aCartID
	(activeCarts at: aCartID ) add: aQuantity of: aBookISBN. 
	 
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/18/2021 00:33:15'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/18/2021 00:33:15'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/18/2021 00:33:15'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:33:15'!
ERROR!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:33:15'!
ERROR!

book@quantity!

(1@'')!

(1@'pepe') !

pepe := OrderedCollection with: (1@'pepe').!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:35:38'!
ERROR!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:35:38'!
ERROR!

catalog keys!

listCart add: (book@quantity)!

list := OrderedCollection new.!

pepe := 'pepe'.!

quantity := 1.!

list add: (pepe@quantity).!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/18/2021 00:38:36' prior: 50868732!
listCart: aCartID
	| cart listCart |
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID.
	
	catalog keys do:[ :book | 	
		| quantity pair |
		quantity := cart occurrencesOf: book.
		pair := (book@quantity).
		quantity > 0 ifTrue:[listCart add: pair ].
		].
	
	^listCart.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/18/2021 00:38:38'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/18/2021 00:38:38'!
ERROR!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/18/2021 00:38:38'!
ERROR!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:38:38'!
ERROR!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/18/2021 00:38:43'!
ERROR!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/18/2021 00:39:05'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/18/2021 00:39:05'!
ERROR!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/18/2021 00:39:05'!
ERROR!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:39:05'!
ERROR!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/18/2021 00:39:07'!
ERROR!

----SNAPSHOT----(18 June 2021 00:39:26) CuisUniversity-4532.image priorSource: 17136796!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/18/2021 00:40:02' prior: 50868827!
listCart: aCartID
	| cart listCart |
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID.
	
	catalog keys do:[ :book | 	
		| quantity pair |
		quantity := cart occurrencesOf: book.
		pair := (Association key: book value: quantity ).
		quantity > 0 ifTrue:[listCart add: pair ].
		].
	
	^listCart.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/18/2021 00:40:03'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/18/2021 00:40:03'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/18/2021 00:40:03'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:40:03'!
ERROR!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:40:03'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/18/2021 00:40:25' prior: 50868776!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 1 equals: cartItems size.
	self assert: (Association key:'validBook' value: 1) equals: cartItems first.
	! !

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:40:26'!
PASSED!

'pepe'@1!

1@'pepe'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:41:14'!
PASSED!

	('')@1!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/18/2021 00:41:41' prior: 50868875!
listCart: aCartID
	| cart listCart |
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID.
	
	catalog keys do:[ :book | 	
		| quantity pair |
		quantity := cart occurrencesOf: book.
		pair := (Association key: book value: quantity ).
		quantity > 0 ifTrue:[listCart add: pair ].
		].

	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/18/2021 00:41:43'!
PASSED!

----SNAPSHOT----(18 June 2021 00:41:47) CuisUniversity-4532.image priorSource: 17191065!

----STARTUP---- (19 June 2021 10:42:40) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 10:49:40' prior: 50868983!
listCart: aCartID
	| cart listCart |
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID.
	
	catalog keys do:[ :book | 	
		| quantity |
		
		listCart add: book.
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[listCart add: quantity ].
		].

	^listCart.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 10:50:18' prior: 50868904!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 1 equals: cartItems size.
	self assert: 'validBook' equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 10:50:20'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 10:50:28' prior: 50869075!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: 'validBook' equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 10:50:29'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 10:50:29'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 10:50:29'!
FAILURE!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 10:50:29'!
FAILURE!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 10:50:29'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 10:50:40'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 10:52:02' prior: 50869062!
listCart: aCartID
	| cart listCart |
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID.
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book.
			listCart add: quantity 
			].
		].

	^listCart.
	! !

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 10:52:03'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 10:52:06'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 10:52:06'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 10:52:06'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 10:52:06'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 10:54:17'!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: 'validBook' equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'BAG 6/19/2021 10:55:54' prior: 50867753!
defaultCatalog
	
	^ Dictionary 
		with:	(Association key: self itemSellByTheStore value: self itemSellByTheStorePrice);
		with:	(Association key: self itemSellByTheStore value: self itemSellByTheStorePrice);
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'BAG 6/19/2021 10:56:15'!
anotherItemSellByTheStore
	
	^ 'validBook2'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'BAG 6/19/2021 10:56:22' prior: 50867740!
itemSellByTheStore
	
	^ 'validBook1'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'BAG 6/19/2021 10:56:38'!
anotherItemSellByTheStorePrice
	
	^20! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 10:57:42' prior: 50869162!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook1' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: 'validBook1' equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/19/2021 10:59:59' prior: 50868687!
initializeWithAuthenticator: aUserAuthenticator
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	
	! !
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/19/2021 11:01:09'!
initializeWithAuthenticator: aUserAuthenticator andCatalog: aCatalog 
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	
	! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:01:09' prior: 50867941!
withAuthenticator: aUserAuthenticator
	^self new initializeWithAuthenticator: aUserAuthenticator andCatalog: 'pepe'. ! !

!methodRemoval: RestInterface #initializeWithAuthenticator: stamp: 'BAG 6/19/2021 11:01:09'!
initializeWithAuthenticator: aUserAuthenticator
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	
	!
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/19/2021 11:01:23' prior: 50869229!
initializeWithAuthenticator: aUserAuthenticator andCatalog: aCatalog 
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	catalog := aCatalog. 
	
	! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:01:59'!
withAuthenticator: aUserAuthenticator andCatalog: aCatalog 
	^self new initializeWithAuthenticator: aUserAuthenticator andCatalog: 'pepe'. ! !

!methodRemoval: RestInterface class #withAuthenticator: stamp: 'BAG 6/19/2021 11:01:59'!
withAuthenticator: aUserAuthenticator
	^self new initializeWithAuthenticator: aUserAuthenticator andCatalog: 'pepe'. !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:02:07' prior: 50869262!
withAuthenticator: aUserAuthenticator andCatalog: aCatalog 
	^self new initializeWithAuthenticator: aUserAuthenticator andCatalog: aCatalog. ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:05:50' prior: 50868175!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: 9.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/19/2021 11:06:08'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword storeFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:06:07' prior: 50868587 overrides: 16927572!
setUp
	validUsername _ 'RupertoEl+Kpo' . 
	validPassword _ '3333'. 
	storeFactory _ StoreTestObjectsFactory new.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:07:26' prior: 50869285!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:07:32' prior: 50868383!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:07:38' prior: 50868417!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:08:03' prior: 50869096!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: 'validBook' equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:08:09' prior: 50869204!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook1' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: 'validBook1' equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:10:12' prior: 50869390!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook1' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 2 equals: cartItems size.
	self assert: 'validBook1' equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:11:11' prior: 50869409!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook1' toCart: cartID  .
	restInterface add: 1 of: 'validBook2' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 2 equals: cartItems size.
	self assert: 'validBook1' equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:12:21' prior: 50869428!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook1' toCart: cartID  .
	restInterface add: 1 of: 'validBook2' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: 'validBook1' equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: 'validBook2' equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 11:12:41'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'BAG 6/19/2021 11:13:31' prior: 50869180!
defaultCatalog
	
	^ Dictionary 
		with:	(Association key: self itemSellByTheStore value: self itemSellByTheStorePrice);
		with:	(Association key: self anotherItemSellByTheStore value: self anotherItemSellByTheStorePrice);
		yourself ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 11:13:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 11:13:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 11:13:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 11:13:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 11:13:33'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 11:13:33'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 11:13:50'!
ERROR!

Dictionary 
		with:	(Association key: self itemSellByTheStore value: self itemSellByTheStorePrice);
		with:	(Association key: self anotherItemSellByTheStore value: self anotherItemSellByTheStorePrice);
		yourself !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 11:14:36'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 11:14:39'!
ERROR!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 11:14:39'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'BAG 6/19/2021 11:15:35' prior: 50869476!
defaultCatalog
	
	^ Dictionary 
		with:	(Association key: self itemSellByTheStore value: self itemSellByTheStorePrice)
		with:	(Association key: self anotherItemSellByTheStore value: self anotherItemSellByTheStorePrice) ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 11:15:39'!
ERROR!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 11:15:39'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 11:15:39'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:16:00' prior: 50869371!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: 'validBook1' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: 'validBook1' equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 11:16:01'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:16:34' prior: 50869643!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:17:35' prior: 50869449!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	restInterface add: 1 of: 'validBook2' toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: 'validBook1' equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: 'validBook2' equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:18:07' prior: 50869685!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 11:18:09'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:34:28'!
test06CanNotAddBookToInvalidCart
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: 'pepe']  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText = RestInterface cartDoesNotExistErrorDescription.
		].
	! !

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 11:34:32'!
ERROR!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 11:34:32'!
ERROR!
!RestInterface class methodsFor: 'error descriptions' stamp: 'BAG 6/19/2021 11:34:51'!
cartDoesNotExistErrorDescription
	self shouldBeImplemented.! !
!RestInterface class methodsFor: 'error descriptions' stamp: 'BAG 6/19/2021 11:35:21' prior: 50869826!
cartDoesNotExistErrorDescription
	^'El ID ingresado no está asociado a ningún carrito existente'.! !

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 11:35:23'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:36:33' prior: 50869804!
test06CanNotAddBookToInvalidCart
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: 'pepe']  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 11:36:35'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 11:38:20' prior: 50868792!
add: aQuantity of: aBookISBN toCart: aCartID
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 11:39:03'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:41:32'!
test07CanNotListInvalidCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:42:46' prior: 50869936!
test07CanNotListInvalidCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: 'pepe']  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:43:20' prior: 50869957!
test07CanNotListInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:49:16' prior: 50869981!
test07CanNotListInvalidCart
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	
	self should: [restInterface listCart: 5]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!testRun: #RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 11:49:20'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 11:51:41' prior: 50869133!
listCart: aCartID
	| cart listCart |
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book.
			listCart add: quantity 
			].
		].

	^listCart.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 11:52:04'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 11:52:04'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 11:52:04'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 11:52:04'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 11:52:04'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 11:52:04'!
PASSED!

!testRun: #RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 11:52:04'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:52:26' prior: 50869842!
test06CanNotAddBookToInvalidCart
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: 5]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!

!testRun: #RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 11:52:28'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:55:14' prior: 50869310 overrides: 16927572!
setUp
	validUsername _ 'RupertoEl+Kpo' . 
	validPassword _ '3333'. 
	storeFactory _ StoreTestObjectsFactory new.
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/19/2021 11:55:27'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword storeFactory time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:55:24' prior: 50870146 overrides: 16927572!
setUp
	validUsername _ 'RupertoEl+Kpo' . 
	validPassword _ '3333'. 
	storeFactory _ StoreTestObjectsFactory new.
	time _ 0.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:55:50'!
actualTime
	^time. 
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:56:28'!
timeElapsedSince: aTimeStamp
	^time - aTimeStamp. 
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:58:19' prior: 50870058!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self andCatalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/19/2021 11:58:35'!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog 
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	catalog := aCatalog. 
	
	! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:58:35' prior: 50869277!
withAuthenticator: aUserAuthenticator andCatalog: aCatalog 
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog. ! !

!methodRemoval: RestInterface #initializeWithAuthenticator:andCatalog: stamp: 'BAG 6/19/2021 11:58:35'!
initializeWithAuthenticator: aUserAuthenticator andCatalog: aCatalog 
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	catalog := aCatalog. 
	
	!
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:58:53'!
withAuthenticator: aUserAuthenticator catalog: aCatalog 
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog. ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:58:53' prior: 50870002!
test07CanNotListInvalidCart
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog.
	
	self should: [restInterface listCart: 5]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:58:53' prior: 50869317!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:58:53' prior: 50869713!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:58:53' prior: 50870179!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:58:53' prior: 50869349!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:58:53' prior: 50869334!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 11:58:53' prior: 50869665!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !

!methodRemoval: RestInterface class #withAuthenticator:andCatalog: stamp: 'BAG 6/19/2021 11:58:53'!
withAuthenticator: aUserAuthenticator andCatalog: aCatalog 
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog. !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:00:53'!
withAuthenticator: aUserAuthenticator catalog: aCatalog timer: aTime  
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog. ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:00:53' prior: 50870291!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog timer: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:00:53' prior: 50870265!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog timer: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:00:53' prior: 50870333!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog timer: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:00:53' prior: 50870311!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog timer: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:00:53' prior: 50870248!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog timer: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:00:53' prior: 50870348!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog timer: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:00:53' prior: 50870233!
test07CanNotListInvalidCart
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog timer: self.
	
	self should: [restInterface listCart: 5]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!methodRemoval: RestInterface class #withAuthenticator:catalog: stamp: 'BAG 6/19/2021 12:00:53'!
withAuthenticator: aUserAuthenticator catalog: aCatalog 
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog. !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:02:06'!
withAuthenticator: aUserAuthenticator catalog: aCatalog clock: aTime  
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog. ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:02:06' prior: 50870430!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:02:06' prior: 50870445!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:02:06' prior: 50870403!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:02:06' prior: 50870383!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:02:06' prior: 50870484!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:02:06' prior: 50870505!
test07CanNotListInvalidCart
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	
	self should: [restInterface listCart: 5]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:02:06' prior: 50870467!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !

!methodRemoval: RestInterface class #withAuthenticator:catalog:timer: stamp: 'BAG 6/19/2021 12:02:06'!
withAuthenticator: aUserAuthenticator catalog: aCatalog timer: aTime  
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog. !
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/19/2021 12:02:39'!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock  
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	catalog := aCatalog. 
	
	! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:02:39' prior: 50870527!
withAuthenticator: aUserAuthenticator catalog: aCatalog clock: aTime  
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: self. ! !

!methodRemoval: RestInterface #initializeWithAuthenticator:catalog: stamp: 'BAG 6/19/2021 12:02:39'!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog 
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	catalog := aCatalog. 
	
	!
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:02:54' prior: 50870689!
withAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock  
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock. ! !

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/19/2021 12:03:58'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/19/2021 12:03:56' prior: 50870679!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock  
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	catalog := aCatalog. 
	clock := aClock.
	
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/19/2021 12:04:15'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword storeFactory clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:04:15' prior: 50870163 overrides: 16927572!
setUp
	validUsername _ 'RupertoEl+Kpo' . 
	validPassword _ '3333'. 
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:04:15' prior: 50870174!
timeElapsedSince: aTimeStamp
	^clock - aTimeStamp. 
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:04:15' prior: 50870170!
actualTime
	^clock. 
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:05:17' prior: 50870599!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: clock.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	clock cheCarlitosFijateQuePasoUnaHora
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:09:47' prior: 50870761!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: clock.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceTimeBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:09:51'!
ERROR!
!RestInterfaceTest methodsFor: 'mocking' stamp: 'BAG 6/19/2021 12:10:05'!
advanceTimeBy: aSmallInteger 
	self shouldBeImplemented.! !

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:10:43'!
ERROR!
!RestInterfaceTest methodsFor: 'mocking' stamp: 'BAG 6/19/2021 12:11:33'!
minutesElapsedSince: aTimeStamp
	^clock - aTimeStamp. 
	! !

!methodRemoval: RestInterfaceTest #timeElapsedSince: stamp: 'BAG 6/19/2021 12:11:33'!
timeElapsedSince: aTimeStamp
	^clock - aTimeStamp. 
	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:14:33' prior: 50870782!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceTimeBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:14:35'!
ERROR!
!RestInterfaceTest methodsFor: 'mocking' stamp: 'BAG 6/19/2021 12:15:33' prior: 50870805!
advanceTimeBy: aTimeSpan 
	clock _ clock + aTimeSpan .! !
!RestInterfaceTest methodsFor: 'mocking' stamp: 'BAG 6/19/2021 12:15:52'!
advanceMinutesBy: aTimeSpan 
	clock _ clock + aTimeSpan .! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:15:52' prior: 50870823!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!methodRemoval: RestInterfaceTest #advanceTimeBy: stamp: 'BAG 6/19/2021 12:15:52'!
advanceTimeBy: aTimeSpan 
	clock _ clock + aTimeSpan .!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:16:11'!
FAILURE!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:16:11'!
FAILURE!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/19/2021 12:18:28'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/19/2021 12:18:26' prior: 50870724!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock  
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	lastTimeUsed := Dictionary new.
	catalog := aCatalog. 
	clock := aClock.
	
	! !
!RestInterface methodsFor: 'cart creation' stamp: 'BAG 6/19/2021 12:19:31' prior: 50868712!
createCartForUser: aUsername withPassword: aPassword 
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription] . 
	
	nextID := nextID +1.
	activeCarts at: nextID put: (Cart acceptingItemsOf: catalog).
	lastTimeUsed at: nextID put: clock actualTime.
	
	^nextID.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 12:25:37' prior: 50869862!
add: aQuantity of: aBookISBN toCart: aCartID
	(clock minutesElapsedSince: (lastTimeUsed at: aCartID)) > 30 ifTrue: [ activeCarts removeKey: aCartID]. 
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 12:25:45'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 12:25:45'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 12:25:45'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 12:25:45'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 12:25:45'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:25:45'!
PASSED!

!testRun: #RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 12:25:45'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 12:28:22' prior: 50870923!
add: aQuantity of: aBookISBN toCart: aCartID
	(clock minutesElapsedSince: (lastTimeUsed at: aCartID)) > 30 ifTrue: [ 
		lastTimeUsed removeKey: aCartID.
		activeCarts removeKey: aCartID
		]. 
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 12:28:24'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 12:28:24'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 12:28:24'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 12:28:24'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 12:28:24'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:28:24'!
PASSED!

!testRun: #RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 12:28:24'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:30:58' prior: 50870858!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].

	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:31:05'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:32:05' prior: 50870994!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].

	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:32:26' prior: 50871026!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 12:34:06' prior: 50870958!
add: aQuantity of: aBookISBN toCart: aCartID
	(clock minutesElapsedSince: (lastTimeUsed at: aCartID)) > 30 ifTrue: [ 
		lastTimeUsed removeKey: aCartID.
		activeCarts removeKey: aCartID
		]. 
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:34:06'!
FAILURE!

!testRun: #RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 12:34:06'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:34:06'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 12:39:52' prior: 50871084!
add: aQuantity of: aBookISBN toCart: aCartID
	lastTimeUsed at:  aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		lastTimeUsed removeKey: aCartID.
		activeCarts removeKey: aCartID
	]] 
	ifAbsent: [
		self error: self class cartDoesNotExistErrorDescription
		]. 
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!

!testRun: #RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 12:39:54'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 12:40:08' prior: 50871169!
add: aQuantity of: aBookISBN toCart: aCartID
	lastTimeUsed at:  aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		lastTimeUsed removeKey: aCartID.
		activeCarts removeKey: aCartID
		]] 
	ifAbsent: [
		self error: self class cartDoesNotExistErrorDescription
		]. 
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:41:04' prior: 50870640!
test07CanNotListInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!testRun: #RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 12:41:31'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 12:42:10' prior: 50870020!
listCart: aCartID
	| cart listCart |
	
	lastTimeUsed at:  aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		lastTimeUsed removeKey: aCartID.
		activeCarts removeKey: aCartID
		]] 
	ifAbsent: [
		self error: self class cartDoesNotExistErrorDescription
		]. 
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book.
			listCart add: quantity 
			].
		].

	^listCart.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 12:42:12'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 12:42:12'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 12:42:12'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 12:42:12'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 12:42:12'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:42:12'!
PASSED!

!testRun: #RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 12:42:12'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 12:43:40'!
assertCartExists: aCartID

	^ lastTimeUsed at:  aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		lastTimeUsed removeKey: aCartID.
		activeCarts removeKey: aCartID
		]] 
	ifAbsent: [
		self error: self class cartDoesNotExistErrorDescription
		]! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 12:43:40' prior: 50871293!
listCart: aCartID
	| cart listCart |
	
	self assertCartExists: aCartID. 
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book.
			listCart add: quantity 
			].
		].

	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 12:44:10' prior: 50871254!
add: aQuantity of: aBookISBN toCart: aCartID
	self assertCartExists: aCartID. 
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:45:47' prior: 50871055!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20. 
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:45:49'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 12:45:49'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 12:45:49'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 12:45:49'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 12:45:49'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 12:45:49'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 12:45:49'!
PASSED!

!testRun: #RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 12:45:49'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:46:24' prior: 50871376!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:55:27'!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:55:36'!
test08CanNotListInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!methodRemoval: RestInterfaceTest #test07CanNotListInvalidCart stamp: 'BAG 6/19/2021 12:55:36'!
test07CanNotListInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 12:55:54'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:56:08' prior: 50871446!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID 
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 12:57:17' prior: 50871511!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:20:49' prior: 50871529!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:20:51'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:21:39' prior: 50871366!
add: aQuantity of: aBookISBN toCart: aCartID
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:22:46'!
refreshLastTimeUsed: aCartID
	lastTimeUsed at: aCartID put: clock actualTime.
	 
	! !

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:22:53'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:23:31'!
removeIfCartExpired: aCartID
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:23:49' prior: 50871338!
assertCartExists: aCartID

	lastTimeUsed at:  aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		lastTimeUsed removeKey: aCartID.
		activeCarts removeKey: aCartID
		]] 
	ifAbsent: [
		self error: self class cartDoesNotExistErrorDescription
		]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListInvalidCart stamp: 'BAG 6/19/2021 13:23:51'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:24:08' prior: 50871602!
removeIfCartExpired: aCartID
	lastTimeUsed at:  aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		lastTimeUsed removeKey: aCartID.
		activeCarts removeKey: aCartID
		]] 

	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:24:19' prior: 50871606!
assertCartExists: aCartID

	lastTimeUsed at:  aCartID 
	ifAbsent: [
		self error: self class cartDoesNotExistErrorDescription
		]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:24:22'!
FAILURE!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:24:22'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListInvalidCart stamp: 'BAG 6/19/2021 13:24:22'!
FAILURE!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:24:25'!
FAILURE!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:24:48'!
FAILURE!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:25:11'!
FAILURE!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:25:40'!
FAILURE!

self value!

self value: Error!

restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:28:32'!
FAILURE!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:28:32'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:29:29' prior: 50871582!
add: aQuantity of: aBookISBN toCart: aCartID
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:29:36'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:29:52' prior: 50871802!
add: aQuantity of: aBookISBN toCart: aCartID
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:29:58' prior: 50871350!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book.
			listCart add: quantity 
			].
		].

	^listCart.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 13:30:03'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 13:30:03'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 13:30:03'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 13:30:03'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 13:30:03'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:30:03'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:30:03'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListInvalidCart stamp: 'BAG 6/19/2021 13:30:03'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:31:40'!
test06CanNotAddBookToAnExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !

!methodRemoval: RestInterfaceTest #test06CanNotAddBookToInvalidCart stamp: 'BAG 6/19/2021 13:31:40'!
test06CanNotAddBookToInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:32:15'!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !

!methodRemoval: RestInterfaceTest #test08CanNotListInvalidCart stamp: 'BAG 6/19/2021 13:32:15'!
test08CanNotListInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:32:20'!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !

!methodRemoval: RestInterfaceTest #test06CanNotAddBookToAnExpiredCart stamp: 'BAG 6/19/2021 13:32:20'!
test06CanNotAddBookToAnExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:34:46' prior: 50871554!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
		 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/19/2021 13:34:46'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:34:58' prior: 50871829!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book.
			listCart add: quantity 
			].
		].

	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:34:59'!
ERROR!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/19/2021 13:34:59'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:34:59'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:35:07' prior: 50872091!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book.
			listCart add: quantity 
			].
		].

	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/19/2021 13:35:08'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:20:49' prior: 50871993!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:36:54'!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:37:35' prior: 50872298!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/19/2021 13:37:37'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 13:37:37'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 13:37:37'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 13:37:37'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 13:37:37'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 13:37:37'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/19/2021 13:37:37'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:37:37'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/19/2021 13:37:37'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/19/2021 13:37:37'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:37:51' prior: 50872183!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book.
			listCart add: quantity 
			].
		].

	^listCart.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 13:37:52'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 13:37:52'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 13:37:52'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 13:37:52'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 13:37:52'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/19/2021 13:37:52'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:37:52'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/19/2021 13:37:52'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/19/2021 13:37:52'!
ERROR!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/19/2021 13:37:52'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/19/2021 13:37:58' prior: 50872379!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book.
			listCart add: quantity 
			].
		].

	^listCart.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/19/2021 13:37:59'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/19/2021 13:37:59'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/19/2021 13:37:59'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/19/2021 13:37:59'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/19/2021 13:37:59'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/19/2021 13:37:59'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/19/2021 13:37:59'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/19/2021 13:37:59'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/19/2021 13:37:59'!
PASSED!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/19/2021 13:39:11'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:39:11' prior: 50871690!
removeIfCartExpired: aCartID
	lastTimeUsedForCart at:  aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		lastTimeUsedForCart removeKey: aCartID.
		activeCarts removeKey: aCartID
		]] 

	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:39:11' prior: 50871593!
refreshLastTimeUsed: aCartID
	lastTimeUsedForCart at: aCartID put: clock actualTime.
	 
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:39:11' prior: 50870898!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock  
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	lastTimeUsedForCart := Dictionary new.
	catalog := aCatalog. 
	clock := aClock.
	
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:39:11' prior: 50871700!
assertCartExists: aCartID

	lastTimeUsedForCart at:  aCartID 
	ifAbsent: [
		self error: self class cartDoesNotExistErrorDescription
		]! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'BAG 6/19/2021 13:39:11' prior: 50870909!
createCartForUser: aUsername withPassword: aPassword 
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class canNotCreateCartWithInvalidCredentialsErrorDescription] . 
	
	nextID := nextID +1.
	activeCarts at: nextID put: (Cart acceptingItemsOf: catalog).
	lastTimeUsedForCart at: nextID put: clock actualTime.
	
	^nextID.
	! !

----SNAPSHOT----(19 June 2021 13:46:46) CuisUniversity-4532.image priorSource: 17196908!

----QUIT----(19 June 2021 13:46:52) CuisUniversity-4532.image priorSource: 17308300!

----STARTUP---- (21 June 2021 17:15:26) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 17:37:57'!
test10CheckoutEmptyCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 17:44:38'!
test10CheckoutCartWithOneItem
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	
	
	cartItems := restInterface listCart: cartID.
	
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !

!methodRemoval: RestInterfaceTest #test10CheckoutEmptyCart stamp: 'BAG 6/21/2021 17:44:42'!
test10CheckoutEmptyCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 17:44:50' prior: 50872562!
test10CheckoutCartWithOneItem
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	
	cartItems := restInterface listCart: cartID.
	
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/21/2021 17:47:19'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword storeFactory clock creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 17:47:17' prior: 50872598!
test10CheckoutCartWithOneItem
	| restInterface cartID cartItems date ownerName |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	
	restInterface checkOut: cartID creditCard: creditCardNumber expiredOn: date owner: ownerName.
	cartItems := restInterface listCart: cartID.
	
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword storeFactory clock '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/21/2021 17:47:44'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword storeFactory clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 17:49:17' prior: 50872628!
test10CheckoutCartWithOneItem
	| restInterface cartID cartItems date ownerName creditCardNumber |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID creditCard: creditCardNumber expiredOn: date owner: ownerName.
	cartItems := restInterface listCart: cartID.
	
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:00:18' prior: 50872666!
test10CheckoutCartWithOneItem
	| restInterface cartID cartItems ownerName creditCardNumber expirationMonth expirationYear |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName.
	cartItems := restInterface listCart: cartID.
	
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:03:10' prior: 50872691!
test10CheckoutCartWithOneItem
	| restInterface cartID cartItems ownerName creditCardNumber expirationMonth expirationYear transactionID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	transactionID := restInterface checkOut: cartID 
			    creditCard: creditCardNumber 
			    expiredOnMonth: expirationMonth 
			    andYear: expirationYear  
			    owner: ownerName.
			
	cartItems := restInterface listCart: cartID.
	
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:08:08' prior: 50872718!
test10CheckoutCartWithOneItem
	| restInterface cartID ownerName creditCardNumber expirationMonth expirationYear transactionID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	transactionID := restInterface checkOut: cartID 
			    creditCard: creditCardNumber 
			    expiredOnMonth: expirationMonth 
			    andYear: expirationYear  
			    owner: ownerName.
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:11:16'!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	! !
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/21/2021 18:13:10'!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock through: aMerchantProcessor   
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	lastTimeUsedForCart := Dictionary new.
	catalog := aCatalog. 
	clock := aClock.
	
	! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:13:10' prior: 50870707!
withAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock  
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock through: MerchantProcessor new. ! !

!methodRemoval: RestInterface #initializeWithAuthenticator:catalog:clock: stamp: 'BAG 6/21/2021 18:13:10'!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock  
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	lastTimeUsedForCart := Dictionary new.
	catalog := aCatalog. 
	clock := aClock.
	
	!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/21/2021 18:13:31'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/21/2021 18:13:29' prior: 50872787!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock through: aMerchantProcessor   
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	lastTimeUsedForCart := Dictionary new.
	catalog := aCatalog. 
	clock := aClock.
	merchantProcessor := aMerchantProcessor. 
	
	! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07'!
withAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock merchantProcessor: aMerchantProcessor   
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock through: MerchantProcessor new. ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07' prior: 50870655!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: MerchantProcessor new.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07' prior: 50870535!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: MerchantProcessor new.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07' prior: 50871952!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: MerchantProcessor new.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07' prior: 50870572!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: MerchantProcessor new.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07' prior: 50871914!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: MerchantProcessor new.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07' prior: 50872323!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: MerchantProcessor new.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07' prior: 50872747!
test10CheckoutCartWithOneItem
	| restInterface cartID ownerName creditCardNumber expirationMonth expirationYear transactionID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: MerchantProcessor new.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	transactionID := restInterface checkOut: cartID 
			    creditCard: creditCardNumber 
			    expiredOnMonth: expirationMonth 
			    andYear: expirationYear  
			    owner: ownerName.
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07' prior: 50870619!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: MerchantProcessor new.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07' prior: 50870550!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: MerchantProcessor new.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:07' prior: 50872273!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: MerchantProcessor new.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !

!methodRemoval: RestInterface class #withAuthenticator:catalog:clock: stamp: 'BAG 6/21/2021 18:15:07'!
withAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock  
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock through: MerchantProcessor new. !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:27' prior: 50872845!
withAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock merchantProcessor: aMerchantProcessor   
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock through: aMerchantProcessor. ! !
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/21/2021 18:15:40'!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock merchantProcessor: aMerchantProcessor   
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	lastTimeUsedForCart := Dictionary new.
	catalog := aCatalog. 
	clock := aClock.
	merchantProcessor := aMerchantProcessor. 
	
	! !
!RestInterface class methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 18:15:40' prior: 50873102!
withAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock merchantProcessor: aMerchantProcessor   
	^self new initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock merchantProcessor: aMerchantProcessor. ! !

!methodRemoval: RestInterface #initializeWithAuthenticator:catalog:clock:through: stamp: 'BAG 6/21/2021 18:15:40'!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock through: aMerchantProcessor   
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	lastTimeUsedForCart := Dictionary new.
	catalog := aCatalog. 
	clock := aClock.
	merchantProcessor := aMerchantProcessor. 
	
	!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:15:52' prior: 50872856!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:16:04' prior: 50872874!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:16:13' prior: 50873043!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:16:19' prior: 50873021!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:16:24' prior: 50872912!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:16:29' prior: 50872890!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:16:35' prior: 50873066!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:16:42' prior: 50872940!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:16:49' prior: 50872961!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:16:56' prior: 50872986!
test10CheckoutCartWithOneItem
	| restInterface cartID ownerName creditCardNumber expirationMonth expirationYear transactionID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	transactionID := restInterface checkOut: cartID 
			    creditCard: creditCardNumber 
			    expiredOnMonth: expirationMonth 
			    andYear: expirationYear  
			    owner: ownerName.
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:19:51'!
listPurchases: validUsername password: validPassword
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:24:52' prior: 50872780!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook |
	
	salesBook := OrderedCollection new.
	Cashier toCheckout: cartID charging: creditCardNumber  throught: merchantProcessor on: self  registeringOn: salesBook.
	! !

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/21/2021 18:25:07'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart merchantProcessor cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:25:05' prior: 50873383!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook |
	
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: cartID charging: creditCardNumber  throught: merchantProcessor on: self  registeringOn: salesBook.
	! !

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/21/2021 18:34:53'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart merchantProcessor cashier purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:34:50' prior: 50873405!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total |
	
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: cartID charging: creditCardNumber  throught: merchantProcessor on: self  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases := self listCart: cartID.
	purchases add: total.
	
	^1
	! !

Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart merchantProcessor purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/21/2021 18:35:12'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart merchantProcessor purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:35:21' prior: 50873428!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier |
	
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: cartID charging: creditCardNumber  throught: merchantProcessor on: self  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases := self listCart: cartID.
	purchases add: total.
	
	^1
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:36:07' prior: 50873461!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier |
	
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: cartID charging: creditCardNumber  throught: merchantProcessor on: self  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases := self listCart: cartID.
	purchases add: total.
	
	^1
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:36:20' prior: 50873378!
listPurchases: validUsername password: validPassword
	^purchases.! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:36:27'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:36:27'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:37:13' prior: 50873477!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier |
	
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: creditCardNumber  throught: merchantProcessor on: self  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases := self listCart: cartID.
	purchases add: total.
	
	^1
	! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:37:15'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:39:21' prior: 50873505!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear).
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: creditCardNumber throught: merchantProcessor on: self  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases := self listCart: cartID.
	purchases add: total.
	
	^1
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:39:30' prior: 50873525!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear).
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: self  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases := self listCart: cartID.
	purchases add: total.
	
	^1
	! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:39:34'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 18:40:35' prior: 50873345!
test10CheckoutCartWithOneItem
	| restInterface cartID transactionID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	transactionID := restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: 'pepe'.
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:40:50'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:40:50'!
ERROR!

Month!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:42:53' prior: 50873545!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card |
	
	card := CreditCard expiringOn: (DateAndTime month: expirationMonth year: expirationYear).
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: self  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases := self listCart: cartID.
	purchases add: total.
	
	^1
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 18:42:55'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 18:42:55'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 18:42:55'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 18:42:55'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 18:42:55'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 18:42:55'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 18:42:55'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 18:42:55'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 18:42:55'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:42:55'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:42:55'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:43:50' prior: 50873606!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card |
	
	card := CreditCard expiringOn: (DateAndTime year: expirationYear month: expirationMonth day: 1).
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: self  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases := self listCart: cartID.
	purchases add: total.
	
	^1
	! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:43:58'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:43:58'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:45:39' prior: 50873661!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear).
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: self  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases := self listCart: cartID.
	purchases add: total.
	
	^1
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 18:45:41'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 18:45:41'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 18:45:41'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 18:45:41'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 18:45:41'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 18:45:41'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 18:45:41'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 18:45:41'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 18:45:41'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:45:41'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:45:41'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:47:22'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:47:22'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 18:48:12' prior: 50873687!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear).
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases := self listCart: cartID.
	purchases add: total.
	
	^1
	! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:48:15'!
ERROR!
!RestInterfaceTest methodsFor: 'mock clock' stamp: 'BAG 6/21/2021 18:48:36'!
today
	self shouldBeImplemented.! !
!RestInterfaceTest methodsFor: 'mock clock' stamp: 'BAG 6/21/2021 18:48:48' prior: 50873770!
today
	^DateAndTime now.! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:48:50'!
ERROR!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/21/2021 18:49:15'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword storeFactory clock debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'mocking' stamp: 'BAG 6/21/2021 18:49:11'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/21/2021 18:50:10' prior: 50870744 overrides: 16927572!
setUp
	validUsername _ 'RupertoEl+Kpo' . 
	validPassword _ '3333'. 
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	debitBehavior _ [:amount : creditCard |].! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 18:50:14'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 18:50:14'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 18:50:14'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 18:50:14'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 18:50:14'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 18:50:14'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 18:50:14'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 18:50:14'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 18:50:14'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:50:14'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 18:50:48'!
PASSED!

pepe := DateAndTime now.!

pepe := pepe + pepe.!

pepe := pepe + (Duration minutes: 30).!

pepe := DateAndTime now. !

pepe := pepe + (Duration minutes: 30).!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/21/2021 18:56:19' prior: 50873798 overrides: 16927572!
setUp
	validUsername _ 'RupertoEl+Kpo' . 
	validPassword _ '3333'. 
	storeFactory _ StoreTestObjectsFactory new.
	clock _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].! !
!RestInterfaceTest methodsFor: 'mocking' stamp: 'BAG 6/21/2021 18:57:29' prior: 50870852!
advanceMinutesBy: aTimeSpan 
	clock _ clock + (Duration minutes: aTimeSpan).! !

pepe := pepe - (Duration minutes: 30). !

pepe minutes. !

pepe1 := pepe + (Duration minutes: 30).  !

pepe1 > pepe. !

pepe1 < pepe.  true !

pepe1 < pepe. !

pepe1 minute - pepe minute.!

pepe minute!

pepe secondsSinceMidnight !

pepe1 secondsSinceMidnight!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/21/2021 19:07:32'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'validUsername validPassword storeFactory clock debitBehavior clockDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/21/2021 19:07:30' prior: 50873847 overrides: 16927572!
setUp
	validUsername _ 'RupertoEl+Kpo' . 
	validPassword _ '3333'. 
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].! !
!RestInterfaceTest methodsFor: 'mocking' stamp: 'BAG 6/21/2021 19:07:47' prior: 50873856!
advanceMinutesBy: aTimeSpan 
	clock _ clock +  aTimeSpan.! !
!RestInterfaceTest methodsFor: 'mocking' stamp: 'BAG 6/21/2021 19:08:02' prior: 50873775!
today
	^clockDate.! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 19:08:35'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 19:08:35'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 19:08:35'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 19:08:35'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 19:08:35'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 19:08:35'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 19:08:35'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 19:08:35'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 19:08:35'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 19:08:35'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 19:11:14'!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 transactionID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword.
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory anotherItemSellByTheStore) toCart: cartID2.
	
	transactionID := restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	transactionID := restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 19:12:39' prior: 50873931!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 transactionID1 transactionID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword.
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory anotherItemSellByTheStore) toCart: cartID2.
	
	transactionID1 := restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	transactionID2 := restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1 
										with: storeFactory anotherItemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 19:14:17' prior: 50873974!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword.
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory anotherItemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1 
										with: storeFactory anotherItemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:14:29'!
FAILURE!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:14:38'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 19:15:05' prior: 50873748!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear).
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	
	total := cashier checkOut.
	
	purchases addAll: (self listCart: cartID).
	purchases add: total.
	
	^1
	! !
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/21/2021 19:15:27' prior: 50873112!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock merchantProcessor: aMerchantProcessor   
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	lastTimeUsedForCart := Dictionary new.
	purchases := OrderedCollection new.
	catalog := aCatalog. 
	clock := aClock.
	merchantProcessor := aMerchantProcessor. 
	
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 19:15:30'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 19:15:30'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 19:15:30'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 19:15:30'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 19:15:30'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 19:15:30'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 19:15:30'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 19:15:30'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 19:15:30'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 19:15:30'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:15:30'!
FAILURE!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:15:30'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 19:18:38' prior: 50874075!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear).
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	
	total := purchases removeLast. 
	purchases addAll: (self listCart: cartID).
	
	purchases add: cashier checkOut + total.
	
	^1
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 19:18:40'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 19:18:40'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:18:40'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 19:18:45'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 19:19:37' prior: 50874149!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear).
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	
	total := purchases isEmpty ifTrue: [0] ifFalse: [ purchases removeLast ]. 
	purchases addAll: (self listCart: cartID).
	
	purchases add: cashier checkOut + total.
	
	^1
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:19:42'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 19:25:32'!
test12CheckoutWithMultipleItems
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	restInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 19:25:35'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 19:29:56' prior: 50874022!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: validUsername withPassword: validPassword.
	cartID2 := restInterface createCartForUser: validUsername withPassword: validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:30:01'!
FAILURE!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:30:01'!
FAILURE!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:31:06'!
FAILURE!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 19:31:06'!
FAILURE!
!Sale methodsFor: 'initialization' stamp: 'BAG 6/21/2021 19:46:43'!
initializeTotal: aTotal items: items 

	total := aTotal ! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 19:46:43' prior: 50867717!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal items: self halt ! !

!methodRemoval: Sale #initializeTotal: stamp: 'BAG 6/21/2021 19:46:43'!
initializeTotal: aTotal

	total := aTotal !

!classDefinition: #Sale category: 'TusLibros' stamp: 'BAG 6/21/2021 19:48:39'!
Object subclass: #Sale
	instanceVariableNames: 'total books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'BAG 6/21/2021 19:48:38' prior: 50874446!
initializeTotal: aTotal items: anItems 

	total := aTotal. 
	books := anItems. ! !
!Sale methodsFor: 'initialization' stamp: 'BAG 6/21/2021 19:49:37'!
initializeTotal: aTotal items: anItems clientName: aClientName  

	total := aTotal. 
	books := anItems. ! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 19:49:37' prior: 50874451!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal items: self halt clientName: 'pepe' ! !

!methodRemoval: Sale #initializeTotal:items: stamp: 'BAG 6/21/2021 19:49:37'!
initializeTotal: aTotal items: anItems 

	total := aTotal. 
	books := anItems. !

!classDefinition: #Sale category: 'TusLibros' stamp: 'BAG 6/21/2021 19:49:49'!
Object subclass: #Sale
	instanceVariableNames: 'total books clientName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'BAG 6/21/2021 19:49:48' prior: 50874473!
initializeTotal: aTotal items: anItems clientName: aClientName  

	total := aTotal. 
	books := anItems. 
	clientName := aClientName .! !
!Sale class methodsFor: 'instance creation' stamp: 'BAG 6/21/2021 19:57:20'!
of: aTotal withItems: anItems clientName: aClientName

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal items: anItems clientName: aClientName ! !

!methodRemoval: Sale class #of: stamp: 'BAG 6/21/2021 19:57:27'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal items: self halt clientName: 'pepe' !
!Cashier methodsFor: 'checkout - private' stamp: 'BAG 6/21/2021 19:59:41' prior: 50867428!
createSale

	^ Sale of: total withItems: cart items clientName: '' 
! !
!Cashier methodsFor: 'checkout - private' stamp: 'BAG 6/21/2021 20:00:34' prior: 50874521!
createSale

	^ Sale of: total withItems: cart items clientName: creditCard ownerName.
! !
!Cart methodsFor: 'queries' stamp: 'BAG 6/21/2021 20:01:04'!
items
	^items ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'BAG 6/21/2021 20:01:38'!
expiringOn: aMonth for: anOwnerName
	
	^self new initializeExpiringOn: aMonth for: anOwnerName ! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'BAG 6/21/2021 20:02:04'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'BAG 6/21/2021 20:02:02'!
initializeExpiringOn: aMonth for: anOwnerName
	owner := anOwnerName .
	expiration := aMonth ! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'BAG 6/21/2021 20:02:11'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!CreditCard methodsFor: 'nil' stamp: 'BAG 6/21/2021 20:03:08'!
ownerName
	^owner! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:04:21' prior: 50874254!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear) for: ownerName.
	salesBook := OrderedCollection new.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	
	total := purchases isEmpty ifTrue: [0] ifFalse: [ purchases removeLast ]. 
	purchases addAll: (self listCart: cartID).
	
	purchases add: cashier checkOut + total.
	
	^1
	! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 20:05:06' prior: 50867767!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1) for: self validUsername! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 20:05:14' prior: 50874586!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1) for: (self validUsername).! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 20:05:27' prior: 50867760!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) for: (self validUsername).! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'BAG 6/21/2021 20:06:32'!
validUsername 
 	^'RupertoEl+Kpo' . 
	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'BAG 6/21/2021 20:06:37'!
validPassword 
	^ '3333'. 	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:07:10' prior: 50873169!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:07:24' prior: 50873184!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:07:40' prior: 50873206!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:07:48' prior: 50873227!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:07:58' prior: 50873254!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:08:07' prior: 50873275!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:08:14' prior: 50873301!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:08:22' prior: 50873321!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:08:31' prior: 50873568!
test10CheckoutCartWithOneItem
	| restInterface cartID transactionID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	transactionID := restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: 'pepe'.
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:08:45' prior: 50874800!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: 'pepe'.
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:09:02' prior: 50874391!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	purchases := restInterface listPurchases: validUsername password: validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:09:27' prior: 50874311!
test12CheckoutWithMultipleItems
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	restInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/21/2021 20:09:42' prior: 50873880 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].! !

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock debitBehavior clockDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/21/2021 20:09:52'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock debitBehavior clockDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:10:05' prior: 50874906!
test12CheckoutWithMultipleItems
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	restInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:10:26' prior: 50874863!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:10:37' prior: 50874832!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: 'pepe'.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:10:44'!
ERROR!

storeFactory validUsername!

storeFactory validPassword!
!RestInterfaceTest methodsFor: 'mocking' stamp: 'BAG 6/21/2021 20:11:25' prior: 50868137!
authenticate: aUsername with: aPassword
	^storeFactory validUsername = aUsername and: storeFactory validPassword = aPassword. 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:11:27'!
FAILURE!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 20:11:27'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:11:27'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 20:12:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 20:12:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 20:12:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 20:12:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 20:12:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 20:12:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 20:12:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 20:12:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 20:12:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 20:12:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 20:12:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 20:12:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 20:12:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 20:12:21'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:18:20' prior: 50874563!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card purchasesByClient |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear) for: ownerName.
	
	salesBook := OrderedCollection new.
	purchasesByClient := Bag new.
	salesBook do: [ :sale |
			sale clientName = ownerName ifTrue: [ purchasesByClient addAll: (sale books) ].
		].
	
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	
	total := purchases isEmpty ifTrue: [0] ifFalse: [ purchases removeLast ]. 
	purchases addAll: (self listCart: cartID).
	
	purchases add: cashier checkOut + total.
	
	^1
	! !
!Sale methodsFor: 'initialization' stamp: 'BAG 6/21/2021 20:18:48'!
initializeTotal: aTotal books: anItems clientName: aClientName  

	total := aTotal. 
	books := anItems. 
	clientName := aClientName .! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 20:18:48' prior: 50874506!
of: aTotal withItems: anItems clientName: aClientName

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal books: anItems clientName: aClientName ! !

!methodRemoval: Sale #initializeTotal:items:clientName: stamp: 'BAG 6/21/2021 20:18:48'!
initializeTotal: aTotal items: anItems clientName: aClientName  

	total := aTotal. 
	books := anItems. 
	clientName := aClientName .!
!Sale class methodsFor: 'instance creation' stamp: 'BAG 6/21/2021 20:19:08'!
of: aTotal withBooks: anItems clientName: aClientName

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal books: anItems clientName: aClientName ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 20:19:08' prior: 50874527!
createSale

	^ Sale of: total withBooks: cart items clientName: creditCard ownerName.
! !

!methodRemoval: Sale class #of:withItems:clientName: stamp: 'BAG 6/21/2021 20:19:08'!
of: aTotal withItems: anItems clientName: aClientName

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal books: anItems clientName: aClientName !
!Sale class methodsFor: 'instance creation' stamp: 'BAG 6/21/2021 20:19:18' prior: 50875282!
of: aTotal withBooks: anBooks clientName: aClientName

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal books: anBooks clientName: aClientName ! !
!Sale methodsFor: 'initialization' stamp: 'BAG 6/21/2021 20:19:28' prior: 50875258!
initializeTotal: aTotal books: anBooks clientName: aClientName  

	total := aTotal. 
	books := anBooks. 
	clientName := aClientName .! !
!Sale methodsFor: 'nil' stamp: 'BAG 6/21/2021 20:19:41'!
books
	^books ! !
!Sale methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 20:19:51'!
clientName
	^clientName ! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:20:14'!
FAILURE!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 20:20:14'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:20:14'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:21:31' prior: 50875231!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook total cashier card purchasesByClient |
	
	salesBook := OrderedCollection new.
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear) for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	
	purchasesByClient := Bag new.
	salesBook do: [ :sale |
			sale clientName = ownerName ifTrue: [ purchasesByClient addAll: (sale books) ].
		].
	
	
	total := purchases isEmpty ifTrue: [0] ifFalse: [ purchases removeLast ]. 
	purchases addAll: (self listCart: cartID).
	
	purchases add: cashier checkOut + total.
	
	^1
	! !

Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart merchantProcessor salesBook purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:25:43' prior: 50875370!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| salesBook1 total cashier card purchasesByClient |
	
	salesBook1 := OrderedCollection new.
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear) for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook1.
	
	purchasesByClient := Bag new.
	salesBook1 do: [ :sale |
			sale clientName = ownerName ifTrue: [ purchasesByClient addAll: (sale books) ].
		].
	
	
	total := purchases isEmpty ifTrue: [0] ifFalse: [ purchases removeLast ]. 
	purchases addAll: (self listCart: cartID).
	
	purchases add: cashier checkOut + total.
	
	^1
	! !

Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart merchantProcessor salesBook purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/21/2021 20:25:53'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart merchantProcessor salesBook purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:26:27' prior: 50875405!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| total cashier card |
	
	salesBook := OrderedCollection new.
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear) for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	
	^1
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:26:38' prior: 50875450!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear) for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	
	^1
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:27:24' prior: 50873493!
listPurchases: validUsername password: validPassword
	| purchases1 cartID cashier ownerName purchasesByClient total |
	purchasesByClient := Bag new.
	salesBook do: [ :sale |
			sale clientName = ownerName ifTrue: [ purchasesByClient addAll: (sale books) ].
		].
	
	
	total := purchases1 isEmpty ifTrue: [0] ifFalse: [ purchases1 removeLast ]. 
	purchases1 addAll: (self listCart: cartID).
	
	purchases1 add: cashier checkOut + total.
	
	^purchases1.! !

Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'BAG 6/21/2021 20:27:49'!
Object subclass: #RestInterface
	instanceVariableNames: 'userAuthenticator nextID activeCarts catalog clock lastTimeUsedForCart merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

	yourself.!

	yourself.  !

pepe !

pepe := Bag new.!

	yourself.!

pepe !

pepe add: 1 .!

pepe!

pepe add: 2 . !

pepe add: 1 .!

pepe add: 3 .!

pepe !

pepe  contents.!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:37:00' prior: 50875483!
listPurchases: validUsername password: validPassword
	| purchases1 purchasesByClient total |
	purchases1:= OrderedCollection new.
	purchasesByClient := Bag new.
	total := 0.
	salesBook do: [ :sale |
			sale clientName = validUsername ifTrue: [ 
				total := total + sale total.
				purchasesByClient addAll: (sale books) ].
		].
	
	
	(purchasesByClient contents) do: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			
			].
	
	purchases1 add: total.
	
	^purchases1.! !

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:37:43'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:37:43'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:39:14' prior: 50875523!
listPurchases: validUsername password: validPassword
	| purchases1 purchasesByClient total |
	purchases1:= OrderedCollection new.
	purchasesByClient := Bag new.
	total := 0.
	salesBook do: [ :sale |
			sale clientName = validUsername ifTrue: [ 
				total := total + sale total.
				purchasesByClient addAll: (sale books) ].
		].
	
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			
			].
	
	purchases1 add: total.
	
	^purchases1.! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 20:39:17'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 20:39:17'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 20:39:17'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 20:39:17'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 20:39:17'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 20:39:17'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 20:39:17'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 20:39:17'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 20:39:17'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:39:17'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:39:17'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 20:39:17'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:39:24'!
ERROR!
!RestInterface methodsFor: 'initialization' stamp: 'BAG 6/21/2021 20:39:49' prior: 50874095!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock merchantProcessor: aMerchantProcessor   
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	activeCarts := Dictionary new.
	lastTimeUsedForCart := Dictionary new.
	salesBook := OrderedCollection new.
	catalog := aCatalog. 
	clock := aClock.
	merchantProcessor := aMerchantProcessor. 
	
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 20:39:50'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 20:39:50'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 20:39:50'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 20:39:50'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 20:39:50'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 20:39:50'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 20:39:50'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 20:39:50'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 20:39:50'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:39:50'!
FAILURE!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:39:50'!
FAILURE!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 20:39:50'!
FAILURE!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:39:53'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:41:45' prior: 50875467!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear) for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	^1
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:41:47'!
FAILURE!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 20:41:47'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:41:47'!
FAILURE!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:43:19'!
FAILURE!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:43:19'!
FAILURE!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:43:34'!
FAILURE!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:43:34'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:44:52' prior: 50875053!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:45:13'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:45:15'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 20:45:17'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 20:45:21'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:50:40'!
test13CheckoutCartsForTwoClient
	| restInterface cartID1 cartID2 expectedPurchases purchasesClient1 purchasesClient2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	purchasesClient2 := restInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	
	
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice.
	
	 
	self assert: expectedPurchases equals: purchasesClient2.
	self assert: expectedPurchases equals: purchasesClient1.
	
	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'BAG 6/21/2021 20:51:18'!
anotherValidPassword 
	^ '4444'. 	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'BAG 6/21/2021 20:51:28'!
anotherValidUsername 
 	^'pepe' . 
	! !

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 20:51:47'!
ERROR!
!RestInterfaceTest methodsFor: 'mocking' stamp: 'BAG 6/21/2021 20:52:31' prior: 50875090!
authenticate: aUsername with: aPassword
	^(storeFactory validUsername = aUsername and: storeFactory validPassword = aPassword) 
	or: (storeFactory anotherValidUsername = aUsername and: storeFactory anotherValidPassword = aPassword). 
	! !

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 20:52:41'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:54:51'!
test14CanNotCheckoutInvalidCart
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !

!testRun: #RestInterfaceTest #test14CanNotCheckoutInvalidCart stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutInvalidCart stamp: 'BAG 6/21/2021 20:55:22'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:56:19' prior: 50875941!
test14CanNotCheckoutInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !

!testRun: #RestInterfaceTest #test14CanNotCheckoutInvalidCart stamp: 'BAG 6/21/2021 20:56:26'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 20:57:00' prior: 50875666!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	self removeIfCartExpired: cartID.
	self assertCartExists: cartID. 
	self refreshLastTimeUsed: cartID.
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear) for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	^1
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutInvalidCart stamp: 'BAG 6/21/2021 20:57:01'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 20:57:47'!
test14CanNotCheckoutExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !

!methodRemoval: RestInterfaceTest #test14CanNotCheckoutInvalidCart stamp: 'BAG 6/21/2021 20:57:47'!
test14CanNotCheckoutInvalidCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 21:00:49'!
test14CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 21:01:03'!
test15CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !

!methodRemoval: RestInterfaceTest #test14CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:01:03'!
test14CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 21:02:32' prior: 50876243!
test15CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	restInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface canNotCreateCartWithInvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:02:40'!
FAILURE!
!RestInterface class methodsFor: 'error descriptions' stamp: 'BAG 6/21/2021 21:03:02'!
InvalidCredentialsErrorDescription
	^'No se puede crear un carrito con credenciales inválidas.'! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 21:03:02' prior: 50872521!
createCartForUser: aUsername withPassword: aPassword 
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription] . 
	
	nextID := nextID +1.
	activeCarts at: nextID put: (Cart acceptingItemsOf: catalog).
	lastTimeUsedForCart at: nextID put: clock actualTime.
	
	^nextID.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 21:03:02' prior: 50876297!
test15CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	restInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface InvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/21/2021 21:03:02' prior: 50873151!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !

!methodRemoval: RestInterface class #canNotCreateCartWithInvalidCredentialsErrorDescription stamp: 'BAG 6/21/2021 21:03:02'!
canNotCreateCartWithInvalidCredentialsErrorDescription
	^'No se puede crear un carrito con credenciales inválidas.'!
!RestInterface class methodsFor: 'error descriptions' stamp: 'BAG 6/21/2021 21:03:16' prior: 50876331!
InvalidCredentialsErrorDescription
	^'Las credenciales ingresadas son inválidas.'! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 21:03:49' prior: 50875548!
listPurchases: aUsername password: aPassword
	| purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription] . 
	
	purchases1:= OrderedCollection new.
	purchasesByClient := Bag new.
	total := 0.
	salesBook do: [ :sale |
			sale clientName = aUsername ifTrue: [ 
				total := total + sale total.
				purchasesByClient addAll: (sale books) ].
		].
	
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			
			].
	
	purchases1 add: total.
	
	^purchases1.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:03:50'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 21:07:03'!
test16CanNotCheckoutSameCartTwice
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 21:07:58' prior: 50876530!
test16CanNotCheckoutSameCartTwice
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface canNotCheckoutTwiceErrorDescription) equals: anError messageText.
		].! !
!RestInterface class methodsFor: 'error descriptions' stamp: 'BAG 6/21/2021 21:08:51'!
canNotCheckoutTwiceErrorDescription
	^'No se puede realizar checkout de un carrito más de una vez.'! !

!methodRemoval: RestInterface class #canNotCheckoutTwiceErrorDescription stamp: 'BAG 6/21/2021 21:11:46'!
canNotCheckoutTwiceErrorDescription
	^'No se puede realizar checkout de un carrito más de una vez.'!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 21:13:16' prior: 50876552!
test16CanNotCheckoutSameCartTwice
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 21:15:00' prior: 50876053!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	self removeIfCartExpired: cartID.
	self assertCartExists: cartID. 
	self refreshLastTimeUsed: cartID.
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear) for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	activeCarts removeKey: cartID.
	lastTimeUsedForCart removeKey: cartID.
	
	^1
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/21/2021 21:15:11'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 21:15:20'!
removeCart: cartID

	activeCarts removeKey: cartID.
	lastTimeUsedForCart removeKey: cartID! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 21:15:20' prior: 50876629!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	self removeIfCartExpired: cartID.
	self assertCartExists: cartID. 
	self refreshLastTimeUsed: cartID.
	
	card := CreditCard expiringOn: (Month month: expirationMonth year: expirationYear) for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	self removeCart: cartID.
	
	^1
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 21:15:38' prior: 50872484!
removeIfCartExpired: aCartID
	lastTimeUsedForCart at:  aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		self removeCart: aCartID.
		]] 

	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/21/2021 21:15:40'!
PASSED!

'1' asNumber.!

'' isNumber. !

'' asNumber. !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 21:19:07'!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 21:22:44' prior: 50876791!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: '13' 
			    andYear: '202'  
			    owner: storeFactory validUsername.
			
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 21:25:51' prior: 50876824!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: '13' 
			    andYear: '202'  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		self assert: (restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 21:25:57'!
FAILURE!

!methodRemoval: CreditCard class #expiringOn: stamp: 'BAG 6/21/2021 21:31:55'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!CreditCard methodsFor: 'initialization' stamp: 'BAG 6/21/2021 21:33:13'!
initializeExpiringOnMonth: aMonth andYear: aYear for: anOwnerName
	owner := anOwnerName .
	expiration := Month month: aMonth year: aYear ! !

!methodRemoval: CreditCard #initializeExpiringOn:for: stamp: 'BAG 6/21/2021 21:33:21'!
initializeExpiringOn: aMonth for: anOwnerName
	owner := anOwnerName .
	expiration := aMonth !
!CreditCard class methodsFor: 'instance creation' stamp: 'BAG 6/21/2021 21:36:17'!
expiringOnMonth: aMonth andYear: aYear for: anOwnerName
	(aMonth size = 2 and: aMonth isNumber and: (aMonth asNumber between: 1 and: 12)) ifFalse: [self error: self invalidExpirationDateErrorDescription].
	(aYear size = 4 and: aYear isNumber) ifFalse: [self error: self invalidExpirationDateErrorDescription].
	
	^self new initializeExpiringOnMonth: aMonth andYear: aYear for: anOwnerName ! !
!CreditCard class methodsFor: 'nil' stamp: 'BAG 6/21/2021 21:36:40'!
invalidExpirationDateErrorDescription
	^'La fecha de expiración ingresada es inválida'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'BAG 6/21/2021 21:36:57' prior: 50876912!
invalidExpirationDateErrorDescription
	^'La fecha de expiración es inválida'! !

!methodRemoval: CreditCard class #expiringOn:for: stamp: 'BAG 6/21/2021 21:37:03'!
expiringOn: aMonth for: anOwnerName
	
	^self new initializeExpiringOn: aMonth for: anOwnerName !
!CreditCard class methodsFor: 'instance creation' stamp: 'BAG 6/21/2021 21:38:03'!
assertValidExpirationDateFor: aYear and: aMonth

	(aMonth size = 2 and: aMonth isNumber and: (aMonth asNumber between: 1 and: 12)) ifFalse: [self error: self invalidExpirationDateErrorDescription].
	(aYear size = 4 and: aYear isNumber) ifFalse: [self error: self invalidExpirationDateErrorDescription]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'BAG 6/21/2021 21:38:03' prior: 50876897!
expiringOnMonth: aMonth andYear: aYear for: anOwnerName
	self assertValidExpirationDateFor: aYear and: aMonth.
	
	^self new initializeExpiringOnMonth: aMonth andYear: aYear for: anOwnerName ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 21:38:45' prior: 50874594!
expiredCreditCard
	
	^CreditCard expiringOnMonth: today monthIndex andYear: today yearNumber - 1 for: (self validUsername).! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 21:39:01' prior: 50874602!
notExpiredCreditCard
	
	^CreditCard expiringOnMonth: today monthIndex aYear: today yearNumber + 1 for: (self validUsername).! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 21:39:11' prior: 50876960!
notExpiredCreditCard
	
	^CreditCard expiringOnMonth: today monthIndex andYear: today yearNumber + 1 for: (self validUsername).! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/21/2021 21:39:38' prior: 50876709!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	self removeIfCartExpired: cartID.
	self assertCartExists: cartID. 
	self refreshLastTimeUsed: cartID.
	
	card := CreditCard expiringOnMonth: expirationMonth andYear: expirationYear for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	self removeCart: cartID.
	
	^1
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 21:39:41'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:39:41'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 21:39:41'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 21:39:41'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 21:39:41'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 21:39:41'!
ERROR!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 21:39:41'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 21:39:41'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 21:39:41'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 21:39:41'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 21:39:41'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:39:41'!
ERROR!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/21/2021 21:39:41'!
ERROR!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 21:39:41'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:39:54'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 21:40:48' prior: 50876952!
expiredCreditCard
	
	^CreditCard expiringOnMonth: (today monthIndex printString) andYear: (today yearNumber - 1) printString for: (self validUsername).! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 21:41:11' prior: 50876968!
notExpiredCreditCard
	
	^CreditCard expiringOnMonth: (today monthIndex) printString andYear: (today yearNumber + 1) printString for: (self validUsername).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 21:41:12'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:41:12'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 21:41:12'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 21:41:12'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 21:41:12'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 21:41:12'!
ERROR!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 21:41:12'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 21:41:12'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 21:41:12'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 21:41:12'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 21:41:12'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:41:12'!
ERROR!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/21/2021 21:41:12'!
ERROR!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 21:41:12'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:41:17'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:41:25'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:41:30'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:41:49'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:41:55'!
ERROR!

aMonth size = 2!

aMonth size!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 21:47:43' prior: 50877100!
expiredCreditCard
	| month year |
	month := today monthIndex printString.
	year := (today yearNumber -1) printString.
	month size = 1 ifTrue: [month := '0',month].
	(4 - year size) timesRepeat: [year := '0',year].
	
	^CreditCard expiringOnMonth: month andYear: year for: (self validUsername).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 21:47:45'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:47:45'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 21:47:45'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 21:47:45'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 21:47:45'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 21:47:45'!
ERROR!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 21:47:45'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 21:47:45'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 21:47:45'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 21:47:45'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 21:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:47:45'!
ERROR!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/21/2021 21:47:45'!
ERROR!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 21:47:45'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:47:49'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 21:48:59' prior: 50877108!
notExpiredCreditCard
	| month year |
	
	month := today monthIndex printString.
	year := (today yearNumber +1) printString.
	month size = 1 ifTrue: [month := '0',month].
	(4 - year size) timesRepeat: [year := '0',year].
	
	^CreditCard expiringOnMonth: month andYear: year for: (self validUsername).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 21:49:01'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:49:01'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 21:49:01'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 21:49:01'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 21:49:01'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 21:49:01'!
ERROR!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 21:49:01'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 21:49:01'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 21:49:01'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 21:49:01'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 21:49:01'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:49:01'!
ERROR!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/21/2021 21:49:01'!
ERROR!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 21:49:01'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:49:04'!
ERROR!

aMonth isNumber!

aMonth asNumber!

'06' isInteger !

'06' trimmed: $0.!

'06' asMonth.!

'06' findPositiveInteger.!

'**6' findPositiveInteger. 6 !

'**pepe' findPositiveInteger.!
!CreditCard class methodsFor: 'instance creation' stamp: 'BAG 6/21/2021 21:57:21' prior: 50876929!
assertValidExpirationDateFor: aYear and: aMonth

	(aMonth size = 2 and: (aMonth asNumber between: 1 and: 12)) ifFalse: [self error: self invalidExpirationDateErrorDescription].
	(aYear size = 4 and: aYear isNumber) ifFalse: [self error: self invalidExpirationDateErrorDescription]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 21:57:23'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:57:23'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 21:57:23'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 21:57:23'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 21:57:23'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 21:57:23'!
ERROR!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 21:57:23'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 21:57:23'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 21:57:23'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 21:57:23'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 21:57:23'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:57:23'!
ERROR!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/21/2021 21:57:23'!
ERROR!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 21:57:23'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:57:29'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:57:30'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 21:58:13' prior: 50876845!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		self assert: (restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 21:59:01' prior: 50877351!
notExpiredCreditCard
	
	^CreditCard expiringOnMonth: today monthIndex andYear: today yearNumber +1 for: (self validUsername).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 21:59:06'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 21:59:06'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 21:59:06'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 21:59:06'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 21:59:06'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 21:59:06'!
ERROR!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 21:59:06'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 21:59:06'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 21:59:06'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 21:59:06'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 21:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 21:59:06'!
ERROR!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/21/2021 21:59:06'!
ERROR!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 21:59:06'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'BAG 6/21/2021 22:01:40' prior: 50877474!
assertValidExpirationDateFor: aYear and: aMonth

	(aMonth asNumber between: 1 and: 12) ifFalse: [self error: self invalidExpirationDateErrorDescription].
	(aYear numberOfDigitsInBase: 10) = 4  ifFalse: [self error: self invalidExpirationDateErrorDescription]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 22:01:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 22:01:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 22:01:46'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 22:01:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 22:01:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 22:01:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 22:01:46'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 22:01:54'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/21/2021 22:03:03' prior: 50877234!
expiredCreditCard
	^CreditCard expiringOnMonth: today monthIndex  andYear: today yearNumber -1 for: (self validUsername).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/21/2021 22:03:05'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 22:03:05'!
FAILURE!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 22:03:05'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/21/2021 22:03:40' prior: 50877593!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
		self assert: (restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 22:03:41'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/21/2021 22:03:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/21/2021 22:03:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/21/2021 22:03:48'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/21/2021 22:03:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/21/2021 22:03:48'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/21/2021 22:03:48'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/21/2021 22:03:48'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/21/2021 22:03:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/21/2021 22:03:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/21/2021 22:03:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/21/2021 22:03:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/21/2021 22:03:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/21/2021 22:03:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/21/2021 22:03:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/21/2021 22:03:50'!
PASSED!

----SNAPSHOT----(21 June 2021 22:06:37) CuisUniversity-4532.image priorSource: 17308390!

----SNAPSHOT----(21 June 2021 22:40:50) CuisUniversity-4532.image priorSource: 17483848!

----QUIT----(21 June 2021 22:40:53) CuisUniversity-4532.image priorSource: 17483938!

----STARTUP---- (22 June 2021 18:08:01) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:10:58' prior: 50876413!
listPurchases: aUsername password: aPassword
	| purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1:= OrderedCollection new.
	purchasesByClient := Bag new.
	total := 0.
	salesBook do: [ :sale |
			sale clientName = aUsername ifTrue: [ 
				total := total + sale total.
				purchasesByClient addAll: (sale books) ].
		].
	
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:11:32' prior: 50878034!
listPurchases: aUsername password: aPassword
	| purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	total := 0.
	salesBook do: [ :sale |
			sale clientName = aUsername ifTrue: [ 
				total := total + sale total.
				purchasesByClient addAll: (sale books) ].
		].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:28:40' prior: 50878057!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	total := 0.
	clientSales do: [ :sale |
				total := total + sale total.
				purchasesByClient addAll: (sale books) 
				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:28:42'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:31:08' prior: 50878080!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	clientSales do: [ :sale |				purchasesByClient addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:31:09'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:32:56' prior: 50878206!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	clientSales do: [ :sale |				purchasesByClient addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:35:22' prior: 50878332!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchasesByClient addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:35:24'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:35:24'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:35:24'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:35:24'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:35:24'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:35:30' prior: 50878357!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchases addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:35:32'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:35:32'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:35:32'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:35:32'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:35:32'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:35:46' prior: 50878485!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :sale :purchases |				purchases addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:35:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:35:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:35:48'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:35:48'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:35:48'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:35:48'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:35:48'!
PASSED!

pepe := OrderedCollection withAll: #(1 2 3).!

pepe2 := pepe inject: Bag new into: [:acum : total | acum add: total].!

pepe2 := pepe inject: Bag new into: [ :total :acum | acum add: total].!

pepe2 := pepe inject: Bag new into: [ :total :acum | acum add: total. acum].!

pepe2 := pepe inject: Bag new into: [  :acum :total | acum add: total. acum].!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:39:40' prior: 50878612!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchases addAll: (sale books). purchases				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:39:42'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:40:06' prior: 50878750!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchases addAll: (sale books). purchases				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:42:31' prior: 50878878!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:45:00'!
getPurchasesByClient: aClientSales	
	| purchasesByClient purchases |
	purchases := OrderedCollection new.
	
	purchasesByClient := aClientSales inject: Bag new into: [ :books :sale |		books addAll: (sale books). books				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases add: item key.
			purchases add: item value.
			].
	
	^purchases! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:45:12'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:45:18' prior: 50878903!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:45:52' prior: 50879036!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:46:29'!
assertAuthenticationForUser: aUsername password: aPassword

	^ (userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:46:29' prior: 50879053!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	self assertAuthenticationForUser: aUsername password: aPassword. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:49:05' prior: 50876729!
removeIfCartExpired: aCartID
	lastTimeUsedForCart at: aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		self removeCart: aCartID.
		]] 

	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:50:59' prior: 50872428!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book;
				   add: quantity.
			].
		].

	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:51:00'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:53:05' prior: 50879103!
listCart: aCartID
	| cart listCart cartItems |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	cartItems := catalog keys select:[:book | cart occurrencesOf: book > 0].
	cartItems do:[ :book | 	
			listCart add: book;
				   add: (cart occurrencesOf: book).
		
		].

	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:53:07'!
ERROR!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:53:07'!
ERROR!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:53:07'!
ERROR!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:53:07'!
ERROR!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:53:07'!
ERROR!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:53:07'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:53:07'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:53:42'!
ERROR!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:53:42'!
ERROR!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:53:42'!
ERROR!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:53:42'!
ERROR!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:53:42'!
ERROR!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:53:42'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:53:42'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:53:44'!
ERROR!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:54:08'!
ERROR!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:54:27' prior: 50879223!
listCart: aCartID
	| cart listCart cartItems |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	cartItems := catalog keys select:[:book | (cart occurrencesOf: book) > 0].
	cartItems do:[ :book | 	
			listCart add: book;
				   add: (cart occurrencesOf: book).
		
		].

	^listCart.
	! !

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:54:28'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:54:31'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:56:40' prior: 50879451!
listCart: aCartID
	| cart listCart cartItems |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	cartItems := catalog keys select:[:book | (cart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (cart occurrencesOf: book);
				yourself.
		].

	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 18:56:41'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:58:45' prior: 50879575!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	listCart := self getCartItemsFor: cart.
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:59:45'!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:06:15' prior: 50879709!
getCartItemsFor: aCart
	| listCart |
	
	listCart := aCart items inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:06:19'!
FAILURE!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:06:19'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:06:19'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:07:43' prior: 50879722!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:07:45'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'BAG 6/22/2021 19:08:15' prior: 50874532!
items
	^Bag withAll: items ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:08:20'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'BAG 6/22/2021 19:08:38' prior: 50867264!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:08:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:08:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:08:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:08:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:08:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:08:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:08:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:08:41'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:08:43'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'BAG 6/22/2021 19:08:57' prior: 50879951!
items
	^items ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:08:58'!
PASSED!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:09:11' prior: 50879837!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := aCart items inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:09:15'!
FAILURE!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:09:15'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:09:15'!
FAILURE!

restInterface listCart: cartID.!
!Cart methodsFor: 'initialization' stamp: 'BAG 6/22/2021 19:13:27' prior: 50880057!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:13:29'!
FAILURE!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:13:29'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:13:29'!
FAILURE!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:13:50' prior: 50880295!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:13:52' prior: 50880524!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:13:53'!
PASSED!

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'BAG 6/22/2021 19:21:31'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'BAG 6/22/2021 19:23:17'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'nil' stamp: 'BAG 6/22/2021 19:23:15' overrides: 16896425!
initialize
	debitBehavior _ [:amount : creditCard |].! !
!MerchantProcessor methodsFor: 'nil' stamp: 'BAG 6/22/2021 19:23:41'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:24:06'!
assertValidAmount: anAmount

	^ ((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class balanceExceededErrorDescription ]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:24:51' prior: 50880680!
assertValidAmount: anAmount

	^ ((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class canNotDebitErrorDescription ]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:25:16'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'! !
!MerchantProcessor class methodsFor: 'nil' stamp: 'BAG 6/22/2021 19:25:29'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'! !

!methodRemoval: MerchantProcessor #canNotDebitErrorDescription stamp: 'BAG 6/22/2021 19:25:34'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:27:15'!
assertValidCreditCardNumber: aCreditCardNumber

	^ ((aCreditCardNumber numberOfDigitsInBase: 10) = 16) ifTrue: [self error: self class canNotDebitErrorDescription ]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:28:10' prior: 50880674!
debit: anAmount from: aCreditCard 
	self assertValidAmount: anAmount.
	self assertValidCreditCardNumber: aCreditCard.

	^debitBehavior value: anAmount value: aCreditCard ! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:31:52' prior: 50880720!
debit: anAmount from: aCreditCard 
	self assertValidAmount: anAmount.
	
	^debitBehavior value: anAmount value: aCreditCard ! !

!methodRemoval: MerchantProcessor #assertValidCreditCardNumber: stamp: 'BAG 6/22/2021 19:31:55'!
assertValidCreditCardNumber: aCreditCardNumber

	^ ((aCreditCardNumber numberOfDigitsInBase: 10) = 16) ifTrue: [self error: self class canNotDebitErrorDescription ]!
!RestInterface methodsFor: 'assertions' stamp: 'BAG 6/22/2021 19:33:01'!
assertValidCreditCardNumber: aCreditCardNumber

	^ (aCreditCardNumber isNumber and: (aCreditCardNumber asNumber numberOfDigitsInBase: 10) = 16) ifTrue: [self error: self class canNotDebitErrorDescription ]! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:33:22' prior: 50876975!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	self removeIfCartExpired: cartID.
	self assertCartExists: cartID. 
	self refreshLastTimeUsed: cartID.
	self assertValidCreditCardNumber: creditCardNumber. 
	
	card := CreditCard expiringOnMonth: expirationMonth andYear: expirationYear for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	self removeCart: cartID.
	
	^1
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/22/2021 19:38:14'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock debitBehavior clockDate merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:38:12' prior: 50874946 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	merchantProcessor _ MerchantProcessor new.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:33' prior: 50876382!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:39' prior: 50874617!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:45' prior: 50874633!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:49' prior: 50874657!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:52' prior: 50874679!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:55' prior: 50874707!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:59' prior: 50874729!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:03' prior: 50874755!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:06' prior: 50874775!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:10' prior: 50875737!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:14' prior: 50875008!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:19' prior: 50874968!
test12CheckoutWithMultipleItems
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	restInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:21' prior: 50875866!
test13CheckoutCartsForTwoClient
	| restInterface cartID1 cartID2 expectedPurchases purchasesClient1 purchasesClient2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	purchasesClient2 := restInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	
	
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice.
	
	 
	self assert: expectedPurchases equals: purchasesClient2.
	self assert: expectedPurchases equals: purchasesClient1.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:25' prior: 50876163!
test14CanNotCheckoutExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:28' prior: 50876352!
test15CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	restInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface InvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:32' prior: 50876597!
test16CanNotCheckoutSameCartTwice
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:36' prior: 50877885!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
		self assert: (restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:39:38'!
PASSED!

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/22/2021 19:39:53'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:39:56'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/22/2021 19:40:17'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:40:15' prior: 50867643 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	merchantProcessor := MerchantProcessor new.! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:27' prior: 50867608!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: merchantProcessor
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:31' prior: 50867626!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: merchantProcessor
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:36' prior: 50867519!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: merchantProcessor
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:39' prior: 50867540!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:44' prior: 50867584!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:49' prior: 50867558!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:40:50'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:42:07' prior: 50881627!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!MerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:42:33'!
creditCardHasNoCreditErrorMessage
	
	^'Credit card has no credit'! !

!methodRemoval: MerchantProcessor class #canNotDebitErrorDescription stamp: 'BAG 6/22/2021 19:42:37'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:42:52'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:42:52'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:59' prior: 50881658!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:00' prior: 50881602!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:04' prior: 50881584!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50881562!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50881545!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:50' prior: 50881526!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 19:03' prior: 50881520 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/22/2021 19:44:51'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/21/2021 20:09:42' prior: 50880785 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/22/2021 19:45:57'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock merchantProcessor debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:45:55' prior: 50881846 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	debitBehavior _ [:amount : creditCard |].! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:46:05'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:17' prior: 50880997!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:30' prior: 50881256!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
		self assert: (restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:33' prior: 50881194!
test15CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	restInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface InvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:37' prior: 50881224!
test16CanNotCheckoutSameCartTwice
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:40' prior: 50881166!
test14CanNotCheckoutExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:45' prior: 50881115!
test13CheckoutCartsForTwoClient
	| restInterface cartID1 cartID2 expectedPurchases purchasesClient1 purchasesClient2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	purchasesClient2 := restInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	
	
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice.
	
	 
	self assert: expectedPurchases equals: purchasesClient2.
	self assert: expectedPurchases equals: purchasesClient1.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:49' prior: 50881075!
test12CheckoutWithMultipleItems
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	restInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:53' prior: 50881030!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:59' prior: 50880971!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:03' prior: 50880950!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:11' prior: 50880923!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:14' prior: 50880901!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:17' prior: 50880873!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:20' prior: 50880851!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:24' prior: 50880827!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:28' prior: 50880810!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:31' prior: 50880793!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:47:33'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:47:33'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:47:33'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:47:33'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:47:33'!
ERROR!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:47:33'!
ERROR!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:47:33'!
PASSED!

!classRemoval: #MerchantProcessor stamp: 'BAG 6/22/2021 19:47:45'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:47:49'!
ERROR!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:47:49'!
ERROR!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:47:49'!
ERROR!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:47:49'!
ERROR!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:47:49'!
ERROR!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:47:49'!
ERROR!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:47:49'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:47:51'!
ERROR!

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate merchantProcessor debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/22/2021 19:48:16'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate merchantProcessor debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:48:30' prior: 50881863 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:48:37'!
PASSED!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:49:42' prior: 50882546 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].
	merchantProcessor _ CashierTest new.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:49:52' prior: 50882343!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:49:59' prior: 50881873!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:50:00'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:50:07' prior: 50882682!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:50:14' prior: 50882665!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:50:24' prior: 50882656 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].
	! !

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/22/2021 19:50:32'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/22/2021 19:50:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/22/2021 19:50:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/22/2021 19:50:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/22/2021 19:50:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/22/2021 19:50:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/22/2021 19:50:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/22/2021 19:50:38'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/22/2021 19:50:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/22/2021 19:50:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/22/2021 19:50:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/22/2021 19:50:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/22/2021 19:50:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/22/2021 19:50:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/22/2021 19:50:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/22/2021 19:50:40'!
PASSED!

----STARTUP---- (24 June 2021 00:03:05) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:10:58' prior: 50876413!
listPurchases: aUsername password: aPassword
	| purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1:= OrderedCollection new.
	purchasesByClient := Bag new.
	total := 0.
	salesBook do: [ :sale |
			sale clientName = aUsername ifTrue: [ 
				total := total + sale total.
				purchasesByClient addAll: (sale books) ].
		].
	
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:11:32' prior: 50882895!
listPurchases: aUsername password: aPassword
	| purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	total := 0.
	salesBook do: [ :sale |
			sale clientName = aUsername ifTrue: [ 
				total := total + sale total.
				purchasesByClient addAll: (sale books) ].
		].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:28:40' prior: 50882918!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	total := 0.
	clientSales do: [ :sale |
				total := total + sale total.
				purchasesByClient addAll: (sale books) 
				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:31:08' prior: 50882941!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	clientSales do: [ :sale |				purchasesByClient addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:32:56' prior: 50882965!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	clientSales do: [ :sale |				purchasesByClient addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:35:22' prior: 50882990!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchasesByClient addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:35:30' prior: 50883015!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchases addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:35:46' prior: 50883041!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :sale :purchases |				purchases addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:39:40' prior: 50883067!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchases addAll: (sale books). purchases				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:40:06' prior: 50883093!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchases addAll: (sale books). purchases				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:42:31' prior: 50883119!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:45:00'!
getPurchasesByClient: aClientSales	
	| purchasesByClient purchases |
	purchases := OrderedCollection new.
	
	purchasesByClient := aClientSales inject: Bag new into: [ :books :sale |		books addAll: (sale books). books				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases add: item key.
			purchases add: item value.
			].
	
	^purchases! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:45:18' prior: 50883144!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:45:52' prior: 50883176!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:46:29'!
assertAuthenticationForUser: aUsername password: aPassword

	^ (userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:46:29' prior: 50883193!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	self assertAuthenticationForUser: aUsername password: aPassword. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:49:05' prior: 50876729!
removeIfCartExpired: aCartID
	lastTimeUsedForCart at: aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		self removeCart: aCartID.
		]] 

	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:50:59' prior: 50872428!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book;
				   add: quantity.
			].
		].

	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:53:05' prior: 50883243!
listCart: aCartID
	| cart listCart cartItems |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	cartItems := catalog keys select:[:book | cart occurrencesOf: book > 0].
	cartItems do:[ :book | 	
			listCart add: book;
				   add: (cart occurrencesOf: book).
		
		].

	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:54:27' prior: 50883261!
listCart: aCartID
	| cart listCart cartItems |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	cartItems := catalog keys select:[:book | (cart occurrencesOf: book) > 0].
	cartItems do:[ :book | 	
			listCart add: book;
				   add: (cart occurrencesOf: book).
		
		].

	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:56:40' prior: 50883279!
listCart: aCartID
	| cart listCart cartItems |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	cartItems := catalog keys select:[:book | (cart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (cart occurrencesOf: book);
				yourself.
		].

	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:58:45' prior: 50883298!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	listCart := self getCartItemsFor: cart.
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:59:45'!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:06:15' prior: 50883330!
getCartItemsFor: aCart
	| listCart |
	
	listCart := aCart items inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:07:43' prior: 50883343!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!Cart methodsFor: 'queries' stamp: 'BAG 6/22/2021 19:08:15' prior: 50874532!
items
	^Bag withAll: items ! !
!Cart methodsFor: 'initialization' stamp: 'BAG 6/22/2021 19:08:38' prior: 50867264!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'queries' stamp: 'BAG 6/22/2021 19:08:57' prior: 50883365!
items
	^items ! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:09:11' prior: 50883353!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := aCart items inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!Cart methodsFor: 'initialization' stamp: 'BAG 6/22/2021 19:13:27' prior: 50883369!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:13:50' prior: 50883378!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:13:52' prior: 50883396!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:22'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:22'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:22'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'nil' stamp: 'BAG 6/22/2021 19:23:15' overrides: 16896425!
initialize
	debitBehavior _ [:amount : creditCard |].! !
!MerchantProcessor methodsFor: 'nil' stamp: 'BAG 6/22/2021 19:23:41'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:24:06'!
assertValidAmount: anAmount

	^ ((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class balanceExceededErrorDescription ]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:24:51' prior: 50883453!
assertValidAmount: anAmount

	^ ((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class canNotDebitErrorDescription ]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:25:16'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'! !
!MerchantProcessor class methodsFor: 'nil' stamp: 'BAG 6/22/2021 19:25:29'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'! !

!methodRemoval: MerchantProcessor #canNotDebitErrorDescription stamp: 'BAG 6/24/2021 00:03:22'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:27:15'!
assertValidCreditCardNumber: aCreditCardNumber

	^ ((aCreditCardNumber numberOfDigitsInBase: 10) = 16) ifTrue: [self error: self class canNotDebitErrorDescription ]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:28:10' prior: 50883447!
debit: anAmount from: aCreditCard 
	self assertValidAmount: anAmount.
	self assertValidCreditCardNumber: aCreditCard.

	^debitBehavior value: anAmount value: aCreditCard ! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:31:52' prior: 50883493!
debit: anAmount from: aCreditCard 
	self assertValidAmount: anAmount.
	
	^debitBehavior value: anAmount value: aCreditCard ! !

!methodRemoval: MerchantProcessor #assertValidCreditCardNumber: stamp: 'BAG 6/24/2021 00:03:22'!
assertValidCreditCardNumber: aCreditCardNumber

	^ ((aCreditCardNumber numberOfDigitsInBase: 10) = 16) ifTrue: [self error: self class canNotDebitErrorDescription ]!
!RestInterface methodsFor: 'assertions' stamp: 'BAG 6/22/2021 19:33:01'!
assertValidCreditCardNumber: aCreditCardNumber

	^ (aCreditCardNumber isNumber and: (aCreditCardNumber asNumber numberOfDigitsInBase: 10) = 16) ifTrue: [self error: self class canNotDebitErrorDescription ]! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:33:22' prior: 50876975!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	self removeIfCartExpired: cartID.
	self assertCartExists: cartID. 
	self refreshLastTimeUsed: cartID.
	self assertValidCreditCardNumber: creditCardNumber. 
	
	card := CreditCard expiringOnMonth: expirationMonth andYear: expirationYear for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	self removeCart: cartID.
	
	^1
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:22'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock debitBehavior clockDate merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:38:12' prior: 50874946 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	merchantProcessor _ MerchantProcessor new.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:33' prior: 50876382!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:39' prior: 50874617!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:45' prior: 50874633!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:49' prior: 50874657!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:52' prior: 50874679!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:55' prior: 50874707!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:59' prior: 50874729!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:03' prior: 50874755!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:06' prior: 50874775!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:10' prior: 50875737!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:14' prior: 50875008!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:19' prior: 50874968!
test12CheckoutWithMultipleItems
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	restInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:21' prior: 50875866!
test13CheckoutCartsForTwoClient
	| restInterface cartID1 cartID2 expectedPurchases purchasesClient1 purchasesClient2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	purchasesClient2 := restInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	
	
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice.
	
	 
	self assert: expectedPurchases equals: purchasesClient2.
	self assert: expectedPurchases equals: purchasesClient1.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:25' prior: 50876163!
test14CanNotCheckoutExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:28' prior: 50876352!
test15CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	restInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface InvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:32' prior: 50876597!
test16CanNotCheckoutSameCartTwice
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:36' prior: 50877885!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
		self assert: (restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:23'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:23'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:23'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:40:15' prior: 50867643 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	merchantProcessor := MerchantProcessor new.! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:27' prior: 50867608!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: merchantProcessor
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:31' prior: 50867626!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: merchantProcessor
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:36' prior: 50867519!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: merchantProcessor
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:39' prior: 50867540!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:44' prior: 50867584!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:49' prior: 50867558!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:42:07' prior: 50884193!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!MerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:42:33'!
creditCardHasNoCreditErrorMessage
	
	^'Credit card has no credit'! !

!methodRemoval: MerchantProcessor class #canNotDebitErrorDescription stamp: 'BAG 6/24/2021 00:03:23'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'!
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:59' prior: 50884220!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:00' prior: 50884168!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:04' prior: 50884150!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50884128!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50884111!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:50' prior: 50884092!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 19:03' prior: 50884086 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:23'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:23'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/21/2021 20:09:42' prior: 50883558 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:23'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock merchantProcessor debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:45:55' prior: 50884404 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	debitBehavior _ [:amount : creditCard |].! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:17' prior: 50883770!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:30' prior: 50884029!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
		self assert: (restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:33' prior: 50883967!
test15CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	restInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface InvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:37' prior: 50883997!
test16CanNotCheckoutSameCartTwice
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:40' prior: 50883939!
test14CanNotCheckoutExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:45' prior: 50883888!
test13CheckoutCartsForTwoClient
	| restInterface cartID1 cartID2 expectedPurchases purchasesClient1 purchasesClient2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	purchasesClient2 := restInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	
	
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice.
	
	 
	self assert: expectedPurchases equals: purchasesClient2.
	self assert: expectedPurchases equals: purchasesClient1.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:49' prior: 50883848!
test12CheckoutWithMultipleItems
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	restInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:53' prior: 50883803!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:59' prior: 50883744!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:03' prior: 50883723!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:11' prior: 50883696!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:14' prior: 50883674!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:17' prior: 50883646!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:20' prior: 50883624!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:24' prior: 50883600!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:28' prior: 50883583!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:31' prior: 50883566!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !

!classRemoval: #MerchantProcessor stamp: 'BAG 6/24/2021 00:03:24'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:24'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate merchantProcessor debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:24'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate merchantProcessor debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:48:30' prior: 50884421 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].! !
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:49:42' prior: 50884940 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].
	merchantProcessor _ CashierTest new.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:49:52' prior: 50884898!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:49:59' prior: 50884428!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:50:07' prior: 50884974!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:50:14' prior: 50884957!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:50:24' prior: 50884948 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:24'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:03:24'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 00:03:28'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'BAG 6/24/2021 00:35:58' prior: 50883390!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 00:36:01'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'BAG 6/24/2021 00:38:06' prior: 50885183!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!RestInterface methodsFor: 'private - operations' stamp: 'BAG 6/24/2021 00:39:06' prior: 50883409!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: Bag new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!Cart methodsFor: 'initialization' stamp: 'BAG 6/24/2021 00:40:28' prior: 50885290!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:40:29'!
ERROR!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 00:40:29'!
ERROR!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 00:40:29'!
ERROR!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 00:40:29'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 00:40:29'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:41:02'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/24/2021 00:43:12' prior: 50884836!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	! !

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:43:13'!
ERROR!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:43:35'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'BAG 6/24/2021 00:46:22' prior: 50885309!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:20' prior: 50885419!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:46:50'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:20' prior: 50885452!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 00:47:24'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 00:47:24'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 00:47:24'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:47:24'!
ERROR!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 00:47:25'!
ERROR!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 00:47:25'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 00:47:25'!
ERROR!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 00:47:25'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 00:47:25'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 00:47:25'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 00:47:25'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 00:47:25'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 00:47:25'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 00:47:25'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 00:47:25'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 00:47:25'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 00:47:25'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:47:51'!
ERROR!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:47:51'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:48:23'!
ERROR!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 00:48:23'!
ERROR!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 00:48:23'!
ERROR!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 00:48:23'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 00:48:23'!
PASSED!

----STARTUP---- (24 June 2021 00:48:38) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:10:58' prior: 50876413!
listPurchases: aUsername password: aPassword
	| purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1:= OrderedCollection new.
	purchasesByClient := Bag new.
	total := 0.
	salesBook do: [ :sale |
			sale clientName = aUsername ifTrue: [ 
				total := total + sale total.
				purchasesByClient addAll: (sale books) ].
		].
	
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:11:32' prior: 50882895!
listPurchases: aUsername password: aPassword
	| purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	total := 0.
	salesBook do: [ :sale |
			sale clientName = aUsername ifTrue: [ 
				total := total + sale total.
				purchasesByClient addAll: (sale books) ].
		].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:28:40' prior: 50882918!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	total := 0.
	clientSales do: [ :sale |
				total := total + sale total.
				purchasesByClient addAll: (sale books) 
				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:31:08' prior: 50882941!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	clientSales do: [ :sale |				purchasesByClient addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:32:56' prior: 50882965!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	clientSales do: [ :sale |				purchasesByClient addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:35:22' prior: 50882990!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchasesByClient addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:35:30' prior: 50883015!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchases addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:35:46' prior: 50883041!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :sale :purchases |				purchases addAll: (sale books)				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:39:40' prior: 50883067!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	purchasesByClient := Bag new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchases addAll: (sale books). purchases				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:40:06' prior: 50883093!
listPurchases: aUsername password: aPassword
	| clientSales purchases1 purchasesByClient total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	purchases1 := OrderedCollection new.
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchasesByClient := clientSales inject: Bag new into: [ :purchases :sale |				purchases addAll: (sale books). purchases				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases1 add: item key.
			purchases1 add: item value.
			].
	
	purchases1 add: total.
	
	^purchases1.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:42:31' prior: 50883119!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:45:00'!
getPurchasesByClient: aClientSales	
	| purchasesByClient purchases |
	purchases := OrderedCollection new.
	
	purchasesByClient := aClientSales inject: Bag new into: [ :books :sale |		books addAll: (sale books). books				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases add: item key.
			purchases add: item value.
			].
	
	^purchases! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:45:18' prior: 50883144!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:45:52' prior: 50883176!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	(userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:46:29'!
assertAuthenticationForUser: aUsername password: aPassword

	^ (userAuthenticator authenticate: aUsername with: aPassword) ifFalse:[self error: self class InvalidCredentialsErrorDescription]! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:46:29' prior: 50883193!
listPurchases: aUsername password: aPassword
	| clientSales purchases total |
	self assertAuthenticationForUser: aUsername password: aPassword. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := self getPurchasesByClient: clientSales.
	purchases add: total.
	
	^purchases.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:49:05' prior: 50876729!
removeIfCartExpired: aCartID
	lastTimeUsedForCart at: aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		self removeCart: aCartID.
		]] 

	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:50:59' prior: 50872428!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	
	catalog keys do:[ :book | 	
		| quantity |
		
		quantity := cart occurrencesOf: book.
		quantity > 0 ifTrue:[
			listCart add: book;
				   add: quantity.
			].
		].

	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:53:05' prior: 50883243!
listCart: aCartID
	| cart listCart cartItems |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	cartItems := catalog keys select:[:book | cart occurrencesOf: book > 0].
	cartItems do:[ :book | 	
			listCart add: book;
				   add: (cart occurrencesOf: book).
		
		].

	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:54:27' prior: 50883261!
listCart: aCartID
	| cart listCart cartItems |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	cartItems := catalog keys select:[:book | (cart occurrencesOf: book) > 0].
	cartItems do:[ :book | 	
			listCart add: book;
				   add: (cart occurrencesOf: book).
		
		].

	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:56:40' prior: 50883279!
listCart: aCartID
	| cart listCart cartItems |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := OrderedCollection new. 
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	cartItems := catalog keys select:[:book | (cart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (cart occurrencesOf: book);
				yourself.
		].

	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:58:45' prior: 50883298!
listCart: aCartID
	| cart listCart |
	
	self removeIfCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	listCart := self getCartItemsFor: cart.
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 18:59:45'!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:06:15' prior: 50883330!
getCartItemsFor: aCart
	| listCart |
	
	listCart := aCart items inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:07:43' prior: 50883343!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!Cart methodsFor: 'queries' stamp: 'BAG 6/22/2021 19:08:15' prior: 50874532!
items
	^Bag withAll: items ! !
!Cart methodsFor: 'initialization' stamp: 'BAG 6/22/2021 19:08:38' prior: 50867264!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'queries' stamp: 'BAG 6/22/2021 19:08:57' prior: 50883365!
items
	^items ! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:09:11' prior: 50883353!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := aCart items inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!Cart methodsFor: 'initialization' stamp: 'BAG 6/22/2021 19:13:27' prior: 50883369!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:13:50' prior: 50883378!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:13:52' prior: 50883396!
getCartItemsFor: aCart
	| cartItems listCart |
	
	cartItems := catalog keys select:[:book | (aCart occurrencesOf: book) > 0].
	listCart := cartItems inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:43'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:43'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:43'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'nil' stamp: 'BAG 6/22/2021 19:23:15' overrides: 16896425!
initialize
	debitBehavior _ [:amount : creditCard |].! !
!MerchantProcessor methodsFor: 'nil' stamp: 'BAG 6/22/2021 19:23:41'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:24:06'!
assertValidAmount: anAmount

	^ ((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class balanceExceededErrorDescription ]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:24:51' prior: 50883453!
assertValidAmount: anAmount

	^ ((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class canNotDebitErrorDescription ]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:25:16'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'! !
!MerchantProcessor class methodsFor: 'nil' stamp: 'BAG 6/22/2021 19:25:29'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'! !

!methodRemoval: MerchantProcessor #canNotDebitErrorDescription stamp: 'BAG 6/24/2021 00:48:43'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:27:15'!
assertValidCreditCardNumber: aCreditCardNumber

	^ ((aCreditCardNumber numberOfDigitsInBase: 10) = 16) ifTrue: [self error: self class canNotDebitErrorDescription ]! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:28:10' prior: 50883447!
debit: anAmount from: aCreditCard 
	self assertValidAmount: anAmount.
	self assertValidCreditCardNumber: aCreditCard.

	^debitBehavior value: anAmount value: aCreditCard ! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:31:52' prior: 50883493!
debit: anAmount from: aCreditCard 
	self assertValidAmount: anAmount.
	
	^debitBehavior value: anAmount value: aCreditCard ! !

!methodRemoval: MerchantProcessor #assertValidCreditCardNumber: stamp: 'BAG 6/24/2021 00:48:43'!
assertValidCreditCardNumber: aCreditCardNumber

	^ ((aCreditCardNumber numberOfDigitsInBase: 10) = 16) ifTrue: [self error: self class canNotDebitErrorDescription ]!
!RestInterface methodsFor: 'assertions' stamp: 'BAG 6/22/2021 19:33:01'!
assertValidCreditCardNumber: aCreditCardNumber

	^ (aCreditCardNumber isNumber and: (aCreditCardNumber asNumber numberOfDigitsInBase: 10) = 16) ifTrue: [self error: self class canNotDebitErrorDescription ]! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/22/2021 19:33:22' prior: 50876975!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	self removeIfCartExpired: cartID.
	self assertCartExists: cartID. 
	self refreshLastTimeUsed: cartID.
	self assertValidCreditCardNumber: creditCardNumber. 
	
	card := CreditCard expiringOnMonth: expirationMonth andYear: expirationYear for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	self removeCart: cartID.
	
	^1
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:44'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock debitBehavior clockDate merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:38:12' prior: 50874946 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	merchantProcessor _ MerchantProcessor new.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:33' prior: 50876382!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:39' prior: 50874617!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:45' prior: 50874633!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:49' prior: 50874657!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:52' prior: 50874679!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:55' prior: 50874707!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:38:59' prior: 50874729!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:03' prior: 50874755!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:06' prior: 50874775!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:10' prior: 50875737!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:14' prior: 50875008!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:19' prior: 50874968!
test12CheckoutWithMultipleItems
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	restInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:21' prior: 50875866!
test13CheckoutCartsForTwoClient
	| restInterface cartID1 cartID2 expectedPurchases purchasesClient1 purchasesClient2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	purchasesClient2 := restInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	
	
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice.
	
	 
	self assert: expectedPurchases equals: purchasesClient2.
	self assert: expectedPurchases equals: purchasesClient1.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:25' prior: 50876163!
test14CanNotCheckoutExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:28' prior: 50876352!
test15CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	restInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface InvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:32' prior: 50876597!
test16CanNotCheckoutSameCartTwice
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:39:36' prior: 50877885!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
		self assert: (restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:44'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:44'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:40:15' prior: 50867643 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	merchantProcessor := MerchantProcessor new.! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:27' prior: 50867608!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: merchantProcessor
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:31' prior: 50867626!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: merchantProcessor
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:36' prior: 50867519!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: merchantProcessor
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:39' prior: 50867540!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:44' prior: 50867584!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:40:49' prior: 50867558!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:42:07' prior: 50884193!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: merchantProcessor
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessor creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!MerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'BAG 6/22/2021 19:42:33'!
creditCardHasNoCreditErrorMessage
	
	^'Credit card has no credit'! !

!methodRemoval: MerchantProcessor class #canNotDebitErrorDescription stamp: 'BAG 6/24/2021 00:48:44'!
canNotDebitErrorDescription
	^'El débito no pudo ser realizado'!
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:59' prior: 50884220!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:00' prior: 50884168!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:04' prior: 50884150!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50884128!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50884111!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:50' prior: 50884092!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 19:03' prior: 50884086 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/21/2021 20:09:42' prior: 50883558 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:45'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock merchantProcessor debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:45:55' prior: 50884404 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	debitBehavior _ [:amount : creditCard |].! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:17' prior: 50883770!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:30' prior: 50884029!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
		self assert: (restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:33' prior: 50883967!
test15CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	restInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface InvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:37' prior: 50883997!
test16CanNotCheckoutSameCartTwice
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:40' prior: 50883939!
test14CanNotCheckoutExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:45' prior: 50883888!
test13CheckoutCartsForTwoClient
	| restInterface cartID1 cartID2 expectedPurchases purchasesClient1 purchasesClient2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	purchasesClient2 := restInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	
	
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice.
	
	 
	self assert: expectedPurchases equals: purchasesClient2.
	self assert: expectedPurchases equals: purchasesClient1.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:49' prior: 50883848!
test12CheckoutWithMultipleItems
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	restInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:53' prior: 50883803!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:46:59' prior: 50883744!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:03' prior: 50883723!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (RestInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:11' prior: 50883696!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:14' prior: 50883674!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (RestInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:17' prior: 50883646!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:20' prior: 50883624!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:24' prior: 50883600!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:28' prior: 50883583!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:47:31' prior: 50883566!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !

!classRemoval: #MerchantProcessor stamp: 'BAG 6/24/2021 00:48:45'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:45'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate merchantProcessor debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:45'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate merchantProcessor debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:48:30' prior: 50884421 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].! !
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:49:42' prior: 50884940 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].
	merchantProcessor _ CashierTest new.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:49:52' prior: 50884898!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:49:59' prior: 50884428!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: merchantProcessor.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:50:07' prior: 50884974!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'BAG 6/22/2021 19:50:14' prior: 50884957!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := RestInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = RestInterface InvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'setup' stamp: 'BAG 6/22/2021 19:50:24' prior: 50884948 overrides: 16927572!
setUp
	storeFactory _ StoreTestObjectsFactory new.
	clock _ 0.
	clockDate _ DateAndTime now.
	debitBehavior _ [:amount : creditCard |].
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:46'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'BAG 6/24/2021 00:48:46'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'storeFactory clock clockDate debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 00:48:53'!
PASSED!
!RestInterface methodsFor: 'private - operations' stamp: 'BAG 6/24/2021 00:56:07' prior: 50883234!
removeIfCartExpired: aCartID
	lastTimeUsedForCart at: aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		self removeCart: aCartID.
		self error: self class cartDoesNotExistErrorDescription.
		]].
	

	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!

!testRun: #RestInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 00:56:11'!
PASSED!
!RestInterface methodsFor: 'private - operations' stamp: 'BAG 6/24/2021 00:56:30'!
assertCartExpired: aCartID
	lastTimeUsedForCart at: aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		self removeCart: aCartID.
		self error: self class cartDoesNotExistErrorDescription.
		]].
	

	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 00:56:30' prior: 50871817!
add: aQuantity of: aBookISBN toCart: aCartID
	self assertCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 00:56:30' prior: 50883527!
checkOut: cartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	self assertCartExpired: cartID.
	self assertCartExists: cartID. 
	self refreshLastTimeUsed: cartID.
	self assertValidCreditCardNumber: creditCardNumber. 
	
	card := CreditCard expiringOnMonth: expirationMonth andYear: expirationYear for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: cartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	self removeCart: cartID.
	
	^1
	! !
!RestInterface methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 00:56:30' prior: 50883318!
listCart: aCartID
	| cart listCart |
	
	self assertCartExpired: aCartID.
	self assertCartExists: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	listCart := self getCartItemsFor: cart.
	
	^listCart.
	! !

!methodRemoval: RestInterface #removeIfCartExpired: stamp: 'BAG 6/24/2021 00:56:30'!
removeIfCartExpired: aCartID
	lastTimeUsedForCart at: aCartID 
	ifPresent: [:lastTime | (clock minutesElapsedSince: lastTime) > 30 ifTrue: [ 
		self removeCart: aCartID.
		self error: self class cartDoesNotExistErrorDescription.
		]].
	

	!
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:01:36'!
assertCartIsValid: aCartID

	self assertCartExpired: aCartID.
	self assertCartExists: aCartID! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:01:36' prior: 50885306!
add: aQuantity of: aBookISBN toCart: aCartID
	self assertCartIsValid: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	(activeCarts at: aCartID ifAbsent: [self error: self class cartDoesNotExistErrorDescription]) add: aQuantity of: aBookISBN. 
	 
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:02:00' prior: 50885340!
listCart: aCartID
	| cart listCart |
	
	self assertCartIsValid: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	cart _ activeCarts at: aCartID ifAbsent: [ self error: self class cartDoesNotExistErrorDescription].
	
	listCart := self getCartItemsFor: cart.
	
	^listCart.
	! !
!RestInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:02:38' prior: 50885318!
checkOut: aCartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	self assertValidCreditCardNumber: creditCardNumber. 
	self assertCartIsValid: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	card := CreditCard expiringOnMonth: expirationMonth andYear: expirationYear for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: aCartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	self removeCart: aCartID.
	
	^1
	! !

!classRenamed: #RestInterface as: #StoreInterface stamp: 'BAG 6/24/2021 01:12:30'!
Smalltalk renameClassNamed: #RestInterface as: #StoreInterface!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884460!
test17CanNotCheckoutWithInvalidExpirationDate
	| restInterface cartID |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
		self assert: (restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884760!
test07AddBookRefreshesTimeOfCart
	| restInterface cartID cartItems |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 15.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884552!
test14CanNotCheckoutExpiredCart
	| restInterface cartID |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50885007!
test10CheckoutCartWithOneItem
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884740!
test08CanNotListExpiredCart
	| restInterface cartID |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (StoreInterface cartDoesNotExistErrorDescription).
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884858!
test03CanCreateMultipleCart
	| restInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems1 := restInterface listCart: cartID1.
	cartItems2 := restInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884670!
test11CheckoutTwoCartsForSameClient
	| restInterface cartID1 cartID2 expectedPurchases purchases |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884836!
test04AddBookToCart
	| restInterface cartID cartItems |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884491!
test15CanNotListPurchasesWithInvalidCredentials
	| restInterface cartID |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	restInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface InvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50885039!
test01CanNotCreateCartWithInvalidUser
	| restInterface |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	
	self should: [restInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = StoreInterface InvalidCredentialsErrorDescription.
		].
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884579!
test13CheckoutCartsForTwoClient
	| restInterface cartID1 cartID2 expectedPurchases purchasesClient1 purchasesClient2 |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := restInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	restInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	restInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	purchasesClient2 := restInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	
	
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice.
	
	 
	self assert: expectedPurchases equals: purchasesClient2.
	self assert: expectedPurchases equals: purchasesClient1.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884520!
test16CanNotCheckoutSameCartTwice
	| restInterface cartID |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [restInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884786!
test06CanNotAddBookToExpiredCart
	| restInterface cartID |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884715!
test09ListCartRefreshesTime
	| restInterface cartID cartItems |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := restInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := restInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884882!
test02CanCreateCartWithValidCredentials
	| restInterface cartID cartItems |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems := restInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884630!
test12CheckoutWithMultipleItems
	| restInterface cartID expectedPurchases purchases |
	
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	restInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	restInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	restInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := restInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/24/2021 01:12:31' prior: 50884808!
test05AddMultipleBooksToCart
	| restInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	restInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := restInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	restInterface add: 1 of: item1 toCart: cartID  .
	restInterface add: 1 of: item2 toCart: cartID  .
	cartItems := restInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !

!classRenamed: #RestInterfaceTest as: #StoreInterfaceTest stamp: 'BAG 6/24/2021 01:12:49'!
Smalltalk renameClassNamed: #RestInterfaceTest as: #StoreInterfaceTest!
!StoreInterfaceTest methodsFor: 'create cart' stamp: 'BAG 6/24/2021 01:13:11' prior: 50885681!
test01CanNotCreateCartWithInvalidUser
	| storeInterface |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	
	self should: [storeInterface createCartForUser: 'pepe' withPassword: '1234' ]
	 raise:  Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
			self assert: anError messageText = StoreInterface InvalidCredentialsErrorDescription.
		].
	! !
!StoreInterfaceTest methodsFor: 'create cart' stamp: 'BAG 6/24/2021 01:13:37' prior: 50885830!
test02CanCreateCartWithValidCredentials
	| storeInterface cartID cartItems |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems := storeInterface listCart: cartID.
	
	self assert: 0 equals: cartItems size.
	! !
!StoreInterfaceTest methodsFor: 'create cart' stamp: 'BAG 6/24/2021 01:13:47' prior: 50885559!
test03CanCreateMultipleCart
	| storeInterface cartID1 cartID2 cartItems1 cartItems2 |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartID2 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	cartItems1 := storeInterface listCart: cartID1.
	cartItems2 := storeInterface listCart: cartID2.
	
	self assert: cartID1 ~= cartID2.
	self assert: 0 equals: cartItems1 size.
	self assert: 0 equals: cartItems2 size.
	! !
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:13:59' prior: 50885629!
test04AddBookToCart
	| storeInterface cartID cartItems |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID  .
	cartItems := storeInterface listCart: cartID.
	
	
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second.
	! !
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:14:07' prior: 50885887!
test05AddMultipleBooksToCart
	| storeInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	storeInterface add: 1 of: item1 toCart: cartID  .
	storeInterface add: 1 of: item2 toCart: cartID  .
	cartItems := storeInterface listCart: cartID.
	
	self assert: 4 equals: cartItems size.
	self assert: item1 equals: (cartItems at: 1).
	self assert: 1 equals: (cartItems at: 2).
	self assert: item2 equals: (cartItems at: 3).
	self assert: 1 equals: (cartItems at: 4).
	! !
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:14:15' prior: 50885781!
test06CanNotAddBookToExpiredCart
	| soreInterface cartID |
	
	soreInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := soreInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [soreInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:14:23' prior: 50886028!
test06CanNotAddBookToExpiredCart
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].

	! !
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:14:57' prior: 50885450!
test07AddBookRefreshesTimeOfCart
	| storeInterface cartID cartItems |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 15.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := storeInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 2 equals: cartItems second. 
	

	! !
!StoreInterfaceTest methodsFor: 'list cart' stamp: 'BAG 6/24/2021 01:15:15' prior: 50885538!
test08CanNotListExpiredCart
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 31.
	
	self should: [storeInterface listCart: cartID]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: anError messageText equals: (StoreInterface cartDoesNotExistErrorDescription).
		].
	! !
!StoreInterfaceTest methodsFor: 'list cart' stamp: 'BAG 6/24/2021 01:15:24' prior: 50885804!
test09ListCartRefreshesTime
	| storeInterface cartID cartItems |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := storeInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := storeInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: (storeFactory itemSellByTheStore) equals: cartItems first.
	self assert: 1 equals: cartItems second. 
	

	! !
!StoreInterfaceTest methodsFor: 'list purchases' stamp: 'BAG 6/24/2021 01:15:43' prior: 50885651!
test15CanNotListPurchasesWithInvalidCredentials
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	storeInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface InvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 01:15:52' prior: 50885505!
test10CheckoutCartWithOneItem
	| storeInterface cartID expectedPurchases purchases |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore with: 1 with: storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 01:16:00' prior: 50885584!
test11CheckoutTwoCartsForSameClient
	| storeInterface cartID1 cartID2 expectedPurchases purchases |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	storeInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	storeInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 2
										with: 2* storeFactory itemSellByTheStorePrice.
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 01:16:07' prior: 50885847!
test12CheckoutWithMultipleItems
	| storeInterface cartID expectedPurchases purchases |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	storeInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 5 
										with: storeFactory anotherItemSellByTheStore 
										with: 5
										with: 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert: expectedPurchases size equals: purchases size.
	self assert: expectedPurchases equals: purchases.
	
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 01:16:13' prior: 50885698!
test13CheckoutCartsForTwoClient
	| storeInterface cartID1 cartID2 expectedPurchases purchasesClient1 purchasesClient2 |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := storeInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	storeInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	storeInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	purchasesClient2 := storeInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	
	
	expectedPurchases := OrderedCollection with: storeFactory itemSellByTheStore 
										with: 1
										with: storeFactory itemSellByTheStorePrice.
	
	 
	self assert: expectedPurchases equals: purchasesClient2.
	self assert: expectedPurchases equals: purchasesClient1.
	
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 01:16:22' prior: 50885477!
test14CanNotCheckoutExpiredCart
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [storeInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 01:16:30' prior: 50885749!
test16CanNotCheckoutSameCartTwice
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [storeInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 01:16:37' prior: 50885418!
test17CanNotCheckoutWithInvalidExpirationDate
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [storeInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
		self assert: (storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword) equals: (OrderedCollection with: 0)
		].
	! !
!StoreInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:18:33' prior: 50885369!
add: aQuantity of: aBookISBN toCart: aCartID
	self assertCartIsValid: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	(activeCarts at: aCartID) add: aQuantity of: aBookISBN. 
	 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:18:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:18:37'!
PASSED!
!StoreInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:18:52' prior: 50885380!
listCart: aCartID
	| cart listCart |
	
	self assertCartIsValid: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	cart _ activeCarts at: aCartID.
	
	listCart := self getCartItemsFor: cart.
	
	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:18:54'!
PASSED!
!StoreInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:19:16' prior: 50886651!
listCart: aCartID
	| listCart |
	self assertCartIsValid: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	listCart := self getCartItemsFor: (activeCarts at: aCartID).
	
	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:19:22'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'BAG 6/24/2021 01:20:39' prior: 50883390!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:20:46'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:20:53'!
PASSED!
!StoreInterface methodsFor: 'private - operations' stamp: 'BAG 6/24/2021 01:22:11' prior: 50883409!
getCartItemsFor: aCart
	| listCart |
	
	listCart := aCart items inject: OrderedCollection new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:22:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:22:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:22:16'!
FAILURE!
!StoreInterface methodsFor: 'private - operations' stamp: 'BAG 6/24/2021 01:27:21' prior: 50887039!
getCartItemsFor: aCart
	| listCart |
	
	listCart := aCart items inject: Bag new into:[:books :book | 	
			books add: book;
				add: (aCart occurrencesOf: book);
				yourself.
		].
	
	^listCart.
	! !
!StoreInterface methodsFor: 'private - operations' stamp: 'BAG 6/24/2021 01:28:19' prior: 50887155!
getCartItemsFor: aCart
	
	
	
	^aCart items.
	! !

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:28:24'!
ERROR!
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:28:50' prior: 50886072!
test07AddBookRefreshesTimeOfCart
	| storeInterface cartID cartItems |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	
	self advanceMinutesBy: 15.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	self advanceMinutesBy: 20.
	
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	cartItems := storeInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: cartItems includes:(storeFactory itemSellByTheStore).
	self assert: 2 equals: cartItems second. 
	

	! !
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:30:19' prior: 50887173!
test07AddBookRefreshesTimeOfCart
	| storeInterface cartID cartItems item |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	item := storeInterface itemSellByTheStore.
	 
	self advanceMinutesBy: 15.
	storeInterface add: 1 of: item toCart: cartID.
	self advanceMinutesBy: 20.
	
	storeInterface add: 1 of: item toCart: cartID.
	
	cartItems := storeInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: cartItems includes: item.
	self assert: 2 equals: (cartItems contents at: item). 
	

	! !

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:30:32'!
ERROR!
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:30:46' prior: 50887200!
test07AddBookRefreshesTimeOfCart
	| storeInterface cartID cartItems item |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	item := storeFactory itemSellByTheStore.
	 
	self advanceMinutesBy: 15.
	storeInterface add: 1 of: item toCart: cartID.
	self advanceMinutesBy: 20.
	
	storeInterface add: 1 of: item toCart: cartID.
	
	cartItems := storeInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: cartItems includes: item.
	self assert: 2 equals: (cartItems contents at: item). 
	

	! !

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:30:48'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:30:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:30:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:30:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:30:52'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:30:59'!
FAILURE!
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:33:26' prior: 50885978!
test04AddBookToCart
	| storeInterface cartID cartItems item |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	item := storeFactory itemSellByTheStore. 
	
	storeInterface add: 1 of: item toCart: cartID  .
	cartItems := storeInterface listCart: cartID.
	
	
	self assert: cartItems includes: item.
	self assert: 1 equals: (cartItems occurrencesOf: item).
	! !

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:33:27'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:33:30'!
FAILURE!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:33:30'!
FAILURE!
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:35:06' prior: 50886000!
test05AddMultipleBooksToCart
	| storeInterface cartID cartItems item1 item2 |
	
	item1 := storeFactory itemSellByTheStore. 
	item2 := storeFactory anotherItemSellByTheStore.
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	
	storeInterface add: 1 of: item1 toCart: cartID  .
	storeInterface add: 1 of: item2 toCart: cartID  .
	cartItems := storeInterface listCart: cartID.
	
	self assert: 2 equals: cartItems size.
	self assert: 1 equals: (cartItems occurrencesOf: item1).
	self assert: 1 equals: (cartItems occurrencesOf: item2).
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:35:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:35:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:35:09'!
FAILURE!
!StoreInterfaceTest methodsFor: 'list cart' stamp: 'BAG 6/24/2021 01:35:43' prior: 50886120!
test09ListCartRefreshesTime
	| storeInterface cartID cartItems |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := storeInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := storeInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: 1 equals: (cartItems occurrencesOf:(storeFactory itemSellByTheStore)).
	

	! !

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:35:44'!
FAILURE!
!StoreInterfaceTest methodsFor: 'list cart' stamp: 'BAG 6/24/2021 01:35:59' prior: 50887621!
test09ListCartRefreshesTime
	| storeInterface cartID cartItems |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 15.
	cartItems := storeInterface listCart: cartID.
	
	self advanceMinutesBy: 20.
	cartItems := storeInterface listCart: cartID.
	 
	self assert: 1 equals: cartItems size.
	self assert: 1 equals: (cartItems occurrencesOf:(storeFactory itemSellByTheStore)).
	

	! !

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:36:01'!
PASSED!
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:36:34' prior: 50887363!
test04AddBookToCart
	| storeInterface cartID cartItems item |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword. 
	item := storeFactory itemSellByTheStore. 
	
	storeInterface add: 1 of: item toCart: cartID  .
	cartItems := storeInterface listCart: cartID.
	
	self assert: 1 equals: cartItems size.
	self assert: 1 equals: (cartItems occurrencesOf: item).
	! !
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:37:17' prior: 50887229!
test07AddBookRefreshesTimeOfCart
	| storeInterface cartID cartItems item |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	item := storeFactory itemSellByTheStore.
	 
	self advanceMinutesBy: 15.
	storeInterface add: 1 of: item toCart: cartID.
	self advanceMinutesBy: 20.
	
	storeInterface add: 1 of: item toCart: cartID.
	
	cartItems := storeInterface listCart: cartID.
	 
	self assert: 1 equals: cartItems size.
	self assert: 2 equals: (cartItems occurrencesOf: item). 
	

	! !

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:37:19'!
FAILURE!
!StoreInterfaceTest methodsFor: 'add to cart' stamp: 'BAG 6/24/2021 01:37:36' prior: 50887698!
test07AddBookRefreshesTimeOfCart
	| storeInterface cartID cartItems item |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	item := storeFactory itemSellByTheStore.
	 
	self advanceMinutesBy: 15.
	storeInterface add: 1 of: item toCart: cartID.
	self advanceMinutesBy: 20.
	
	storeInterface add: 1 of: item toCart: cartID.
	
	cartItems := storeInterface listCart: cartID.
	 
	self assert: 2 equals: cartItems size.
	self assert: 2 equals: (cartItems occurrencesOf: item). 
	

	! !

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:37:38'!
PASSED!
!StoreInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:38:30' prior: 50886763!
listCart: aCartID
	
	self assertCartIsValid: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	^(activeCarts at: aCartID) items.
	
	! !
!StoreInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:38:36' prior: 50887856!
listCart: aCartID
	self assertCartIsValid: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	^(activeCarts at: aCartID) items.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:38:42'!
PASSED!

!methodRemoval: StoreInterface #getCartItemsFor: stamp: 'BAG 6/24/2021 01:38:48'!
getCartItemsFor: aCart
	
	
	
	^aCart items.
	!
!StoreInterface methodsFor: 'private - operations' stamp: 'BAG 6/24/2021 01:41:02' prior: 50883161!
getPurchasesByClient: aClientSales	
	| purchasesByClient purchases |
	purchases := OrderedCollection new.
	
	purchasesByClient := aClientSales inject: Bag new into: [ :books :sale |		books addAll: (sale books). books				].
	
	(purchasesByClient contents) associationsDo: [:item |
			purchases add: item key.
			purchases add: item value.
			].
	
	^purchases! !
!StoreInterface methodsFor: 'private - operations' stamp: 'BAG 6/24/2021 01:43:44' prior: 50887978!
getPurchasesByClient: aClientSales	
	| purchasesByClient |
	
	purchasesByClient := aClientSales inject: Bag new into: [ :books :sale |		books addAll: (sale books). books				].
	
	^purchasesByClient contents! !
!StoreInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:54:32' prior: 50883219!
listPurchases: aUsername password: aPassword
	| clientSales |
	self assertAuthenticationForUser: aUsername password: aPassword. 
	
	clientSales := (salesBook select: [:sale | sale clientName = aUsername]).
	
	^self purchasesForClientSales: clientSales. 
	! !
!StoreInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:54:51'!
purchasesForClientSales: clientSales
	
	| purchases total |
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := Dictionary new.
	purchases at: 'items' put: (self getPurchasesByClient: clientSales).
	purchases at: 'total' put: total.
	
	^purchases. 
	! !
!StoreInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 01:55:13' prior: 50888014!
purchasesForClientSales: clientSales
	| purchases total |
	
	total := clientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := Dictionary new.
	purchases at: 'items' put: (self getPurchasesByClient: clientSales).
	purchases at: 'total' put: total.
	
	^purchases. 
	! !
!StoreInterface methodsFor: 'private - operations' stamp: 'BAG 6/24/2021 01:56:20' prior: 50888026!
purchasesForClientSales: aClientSales
	| purchases total items |
	
	items := aClientSales inject: Bag new into: [ :books :sale |		books addAll: (sale books). books				].
	total := aClientSales sum: [:sale | sale total ] ifEmpty: [0].
	
	purchases := Dictionary new.
	purchases at: 'items' put: items contents.
	purchases at: 'total' put: total.
	
	^purchases. 
	! !

!methodRemoval: StoreInterface #getPurchasesByClient: stamp: 'BAG 6/24/2021 01:56:29'!
getPurchasesByClient: aClientSales	
	| purchasesByClient |
	
	purchasesByClient := aClientSales inject: Bag new into: [ :books :sale |		books addAll: (sale books). books				].
	
	^purchasesByClient contents!

Object subclass: #StoreInterface
	instanceVariableNames: 'userAuthenticator nextID nextTransactionID activeCarts catalog clock lastTimeUsedForCart merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'BAG 6/24/2021 01:58:23'!
Object subclass: #StoreInterface
	instanceVariableNames: 'userAuthenticator nextID nextTransactionID activeCarts catalog clock lastTimeUsedForCart merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'BAG 6/24/2021 01:58:33' prior: 50875609!
initializeWithAuthenticator: aUserAuthenticator catalog: aCatalog clock: aClock merchantProcessor: aMerchantProcessor   
	userAuthenticator := aUserAuthenticator.
	nextID := 0.
	nextTransactionID := 0.
	activeCarts := Dictionary new.
	lastTimeUsedForCart := Dictionary new.
	salesBook := OrderedCollection new.
	catalog := aCatalog. 
	clock := aClock.
	merchantProcessor := aMerchantProcessor. 
	
	! !
!StoreInterface methodsFor: 'cart creation' stamp: 'BAG 6/24/2021 01:59:47' prior: 50876338!
createCartForUser: aUsername withPassword: aPassword 
	self assertAuthenticationForUser: aUsername password: aPassword. 
	
	nextID := nextID +1.
	activeCarts at: nextID put: (Cart acceptingItemsOf: catalog).
	lastTimeUsedForCart at: nextID put: clock actualTime.
	
	^nextID.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 01:59:48'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 01:59:48'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 01:59:48'!
FAILURE!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 01:59:48'!
FAILURE!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 01:59:48'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 01:59:48'!
FAILURE!
!StoreInterface methodsFor: 'operations' stamp: 'BAG 6/24/2021 02:00:21' prior: 50885392!
checkOut: aCartID creditCard: creditCardNumber expiredOnMonth: expirationMonth andYear: expirationYear owner: ownerName
	| cashier card |
	self assertValidCreditCardNumber: creditCardNumber. 
	self assertCartIsValid: aCartID. 
	self refreshLastTimeUsed: aCartID.
	
	card := CreditCard expiringOnMonth: expirationMonth andYear: expirationYear for: ownerName.
	cashier := Cashier toCheckout: (activeCarts at: aCartID) charging: card throught: merchantProcessor on: (clock today)  registeringOn: salesBook.
	cashier checkOut. 
	
	self removeCart: aCartID.
	
	nextTransactionID := nextTransactionID +1.
	^nextTransactionID 
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 02:04:00' prior: 50886176!
test10CheckoutCartWithOneItem
	| storeInterface cartID purchases items |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	items := purchases at: 'items'.
	
	self assert: (storeFactory itemSellByTheStorePrice) equals: (purchases at: 'total').
	self assert: 1 equals: (items occurrencesOf: (storeFactory itemSellByTheStore)).
	
	! !

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:04:05'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:04:05'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:04:36'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:04:36'!
FAILURE!

storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword!
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 02:06:47' prior: 50888233!
test10CheckoutCartWithOneItem
	| storeInterface cartID purchases items |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	items := (purchases at: 'items').
	
	self assert: (storeFactory itemSellByTheStorePrice) equals: (purchases at: 'total').
	self assert: 1 equals: (items occurrencesOf: (storeFactory itemSellByTheStore)).
	
	! !

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:06:48'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:07:03'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:07:03'!
FAILURE!

storeFactory itemSellByTheStore!
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 02:07:36' prior: 50888280!
test10CheckoutCartWithOneItem
	| storeInterface cartID purchases items |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	items := (purchases at: 'items').
	
	self assert: (storeFactory itemSellByTheStorePrice) equals: (purchases at: 'total').
	self assert: 1 equals: (items at: (storeFactory itemSellByTheStore)).
	
	! !

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:07:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 02:09:51' prior: 50886209!
test11CheckoutTwoCartsForSameClient
	| storeInterface cartID1 cartID2 purchases items expectedTotal |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	storeInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	storeInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	items := (purchases at: 'items').
	expectedTotal := 2* storeFactory itemSellByTheStorePrice.
	 
	self assert:  2 equals: (items at: storeFactory itemSellByTheStore).
	self assert: expectedTotal equals: (purchases at: 'total').
	
	! !

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 02:09:56'!
PASSED!
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 02:11:11' prior: 50886255!
test12CheckoutWithMultipleItems
	| storeInterface cartID purchases expectedTotal items |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	storeInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	items := (purchases at: 'items').
	expectedTotal := 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert:  5 equals: (items at: storeFactory itemSellByTheStore).
	self assert:  5 equals: (items at: storeFactory anotherItemSellByTheStore).
	self assert: expectedTotal equals: (purchases at: 'total').
	
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 02:13:50' prior: 50886295!
test13CheckoutCartsForTwoClient
	| storeInterface cartID1 cartID2 purchasesClient1 purchasesClient2 items1 items2 |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := storeInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	storeInterface checkOut: cartID1 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	storeInterface checkOut: cartID2 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	items1 := (purchasesClient1 at: 'items').
	purchasesClient2 := storeInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	items2 := (purchasesClient2 at: 'items').
	 
	self assert:  1 equals: (items1 at: storeFactory itemSellByTheStore).
	self assert:  1 equals: (items2 at: storeFactory itemSellByTheStore).
	self assert: storeFactory itemSellByTheStorePrice equals: (purchasesClient1 at: 'total').
	self assert: storeFactory itemSellByTheStorePrice equals: (purchasesClient2 at: 'total').
	
	
	! !

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 02:14:36'!
FAILURE!
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 02:16:24' prior: 50886406!
test17CanNotCheckoutWithInvalidExpirationDate
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [storeInterface checkOut: cartID 
			    creditCard: '123456789123456' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			| purchases |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
			purchases := (storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword).
			self assert: 0 equals: (purchases at: 'items') size.
			self assert: 0 equals: (purchases at: 'total').
		].
	! !

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 02:16:26'!
PASSED!

Object subclass: #StoreInterface
	instanceVariableNames: 'userAuthenticator nextID nextTransactionID activeCarts clock lastTimeUsedForCart merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'BAG 6/24/2021 02:18:17'!
Object subclass: #StoreInterface
	instanceVariableNames: 'userAuthenticator nextID nextTransactionID activeCarts clock lastTimeUsedForCart merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreInterface
	instanceVariableNames: 'userAuthenticator nextID nextTransactionID activeCarts catalog clock lastTimeUsedForCart merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'BAG 6/24/2021 02:18:45'!
Object subclass: #StoreInterface
	instanceVariableNames: 'userAuthenticator nextID nextTransactionID activeCarts catalog clock lastTimeUsedForCart merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 02:18:48'!
PASSED!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'BAG 6/24/2021 02:20:58'!
canNotDebitErrorDescription
	^'No se puede realizar el débito'! !

	^'No se puede realizar el débito'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 02:21:04'!
PASSED!

----SNAPSHOT----(24 June 2021 02:21:21) CuisUniversity-4532.image priorSource: 17484028!
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 02:23:49'!
test18CanNotCheckoutWithInvalidCreditCardNumber
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [storeInterface checkOut: cartID 
			    creditCard: '1234567891234' 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			| purchases |
			self assert: (StoreInterface canNotDebitErrorDescription ) equals: anError messageText.
			purchases := (storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword).
			self assert: 0 equals: (purchases at: 'items') size.
			self assert: 0 equals: (purchases at: 'total').
		].
	! !

!testRun: #StoreInterfaceTest #test18CanNotCheckoutWithInvalidCreditCardNumber stamp: 'BAG 6/24/2021 02:23:50'!
FAILURE!
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 02:24:02' prior: 50888846!
test18CanNotCheckoutWithInvalidCreditCardNumber
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [storeInterface checkOut: cartID 
			    creditCard: '1234567891234' 
			    expiredOnMonth: 12 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			| purchases |
			self assert: (StoreInterface canNotDebitErrorDescription ) equals: anError messageText.
			purchases := (storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword).
			self assert: 0 equals: (purchases at: 'items') size.
			self assert: 0 equals: (purchases at: 'total').
		].
	! !

!testRun: #StoreInterfaceTest #test18CanNotCheckoutWithInvalidCreditCardNumber stamp: 'BAG 6/24/2021 02:24:04'!
FAILURE!

aCreditCardNumber isNumber!

self isNumber!

self isNumber!

self asNumber!
!StoreInterface methodsFor: 'assertions' stamp: 'BAG 6/24/2021 02:26:15' prior: 50883517!
assertValidCreditCardNumber: aCreditCardNumber

	^ ((aCreditCardNumber asNumber numberOfDigitsInBase: 10) = 16) ifFalse: [self error: self class canNotDebitErrorDescription ]! !

((aCreditCardNumber asNumber numberOfDigitsInBase: 10) = 16)!

!testRun: #StoreInterfaceTest #test18CanNotCheckoutWithInvalidCreditCardNumber stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 02:26:30'!
ERROR!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 02:26:30'!
ERROR!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 02:26:30'!
ERROR!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 02:26:30'!
ERROR!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 02:26:30'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 02:26:30'!
ERROR!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 02:26:30'!
ERROR!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 02:26:30'!
FAILURE!

!testRun: #StoreInterfaceTest #test18CanNotCheckoutWithInvalidCreditCardNumber stamp: 'BAG 6/24/2021 02:26:30'!
PASSED!

----SNAPSHOT----(24 June 2021 02:27:31) CuisUniversity-4532.image priorSource: 17830151!

----SNAPSHOT----(24 June 2021 02:28:33) CuisUniversity-4532.image priorSource: 17836575!

----QUIT----(24 June 2021 02:28:37) CuisUniversity-4532.image priorSource: 17836665!

----STARTUP---- (24 June 2021 11:05:30) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/24/2021 11:06:31'!
validCreditCardNumber
	
	^'1234567891234567'.! !

'0034567891234567' asNumber!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'BAG 6/24/2021 11:07:05'!
invalidCreditCardNumber
	
	^'0034567891234567'.! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 11:07:45' prior: 50888322!
test10CheckoutCartWithOneItem
	| storeInterface cartID purchases items |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID 
			    creditCard: (storeFactory validCreditCardNumber) 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	items := (purchases at: 'items').
	
	self assert: (storeFactory itemSellByTheStorePrice) equals: (purchases at: 'total').
	self assert: 1 equals: (items at: (storeFactory itemSellByTheStore)).
	
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 11:07:58' prior: 50888356!
test11CheckoutTwoCartsForSameClient
	| storeInterface cartID1 cartID2 purchases items expectedTotal |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	storeInterface checkOut: cartID1 
			    creditCard: (storeFactory validCreditCardNumber)  
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	storeInterface checkOut: cartID2 
			    creditCard: (storeFactory validCreditCardNumber) 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	items := (purchases at: 'items').
	expectedTotal := 2* storeFactory itemSellByTheStorePrice.
	 
	self assert:  2 equals: (items at: storeFactory itemSellByTheStore).
	self assert: expectedTotal equals: (purchases at: 'total').
	
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 11:08:10' prior: 50888404!
test12CheckoutWithMultipleItems
	| storeInterface cartID purchases expectedTotal items |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 5 of: (storeFactory itemSellByTheStore) toCart: cartID.
	storeInterface add: 5 of: (storeFactory anotherItemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID
			    creditCard: (storeFactory validCreditCardNumber)  
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	purchases := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	items := (purchases at: 'items').
	expectedTotal := 5*(storeFactory itemSellByTheStorePrice + storeFactory anotherItemSellByTheStorePrice).
	 
	self assert:  5 equals: (items at: storeFactory itemSellByTheStore).
	self assert:  5 equals: (items at: storeFactory anotherItemSellByTheStore).
	self assert: expectedTotal equals: (purchases at: 'total').
	
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 11:08:24' prior: 50888443!
test13CheckoutCartsForTwoClient
	| storeInterface cartID1 cartID2 purchasesClient1 purchasesClient2 items1 items2 |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID1 := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	cartID2 := storeInterface createCartForUser: storeFactory anotherValidUsername withPassword: storeFactory anotherValidPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID1.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID2.
	
	storeInterface checkOut: cartID1 
			    creditCard: (storeFactory validCreditCardNumber)  
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername .
			
	storeInterface checkOut: cartID2 
			    creditCard: (storeFactory validCreditCardNumber) 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory anotherValidUsername .
			
	purchasesClient1 := storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword.
	items1 := (purchasesClient1 at: 'items').
	purchasesClient2 := storeInterface listPurchases: storeFactory anotherValidUsername password: storeFactory anotherValidPassword.
	items2 := (purchasesClient2 at: 'items').
	 
	self assert:  1 equals: (items1 at: storeFactory itemSellByTheStore).
	self assert:  1 equals: (items2 at: storeFactory itemSellByTheStore).
	self assert: storeFactory itemSellByTheStorePrice equals: (purchasesClient1 at: 'total').
	self assert: storeFactory itemSellByTheStorePrice equals: (purchasesClient2 at: 'total').
	
	
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 11:08:30' prior: 50886346!
test14CanNotCheckoutExpiredCart
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self advanceMinutesBy: 31.
	
	self should: [storeInterface checkOut: cartID 
			    creditCard: (storeFactory validCreditCardNumber)  
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 11:09:42' prior: 50886374!
test16CanNotCheckoutSameCartTwice
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID 
			    creditCard: (storeFactory validCreditCardNumber) 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
			
	
	self should: [storeInterface checkOut: cartID 
			    creditCard: (storeFactory validCreditCardNumber)
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface cartDoesNotExistErrorDescription) equals: anError messageText.
		].! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 11:09:49' prior: 50888502!
test17CanNotCheckoutWithInvalidExpirationDate
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [storeInterface checkOut: cartID 
			    creditCard: (storeFactory validCreditCardNumber) 
			    expiredOnMonth: 13 
			    andYear: 202  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			| purchases |
			self assert: (CreditCard invalidExpirationDateErrorDescription ) equals: anError messageText.
			purchases := (storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword).
			self assert: 0 equals: (purchases at: 'items') size.
			self assert: 0 equals: (purchases at: 'total').
		].
	! !
!StoreInterfaceTest methodsFor: 'checkout cart' stamp: 'BAG 6/24/2021 11:09:58' prior: 50888884!
test18CanNotCheckoutWithInvalidCreditCardNumber
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	self should: [storeInterface checkOut: cartID 
			    creditCard: (storeFactory invalidCreditCardNumber) 
			    expiredOnMonth: 12 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	 ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
			| purchases |
			self assert: (StoreInterface canNotDebitErrorDescription ) equals: anError messageText.
			purchases := (storeInterface listPurchases: storeFactory validUsername password: storeFactory validPassword).
			self assert: 0 equals: (purchases at: 'items') size.
			self assert: 0 equals: (purchases at: 'total').
		].
	! !

!testRun: #StoreInterfaceTest #test18CanNotCheckoutWithInvalidCreditCardNumber stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 11:10:00'!
ERROR!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test18CanNotCheckoutWithInvalidCreditCardNumber stamp: 'BAG 6/24/2021 11:10:00'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 11:10:00'!
ERROR!
!StoreInterfaceTest methodsFor: 'list purchases' stamp: 'BAG 6/24/2021 11:10:13' prior: 50886146!
test15CanNotListPurchasesWithInvalidCredentials
	| storeInterface cartID |
	
	storeInterface := StoreInterface withAuthenticator: self catalog: storeFactory defaultCatalog clock: self merchantProcessor: self.
	cartID := storeInterface createCartForUser: storeFactory validUsername withPassword: storeFactory validPassword.
	storeInterface add: 1 of: (storeFactory itemSellByTheStore) toCart: cartID.
	
	storeInterface checkOut: cartID 
			    creditCard: (storeFactory validCreditCardNumber) 
			    expiredOnMonth: 06 
			    andYear: 2021  
			    owner: storeFactory validUsername.
	
	self should: [ 	storeInterface listPurchases: 'invalid user' password: 'invalid password'. ]  
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [:anError |
		self assert: (StoreInterface InvalidCredentialsErrorDescription) equals: anError messageText.
		].
	! !

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 11:10:14'!
PASSED!

!testRun: #StoreInterfaceTest #test18CanNotCheckoutWithInvalidCreditCardNumber stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test18CanNotCheckoutWithInvalidCreditCardNumber stamp: 'BAG 6/24/2021 11:10:20'!
PASSED!

----SNAPSHOT----(24 June 2021 11:10:31) CuisUniversity-4532.image priorSource: 17836755!

----QUIT----(24 June 2021 11:17:13) CuisUniversity-4532.image priorSource: 17855365!

----STARTUP---- (24 June 2021 16:13:49) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!Sale class methodsFor: 'instance creation' stamp: 'BAG 6/24/2021 16:33:36' prior: 50875305!
of: aTotal withBooks: anBooks clientName: aClientName

	"should assert total is not negative or 0!!"
	self assertValidTotal: aTotal.
	^self new initializeTotal: aTotal books: anBooks clientName: aClientName ! !
!Sale class methodsFor: 'instance creation' stamp: 'BAG 6/24/2021 16:34:32'!
assertValidTotal: aTotal
	aTotal > 0 ifFalse:[ self error: self InvalidTotalErrorDescription]! !
!Sale class methodsFor: 'instance creation' stamp: 'BAG 6/24/2021 16:34:50'!
InvalidTotalErrorDescription
	^'El monto total es inválido'! !
!Sale class methodsFor: 'instance creation' stamp: 'BAG 6/24/2021 16:36:35' prior: 50889641!
of: aTotal withBooks: anBooks clientName: aClientName
	self assertValidTotal: aTotal.

	^self new initializeTotal: aTotal books: anBooks clientName: aClientName ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test01CanNotCreateCartWithInvalidUser stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02CanCreateCartWithValidCredentials stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03CanCreateMultipleCart stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04AddBookToCart stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AddMultipleBooksToCart stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06CanNotAddBookToExpiredCart stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07AddBookRefreshesTimeOfCart stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotListExpiredCart stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09ListCartRefreshesTime stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10CheckoutCartWithOneItem stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test11CheckoutTwoCartsForSameClient stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutWithMultipleItems stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test13CheckoutCartsForTwoClient stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test14CanNotCheckoutExpiredCart stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test15CanNotListPurchasesWithInvalidCredentials stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test16CanNotCheckoutSameCartTwice stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test17CanNotCheckoutWithInvalidExpirationDate stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

!testRun: #StoreInterfaceTest #test18CanNotCheckoutWithInvalidCreditCardNumber stamp: 'BAG 6/24/2021 16:36:39'!
PASSED!

----SNAPSHOT----(24 June 2021 16:36:51) CuisUniversity-4532.image priorSource: 17855455!