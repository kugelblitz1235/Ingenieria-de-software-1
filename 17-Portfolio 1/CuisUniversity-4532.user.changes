

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (3 May 2021 20:51:49) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!


----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\ISW1-2021-1C-1erParcial.st----!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'TT 5/3/2021 20:52:18'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'TT 5/3/2021 20:52:18'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'TT 5/3/2021 20:52:19'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'TT 5/3/2021 20:52:19'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'TT 5/3/2021 20:52:19'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'TT 5/3/2021 20:52:19'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'TT 5/3/2021 20:52:19'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'TT 5/3/2021 20:52:19'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'TT 5/3/2021 20:52:20'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'TT 5/3/2021 20:52:20'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'TT 5/3/2021 20:52:20'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'TT 5/3/2021 20:52:20'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'TT 5/3/2021 20:52:20'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'TT 5/3/2021 20:52:20'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'TT 5/3/2021 20:52:20'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'TT 5/3/2021 20:52:20'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'TT 5/3/2021 20:52:20'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'TT 5/3/2021 20:52:20'!
PASSED!

----STARTUP---- (3 May 2021 20:57:19) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!


----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\ISW1-2021-1C-1erParcial.st----!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'dsa 5/3/2021 20:57:39'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'dsa 5/3/2021 20:57:39'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'dsa 5/3/2021 20:57:39'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'dsa 5/3/2021 20:57:40'!
PASSED!

----STARTUP---- (3 May 2021 20:59:40) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!


----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\ISW1-2021-1C-1erParcial.st----!

----STARTUP---- (3 May 2021 21:03:14) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!


----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\ISW1-2021-1C-1erParcial.st----!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'sad 5/3/2021 21:03:31'!
PASSED!

----STARTUP---- (6 May 2021 20:07:54) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!


TestCase subclass: #Rot13
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

!classDefinition: #Rot13 category: 'Cuis-University-Tests' stamp: 'TT 5/6/2021 20:14:52'!
TestCase subclass: #Rot13
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

TestCase subclass: #Rot13
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #Rot13 category: '' stamp: 'TT 5/6/2021 20:15:02'!
TestCase subclass: #Rot13
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestCase subclass: #Rot13
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!

!classDefinition: #Rot13 category: 'Rot13' stamp: 'TT 5/6/2021 20:15:14'!
TestCase subclass: #Rot13
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!

TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!

!classDefinition: #Rot13Test category: 'Rot13' stamp: 'TT 5/6/2021 20:15:31'!
TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!

!classRemoval: #Rot13 stamp: 'TT 5/6/2021 20:15:34'!
TestCase subclass: #Rot13
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!
!Rot13Test methodsFor: 'no messages' stamp: 'TT 5/6/2021 20:18:41'!
test01

	self assert: '' asRot13 equals: ''! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 20:18:57'!
ERROR!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 20:19:19'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 20:21:39'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 20:22:55' prior: 50862464!
asRot13
	^self! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 20:22:59'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 20:22:59'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 20:26:20' prior: 50862468!
asRot13
	^''! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 20:38:17' prior: 50862476!
asRot13
	self = 'a' ifTrue: [^'n'].
	^''! !
!Rot13Test methodsFor: 'testing' stamp: 'TT 5/6/2021 20:38:45'!
test02

	self assert: 'n' equals: 'a' asRot13 ! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 20:38:47'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 20:38:47'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'TT 5/6/2021 20:47:15'!
test03

	self assert: 'o' equals: 'b' asRot13 ! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 20:47:24' prior: 50862479!
asRot13
	self = 'a' ifTrue: [^'n'].
	self = 'b' ifTrue: [^'o'].
	^''! !

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 20:47:39'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 20:47:39'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 20:47:40'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 20:47:40'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 20:53:27' prior: 50862495!
asRot13
	self = '' ifTrue: [^''].
	^(Character asciiValue: (self first asciiValue + 13)) asString! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 20:53:30' prior: 50862509!
asRot13
	self = '' ifTrue: [^''].
	^(Character asciiValue: (self first asciiValue + 13)) asString.! !

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 20:53:36'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 20:53:36'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 20:53:36'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 20:53:36'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'TT 5/6/2021 21:07:22'!
test04

	self assert: 'm' equals: 'z' asRot13 ! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:07:39' prior: 50862515!
asRot13
	self = '' ifTrue: [^''].
	self = 'z' ifTrue: [^'m'].
	^(Character asciiValue: (self first asciiValue + 13)) asString.! !

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 21:07:45'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 21:07:45'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 21:07:45'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 21:07:45'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 21:07:45'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'TT 5/6/2021 21:13:05'!
test05

	self assert: 'p' equals: 'C' asRot13 ! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:13:17' prior: 50862533!
asRot13
	self = '' ifTrue: [^''].
	self = 'z' ifTrue: [^'m'].
	self = 'p' ifTrue: [^'c'].
	^(Character asciiValue: (self first asciiValue + 13)) asString.! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:20:45' prior: 50862554!
asRot13
	self = '' ifTrue: [^''].
	self > 'm' ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString]
	^(Character asciiValue: (self first asciiValue + 13)) asString.! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:20:57' prior: 50862562!
asRot13
	self = '' ifTrue: [^''].
	self > 'm' ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
	^(Character asciiValue: (self first asciiValue + 13)) asString.! !
!Rot13Test methodsFor: 'testing' stamp: 'TT 5/6/2021 21:21:09' prior: 50862550!
test05

	self assert: 'p' equals: 'c' asRot13 ! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 21:21:12'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 21:21:12'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 21:21:12'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 21:21:12'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 21:21:12'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:25:22' prior: 50862571!
asRot13
	self = '' ifTrue: [^''].
	self first asciiValue > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
	^(Character asciiValue: (self first asciiValue + 13)) asString.! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 21:25:30'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 21:25:30'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 21:25:30'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 21:25:30'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 21:25:30'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'TT 5/6/2021 21:30:14'!
test06

	self assert: 'm' equals: 'z' asRot13 ! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:34:08' prior: 50862595!
asRot13
	self = '' ifTrue: [^''].
	self = ' ' ifTrue: [^' '].
	self first asciiValue > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
	^(Character asciiValue: (self first asciiValue + 13)) asString.! !
!Rot13Test methodsFor: 'testing' stamp: 'TT 5/6/2021 21:34:20'!
test07

	self assert: ' ' equals: ' ' asRot13 ! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 21:34:22'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 21:34:22'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 21:34:22'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 21:34:22'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 21:34:22'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 21:34:23'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 21:34:23'!
PASSED!
!Rot13Test methodsFor: 'testing' stamp: 'TT 5/6/2021 21:37:45'!
test08

	self assert: '?' equals: '?' asRot13 ! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:37:53' prior: 50862619!
asRot13
	self = '' ifTrue: [^''].
	self = ' ' ifTrue: [^' '].
	self = '?' ifTrue: [^'?'].
	self first asciiValue > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
	^(Character asciiValue: (self first asciiValue + 13)) asString.! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 21:38:13'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 21:38:13'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 21:38:13'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 21:38:13'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 21:38:13'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 21:38:13'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 21:38:13'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'TT 5/6/2021 21:38:13'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:41:33' prior: 50862652!
asRot13
	self first asciiValue > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
	self first asciiValue > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue + 13)) asString].
	! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 21:41:36'!
ERROR!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 21:41:36'!
FAILURE!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 21:41:37'!
FAILURE!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 21:41:37'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 21:41:37'!
FAILURE!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 21:41:37'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 21:41:37'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'TT 5/6/2021 21:41:37'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:47:12' prior: 50862681!
asRot13
	self == '' ifTrue: [^''].
	(($a asciiValue <= self first asciiValue) and: [self first asciiValue <= $z asciiValue ]) ifTrue:[
		self first asciiValue > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
		self first asciiValue <= $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue + 13)) asString].
	].
	
	
	! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:47:22' prior: 50862709!
asRot13
	self == '' ifTrue: [^''].
	(($a asciiValue <= self first asciiValue) and: 
	[self first asciiValue <= $z asciiValue ]) ifTrue: [
		self first asciiValue > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
		self first asciiValue <= $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue + 13)) asString].
	].
	
	
	! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:52:58' prior: 50862724!
asRot13
	| firstAsciiValue |
	self == '' ifTrue: [^''].
	
	firstAsciiValue := self first asciiValue.
	(($a asciiValue <= firstAsciiValue) and: 
	[firstAsciiValue <= $z asciiValue ]) ifTrue: [
		firstAsciiValue > $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
		firstAsciiValue <= $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue + 13)) asString].
	].
	
	
	! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:53:06' prior: 50862739!
asRot13
	| firstAsciiValue |
	self == '' ifTrue: [^''].
	
	firstAsciiValue := self first asciiValue.
	(($a asciiValue <= firstAsciiValue) and: 
	[firstAsciiValue <= $z asciiValue ]) ifTrue: [
		firstAsciiValue > $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString].
		firstAsciiValue <= $m asciiValue ifTrue: [^(Character asciiValue: (self first asciiValue + 13)) asString].
	].
	
	
	! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:53:10' prior: 50862755!
asRot13
	| firstAsciiValue |
	self == '' ifTrue: [^''].
	
	firstAsciiValue := self first asciiValue.
	(($a asciiValue <= firstAsciiValue) and: 
	[firstAsciiValue <= $z asciiValue ]) ifTrue: [
		firstAsciiValue > $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString].
		firstAsciiValue <= $m asciiValue ifTrue: [^(Character asciiValue: (firstAsciiValue + 13)) asString].
	].
	
	
	! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 21:56:24' prior: 50862771!
asRot13
	| firstAsciiValue |
	self == '' ifTrue: [^''].
	firstAsciiValue := self first asciiValue.
	
	(($a asciiValue <= firstAsciiValue) and: [firstAsciiValue <= $z asciiValue ]) ifTrue: [
		
		firstAsciiValue > $m asciiValue 
		ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString] 
		ifFalse: [^(Character asciiValue: (firstAsciiValue + 13)) asString].
	].
	
	
	! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 22:00:20' prior: 50862787!
asRot13
	| firstAsciiValue |
	self == '' ifTrue: [^''].
	self == 'A' ifTrue: [^'N'].
	self == 'N' ifTrue: [^'A'].
	
	firstAsciiValue := self first asciiValue.
	
	(($a asciiValue <= firstAsciiValue) and: [firstAsciiValue <= $z asciiValue ]) ifTrue: [
		
		firstAsciiValue > $m asciiValue 
		ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString] 
		ifFalse: [^(Character asciiValue: (firstAsciiValue + 13)) asString].
	].
	
	
	! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:00:27'!
ERROR!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 22:00:27'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 22:00:27'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 22:00:27'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 22:00:27'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 22:00:27'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 22:00:27'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'TT 5/6/2021 22:00:27'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:00:27'!
ERROR!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:00:58'!
ERROR!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 22:00:58'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 22:00:59'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 22:00:59'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 22:00:59'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 22:00:59'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 22:00:59'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'TT 5/6/2021 22:00:59'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:00:59'!
ERROR!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:02:21'!
ERROR!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 22:02:21'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 22:02:21'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 22:02:21'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 22:02:21'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 22:02:21'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 22:02:21'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'TT 5/6/2021 22:02:21'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:02:21'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 22:02:26' prior: 50862802!
asRot13
	| firstAsciiValue |
	self = '' ifTrue: [^''].
	self = 'A' ifTrue: [^'N'].
	self = 'N' ifTrue: [^'A'].
	
	firstAsciiValue := self first asciiValue.
	
	(($a asciiValue <= firstAsciiValue) and: [firstAsciiValue <= $z asciiValue ]) ifTrue: [
		
		firstAsciiValue > $m asciiValue 
		ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString] 
		ifFalse: [^(Character asciiValue: (firstAsciiValue + 13)) asString].
	].
	
	
	! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:02:28'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 22:02:28'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 22:02:29'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 22:02:29'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 22:02:29'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 22:02:29'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 22:02:29'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'TT 5/6/2021 22:02:29'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:02:48'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 22:02:48'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 22:02:48'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 22:02:48'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 22:02:48'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 22:02:48'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 22:02:48'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'TT 5/6/2021 22:02:48'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:02:54'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:02:54'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 22:02:54'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 22:02:54'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 22:02:54'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 22:02:54'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 22:02:54'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 22:02:54'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'TT 5/6/2021 22:02:54'!
PASSED!

'' asRot13!
!Rot13Test methodsFor: 'testing' stamp: 'TT 5/6/2021 22:03:36'!
test12

	self assert: 'Z' equals: 'M' asRot13 ! !
!Rot13Test methodsFor: 'testing' stamp: 'TT 5/6/2021 22:04:27'!
test09

	self assert: 'N' equals: 'A' asRot13 ! !
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 22:06:00' prior: 50862877!
asRot13
	| firstAsciiValue |
	self = '' ifTrue: [^''].
	self = 'A' ifTrue: [^'N'].
	self = 'N' ifTrue: [^'A'].
	
	firstAsciiValue := self first asciiValue.
	
	(($a asciiValue <= firstAsciiValue) and: [firstAsciiValue <= $z asciiValue ]) ifTrue: [
		
		firstAsciiValue > $m asciiValue 
		ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString] 
		ifFalse: [^(Character asciiValue: (firstAsciiValue + 13)) asString].
	].
	
	(($A asciiValue <= firstAsciiValue) and: [firstAsciiValue <= $Z asciiValue ]) ifTrue: [
		
		firstAsciiValue > $M asciiValue 
		ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString] 
		ifFalse: [^(Character asciiValue: (firstAsciiValue + 13)) asString].
	].
	
	! !

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:06:04'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 22:06:04'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 22:06:04'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 22:06:05'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 22:06:05'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 22:06:05'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 22:06:05'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'TT 5/6/2021 22:06:05'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'TT 5/6/2021 22:06:05'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'TT 5/6/2021 22:06:05'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'TT 5/6/2021 22:06:31' prior: 50862956!
asRot13
	| firstAsciiValue |
	self = '' ifTrue: [^''].
	
	firstAsciiValue := self first asciiValue.
	
	(($a asciiValue <= firstAsciiValue) and: [firstAsciiValue <= $z asciiValue ]) ifTrue: [
		
		firstAsciiValue > $m asciiValue 
		ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString] 
		ifFalse: [^(Character asciiValue: (firstAsciiValue + 13)) asString].
	].
	
	(($A asciiValue <= firstAsciiValue) and: [firstAsciiValue <= $Z asciiValue ]) ifTrue: [
		
		firstAsciiValue > $M asciiValue 
		ifTrue: [^(Character asciiValue: (firstAsciiValue - 13)) asString] 
		ifFalse: [^(Character asciiValue: (firstAsciiValue + 13)) asString].
	].
	
	! !

!testRun: #Rot13Test #test12 stamp: 'TT 5/6/2021 22:06:34'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'TT 5/6/2021 22:06:34'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'TT 5/6/2021 22:06:34'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'TT 5/6/2021 22:06:35'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'TT 5/6/2021 22:06:35'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'TT 5/6/2021 22:06:35'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'TT 5/6/2021 22:06:35'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'TT 5/6/2021 22:06:35'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'TT 5/6/2021 22:06:35'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'TT 5/6/2021 22:06:35'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'TT 5/6/2021 22:06:35'!
PASSED!

----STARTUP---- (10 May 2021 17:13:41) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!


TestCase subclass: #DecimalToStringRomanNumberConvertionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

!classDefinition: #DecimalToStringRomanNumberConvertionTest category: 'Cuis-University-Tests' stamp: 'TT 5/10/2021 17:20:19'!
TestCase subclass: #DecimalToStringRomanNumberConvertionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

TestCase subclass: #DecimalToStringRomanNumberConvertionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman-Numbers-Integration'!

!classDefinition: #DecimalToStringRomanNumberConvertionTest category: 'Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:20:41'!
TestCase subclass: #DecimalToStringRomanNumberConvertionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman-Numbers-Integration'!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'no messages' stamp: 'TT 5/10/2021 17:22:05'!
test01
	
	self assert: 1 asRomanString equals: 'I'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:22:08'!
ERROR!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:23:42'!
asRomanString
	self shouldBeImplemented.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:23:58' prior: 50863093!
asRomanString
	^'I'! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:24:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:24:01'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 17:29:18'!
test02
	
	self assert: 2 asRomanString equals: 'II'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:29:19'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:29:41' prior: 50863098!
asRomanString
	self = 2 ifTrue: [^'II'].
	^'I'! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:29:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:29:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:29:51'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 17:30:42'!
test03
	
	self assert: 3 asRomanString equals: 'III'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:30:46'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:30:59' prior: 50863117!
asRomanString
	self = 2 ifTrue: [^'II'].
	self = 3 ifTrue: [^'III'].
	^'I'! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:31:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:31:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:31:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:31:01'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:37:57' prior: 50863141!
asRomanString
	^String streamContents: [ :stream |
		self timesRepeat: [ stream nextPut: $I ] ]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:37:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:38:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:38:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:38:00'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 17:39:26'!
test04
	
	self assert: 4 asRomanString equals: 'IV'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:40:02' prior: 50863160!
asRomanString
	^String streamContents: [ :stream |
		self = 4 ifTrue: [^'IV'].
		self timesRepeat: [ stream nextPut: $I ] ]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:40:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:40:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:40:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:40:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:40:05'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:42:47' prior: 50863185!
asRomanString
	^String streamContents: [ :stream |
		self timesRepeat: [ stream nextPut: $I ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		stream]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:42:48'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:43:01' prior: 50863208!
asRomanString
	^String streamContents: [ :stream |
		self timesRepeat: [ stream nextPut: $I ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		^stream]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:43:03'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:43:11' prior: 50863220!
asRomanString
	^String streamContents: [ :stream |
		self timesRepeat: [ stream nextPut: $I ].
		self = 4 ifTrue: [stream = 'IV'].
		^stream]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:43:13'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:43:25' prior: 50863232!
asRomanString
	^String streamContents: [ :stream |
		self timesRepeat: [ stream nextPut: $I ]
		self = 4 ifTrue: [stream nextPutAll: 'IV']]! !

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testOne stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'TT 5/10/2021 17:43:26'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #test32bitConversion stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #test32bitConversion2 stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #test32bitInfinities stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #test32bitNaN stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #test32bitRoundingMode stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #testArTanh stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #FloatTest #testArcTan stamp: 'TT 5/10/2021 17:43:27'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #FloatTest #testAsTrueFraction stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'TT 5/10/2021 17:43:28'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testOne stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'TT 5/10/2021 17:43:29'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #FloatTest #test32bitConversion stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:30'!
ERROR!

!testRun: #FloatTest #test32bitConversion2 stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:30'!
ERROR!

!testRun: #FloatTest #test32bitInfinities stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:30'!
ERROR!

!testRun: #FloatTest #test32bitNaN stamp: 'TT 5/10/2021 17:43:30'!
ERROR!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:30'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #FloatTest #test32bitRoundingMode stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #FloatTest #testE stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'TT 5/10/2021 17:43:30'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testArTanh stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testArcTan stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testAsTrueFraction stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'TT 5/10/2021 17:43:31'!
PASSED!

!testRun: #FloatTest #testExactStoreString stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #NumberTest #testOne stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testExactStoreString2 stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testExp stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'TT 5/10/2021 17:43:32'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #FloatTest #test32bitConversion stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #FloatTest #test32bitConversion2 stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #FloatTest #test32bitInfinities stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #FloatTest #test32bitNaN stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #FloatTest #test32bitRoundingMode stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'TT 5/10/2021 17:43:33'!
PASSED!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:34'!
ERROR!

!testRun: #FloatTest #testArTanh stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:34'!
ERROR!

!testRun: #FloatTest #testArcTan stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:34'!
ERROR!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:34'!
ERROR!

!testRun: #FloatTest #testAsTrueFraction stamp: 'TT 5/10/2021 17:43:34'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testE stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'TT 5/10/2021 17:43:35'!
ERROR!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'TT 5/10/2021 17:43:35'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'TT 5/10/2021 17:43:35'!
ERROR!

!testRun: #NumberTest #testOne stamp: 'TT 5/10/2021 17:43:36'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'TT 5/10/2021 17:43:36'!
ERROR!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'TT 5/10/2021 17:43:36'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'TT 5/10/2021 17:43:36'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'TT 5/10/2021 17:43:36'!
ERROR!

!testRun: #FloatTest #testExactStoreString stamp: 'TT 5/10/2021 17:43:36'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'TT 5/10/2021 17:43:36'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'TT 5/10/2021 17:43:36'!
PASSED!

!testRun: #FloatTest #testExactStoreString2 stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #FloatTest #testFloor stamp: 'TT 5/10/2021 17:43:37'!
ERROR!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #FloatTest #testExp stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #FloatTest #testFloorLog2 stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'TT 5/10/2021 17:43:37'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'TT 5/10/2021 17:43:38'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'TT 5/10/2021 17:43:38'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'TT 5/10/2021 17:43:38'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'TT 5/10/2021 17:43:38'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'TT 5/10/2021 17:43:38'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'TT 5/10/2021 17:43:38'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'TT 5/10/2021 17:43:38'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'TT 5/10/2021 17:43:38'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'TT 5/10/2021 17:43:38'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'TT 5/10/2021 17:43:38'!
ERROR!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'TT 5/10/2021 17:43:39'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'TT 5/10/2021 17:43:39'!
ERROR!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'TT 5/10/2021 17:43:39'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'TT 5/10/2021 17:43:39'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'TT 5/10/2021 17:43:39'!
ERROR!

!testRun: #FloatTest #test32bitConversion stamp: 'TT 5/10/2021 17:43:39'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:39'!
ERROR!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'TT 5/10/2021 17:43:39'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'TT 5/10/2021 17:43:39'!
PASSED!

!testRun: #FloatTest #test32bitConversion2 stamp: 'TT 5/10/2021 17:43:39'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:39'!
ERROR!

!testRun: #FloatTest #testHashWithFraction stamp: 'TT 5/10/2021 17:43:40'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'TT 5/10/2021 17:43:40'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:40'!
ERROR!

!testRun: #FloatTest #testFloor stamp: 'TT 5/10/2021 17:43:40'!
ERROR!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'TT 5/10/2021 17:43:40'!
PASSED!

!testRun: #FloatTest #test32bitInfinities stamp: 'TT 5/10/2021 17:43:40'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:40'!
ERROR!

!testRun: #FloatTest #testFloorLog2 stamp: 'TT 5/10/2021 17:43:40'!
PASSED!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'TT 5/10/2021 17:43:40'!
PASSED!

!testRun: #FloatTest #test32bitNaN stamp: 'TT 5/10/2021 17:43:40'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:40'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat stamp: 'TT 5/10/2021 17:43:40'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'TT 5/10/2021 17:43:40'!
PASSED!

!testRun: #FloatTest #testE stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'TT 5/10/2021 17:43:41'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testHugeValues stamp: 'TT 5/10/2021 17:43:42'!
ERROR!

!testRun: #FloatTest #testExactStoreString stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testArTanh stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testArcTan stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testHashWithFraction stamp: 'TT 5/10/2021 17:43:42'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'TT 5/10/2021 17:43:43'!
PASSED!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'TT 5/10/2021 17:43:43'!
PASSED!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'TT 5/10/2021 17:43:43'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'TT 5/10/2021 17:43:43'!
PASSED!

!testRun: #FloatTest #testExp stamp: 'TT 5/10/2021 17:43:43'!
PASSED!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'TT 5/10/2021 17:43:43'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'TT 5/10/2021 17:43:43'!
PASSED!

!testRun: #FloatTest #testAsTrueFraction stamp: 'TT 5/10/2021 17:43:43'!
ERROR!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'TT 5/10/2021 17:43:43'!
PASSED!

!testRun: #FloatTest #testIsDenormalized stamp: 'TT 5/10/2021 17:43:43'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'TT 5/10/2021 17:43:43'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'TT 5/10/2021 17:43:44'!
ERROR!

!testRun: #FloatTest #testIsZero stamp: 'TT 5/10/2021 17:43:44'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'TT 5/10/2021 17:43:44'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'TT 5/10/2021 17:43:44'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'TT 5/10/2021 17:43:44'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'TT 5/10/2021 17:43:44'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'TT 5/10/2021 17:43:44'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'TT 5/10/2021 17:43:44'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'TT 5/10/2021 17:43:44'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'TT 5/10/2021 17:43:44'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'TT 5/10/2021 17:43:45'!
ERROR!

!testRun: #FloatTest #testHugeValues stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'TT 5/10/2021 17:43:45'!
ERROR!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'TT 5/10/2021 17:43:45'!
PASSED!

!testRun: #FloatTest #testMaxExactInteger stamp: 'TT 5/10/2021 17:43:46'!
PASSED!

!testRun: #FloatTest #testFloor stamp: 'TT 5/10/2021 17:43:46'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'TT 5/10/2021 17:43:46'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'TT 5/10/2021 17:43:46'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'TT 5/10/2021 17:43:46'!
PASSED!

!testRun: #FloatTest #testFloorLog2 stamp: 'TT 5/10/2021 17:43:46'!
PASSED!

!testRun: #FloatTest #testIsDenormalized stamp: 'TT 5/10/2021 17:43:46'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'TT 5/10/2021 17:43:46'!
PASSED!

!testRun: #FloatTest #testIsZero stamp: 'TT 5/10/2021 17:43:46'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'TT 5/10/2021 17:43:47'!
ERROR!

!testRun: #FloatTest #testFractionAsFloat stamp: 'TT 5/10/2021 17:43:47'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'TT 5/10/2021 17:43:47'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'TT 5/10/2021 17:43:47'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'TT 5/10/2021 17:43:47'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'TT 5/10/2021 17:43:47'!
PASSED!

!testRun: #FloatTest #testMultiply stamp: 'TT 5/10/2021 17:43:47'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'TT 5/10/2021 17:43:47'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'TT 5/10/2021 17:43:47'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testNaN2 stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:48'!
ERROR!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:48'!
ERROR!

!testRun: #FloatTest #testMaxExactInteger stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'TT 5/10/2021 17:43:48'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:49'!
ERROR!

!testRun: #FloatTest #testNaN4 stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testHashWithFraction stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:49'!
ERROR!

!testRun: #FloatTest #testNaNCompare stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'TT 5/10/2021 17:43:49'!
FAILURE!

!testRun: #FloatTest #testMixedTypeComparison stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testE stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testMultiply stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'TT 5/10/2021 17:43:49'!
PASSED!

!testRun: #FloatTest #testNaNTruncated stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'TT 5/10/2021 17:43:50'!
ERROR!

!testRun: #FloatTest #testNaN2 stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testNaNisLiteral stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testNaN3 stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testNaN4 stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testNextTowardsZero stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'TT 5/10/2021 17:43:50'!
PASSED!

!testRun: #FloatTest #testNaNCompare stamp: 'TT 5/10/2021 17:43:51'!
PASSED!

!testRun: #FloatTest #testNoIntegerHash stamp: 'TT 5/10/2021 17:43:51'!
PASSED!

!testRun: #FloatTest #testHugeValues stamp: 'TT 5/10/2021 17:43:51'!
ERROR!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'TT 5/10/2021 17:43:51'!
FAILURE!

!testRun: #FloatTest #testPartBits stamp: 'TT 5/10/2021 17:43:51'!
PASSED!

!testRun: #FloatTest #testExactStoreString stamp: 'TT 5/10/2021 17:43:51'!
ERROR!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'TT 5/10/2021 17:43:51'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'TT 5/10/2021 17:43:51'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'TT 5/10/2021 17:43:51'!
ERROR!

!testRun: #FloatTest #testNaNTruncated stamp: 'TT 5/10/2021 17:43:51'!
PASSED!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'TT 5/10/2021 17:43:52'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'TT 5/10/2021 17:43:52'!
PASSED!

!testRun: #FloatTest #testExactStoreString2 stamp: 'TT 5/10/2021 17:43:52'!
ERROR!

!testRun: #FloatTest #testNaNisLiteral stamp: 'TT 5/10/2021 17:43:52'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'TT 5/10/2021 17:43:52'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'TT 5/10/2021 17:43:52'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'TT 5/10/2021 17:43:52'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'TT 5/10/2021 17:43:52'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'TT 5/10/2021 17:43:52'!
PASSED!

!testRun: #FloatTest #testNextTowardsZero stamp: 'TT 5/10/2021 17:43:52'!
PASSED!

!testRun: #FloatTest #testPrimAdd stamp: 'TT 5/10/2021 17:43:52'!
PASSED!

!testRun: #FloatTest #testIsDenormalized stamp: 'TT 5/10/2021 17:43:53'!
PASSED!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'TT 5/10/2021 17:43:53'!
PASSED!

!testRun: #FloatTest #testPrimArcTan stamp: 'TT 5/10/2021 17:43:53'!
PASSED!

!testRun: #FloatTest #testIsZero stamp: 'TT 5/10/2021 17:43:53'!
PASSED!

!testRun: #FloatTest #testNoIntegerHash stamp: 'TT 5/10/2021 17:43:53'!
ERROR!

!testRun: #FloatTest #testPrimDivideBy stamp: 'TT 5/10/2021 17:43:53'!
FAILURE!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'TT 5/10/2021 17:43:53'!
PASSED!

!testRun: #FloatTest #testPartBits stamp: 'TT 5/10/2021 17:43:53'!
PASSED!

!testRun: #FloatTest #testPrimEqual stamp: 'TT 5/10/2021 17:43:53'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'TT 5/10/2021 17:43:54'!
ERROR!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'TT 5/10/2021 17:43:54'!
PASSED!

!testRun: #FloatTest #testMaxExactInteger stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testPrimAdd stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testFloor stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testPrimArcTan stamp: 'TT 5/10/2021 17:43:55'!
ERROR!

!testRun: #FloatTest #testMixedTypeComparison stamp: 'TT 5/10/2021 17:43:55'!
PASSED!

!testRun: #FloatTest #testFloorLog2 stamp: 'TT 5/10/2021 17:43:56'!
PASSED!

!testRun: #FloatTest #testPrimDivideBy stamp: 'TT 5/10/2021 17:43:56'!
FAILURE!

!testRun: #FloatTest #testMultiply stamp: 'TT 5/10/2021 17:43:56'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'TT 5/10/2021 17:43:56'!
ERROR!

!testRun: #FloatTest #testPrimEqual stamp: 'TT 5/10/2021 17:43:56'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'TT 5/10/2021 17:43:56'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'TT 5/10/2021 17:43:56'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'TT 5/10/2021 17:43:56'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat stamp: 'TT 5/10/2021 17:43:56'!
ERROR!

!testRun: #FloatTest #testPrimSin stamp: 'TT 5/10/2021 17:43:56'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'TT 5/10/2021 17:43:56'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'TT 5/10/2021 17:43:56'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testNaN3 stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testNaN4 stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testNaNCompare stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'TT 5/10/2021 17:43:57'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'TT 5/10/2021 17:43:58'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'TT 5/10/2021 17:43:58'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'TT 5/10/2021 17:43:58'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'TT 5/10/2021 17:43:58'!
PASSED!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'TT 5/10/2021 17:43:58'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'TT 5/10/2021 17:43:58'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'TT 5/10/2021 17:43:58'!
PASSED!

!testRun: #FloatTest #testHashWithFraction stamp: 'TT 5/10/2021 17:43:58'!
PASSED!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'TT 5/10/2021 17:43:58'!
PASSED!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'TT 5/10/2021 17:43:59'!
PASSED!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'TT 5/10/2021 17:43:59'!
PASSED!

!testRun: #FloatTest #testNaNTruncated stamp: 'TT 5/10/2021 17:43:59'!
PASSED!

!testRun: #FloatTest #testPrimSin stamp: 'TT 5/10/2021 17:43:59'!
ERROR!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'TT 5/10/2021 17:43:59'!
PASSED!

!testRun: #FloatTest #testNaNisLiteral stamp: 'TT 5/10/2021 17:43:59'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'TT 5/10/2021 17:43:59'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'TT 5/10/2021 17:43:59'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'TT 5/10/2021 17:44:00'!
PASSED!

!testRun: #FloatTest #testPrimSqrt stamp: 'TT 5/10/2021 17:44:00'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'TT 5/10/2021 17:44:00'!
PASSED!

!testRun: #FloatTest #testNextTowardsZero stamp: 'TT 5/10/2021 17:44:00'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'TT 5/10/2021 17:44:00'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'TT 5/10/2021 17:44:00'!
PASSED!

!testRun: #FloatTest #testNoIntegerHash stamp: 'TT 5/10/2021 17:44:00'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'TT 5/10/2021 17:44:00'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'TT 5/10/2021 17:44:00'!
PASSED!

!testRun: #FloatTest #testPartBits stamp: 'TT 5/10/2021 17:44:01'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'TT 5/10/2021 17:44:01'!
PASSED!

!testRun: #FloatTest #testHugeValues stamp: 'TT 5/10/2021 17:44:01'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'TT 5/10/2021 17:44:01'!
PASSED!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'TT 5/10/2021 17:44:01'!
PASSED!

!testRun: #FloatTest #testPrintStringStress stamp: 'TT 5/10/2021 17:44:01'!
PASSED!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'TT 5/10/2021 17:44:01'!
PASSED!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'TT 5/10/2021 17:44:01'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'TT 5/10/2021 17:44:01'!
ERROR!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'TT 5/10/2021 17:44:02'!
ERROR!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testPrimAdd stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testPrimArcTan stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testPrimDivideBy stamp: 'TT 5/10/2021 17:44:02'!
FAILURE!

!testRun: #FloatTest #testIsDenormalized stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testPrimEqual stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testIsZero stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'TT 5/10/2021 17:44:02'!
PASSED!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testSin stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testSqrt stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testMaxExactInteger stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'TT 5/10/2021 17:44:03'!
PASSED!

!testRun: #FloatTest #testPrimSin stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testStoreBase16 stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testStoreOn stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testMixedTypeComparison stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testPrimSqrt stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testMultiply stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testNaN2 stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testNaN3 stamp: 'TT 5/10/2021 17:44:04'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'TT 5/10/2021 17:44:05'!
PASSED!

!testRun: #FloatTest #testNaN4 stamp: 'TT 5/10/2021 17:44:05'!
PASSED!

!testRun: #FloatTest #testNaNCompare stamp: 'TT 5/10/2021 17:44:05'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'TT 5/10/2021 17:44:05'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'TT 5/10/2021 17:44:05'!
PASSED!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'TT 5/10/2021 17:44:05'!
FAILURE!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'TT 5/10/2021 17:44:05'!
PASSED!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'TT 5/10/2021 17:44:05'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testNaNTruncated stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testNaNisLiteral stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:06'!
ERROR!

!testRun: #FloatTest #testNextTowardsZero stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:06'!
ERROR!

!testRun: #FloatTest #testNoIntegerHash stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:06'!
ERROR!

!testRun: #FloatTest #testPartBits stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:06'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:06'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'TT 5/10/2021 17:44:07'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:07'!
ERROR!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'TT 5/10/2021 17:44:07'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'TT 5/10/2021 17:44:07'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:07'!
ERROR!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'TT 5/10/2021 17:44:07'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:07'!
ERROR!

!testRun: #FloatTest #testPrimAdd stamp: 'TT 5/10/2021 17:44:07'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:07'!
ERROR!

!testRun: #FloatTest #testPrimArcTan stamp: 'TT 5/10/2021 17:44:07'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:07'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:07'!
ERROR!

!testRun: #FloatTest #testPrimDivideBy stamp: 'TT 5/10/2021 17:44:07'!
FAILURE!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:07'!
PASSED!

!testRun: #FloatTest #testPrimEqual stamp: 'TT 5/10/2021 17:44:07'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'TT 5/10/2021 17:44:07'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'TT 5/10/2021 17:44:07'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FloatTest #testPrimSin stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FractionTest #testExactRaisedTo stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'TT 5/10/2021 17:44:08'!
PASSED!

!testRun: #FloatTest #testPrimSqrt stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FractionTest #testFloorLogExactness stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FractionTest #testFractionPrinting stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FractionTest #testHash stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'TT 5/10/2021 17:44:09'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FractionTest #testIntegerWholeMultiplication stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FloatTest #testPrintStringStress stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FractionTest #testRounded stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'TT 5/10/2021 17:44:10'!
ERROR!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'TT 5/10/2021 17:44:10'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FractionTest #testTruncated stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FractionTest #testWholeMultiplication stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #FloatTest #testSin stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'TT 5/10/2021 17:44:11'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'TT 5/10/2021 17:44:12'!
PASSED!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'TT 5/10/2021 17:44:12'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'TT 5/10/2021 17:44:12'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'TT 5/10/2021 17:44:12'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'TT 5/10/2021 17:44:12'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'TT 5/10/2021 17:44:12'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'TT 5/10/2021 17:44:12'!
PASSED!

!testRun: #FloatTest #testSqrt stamp: 'TT 5/10/2021 17:44:12'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #FloatTest #testStoreBase16 stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #FloatTest #testStoreOn stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'TT 5/10/2021 17:44:13'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testPrintStringStress stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'TT 5/10/2021 17:44:14'!
ERROR!

!testRun: #FloatTest #testReciprocal stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'TT 5/10/2021 17:44:14'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:15'!
ERROR!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:15'!
ERROR!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:15'!
ERROR!

!testRun: #FloatTest #testSin stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:15'!
ERROR!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:15'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:16'!
ERROR!

!testRun: #FloatTest #testSqrt stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:16'!
ERROR!

!testRun: #IntegerTest #testDivLnSp stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:16'!
ERROR!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:16'!
ERROR!

!testRun: #FloatTest #testStoreBase16 stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:16'!
ERROR!

!testRun: #FloatTest #testStoreOn stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:16'!
ERROR!

!testRun: #IntegerTest #testDivLpSn stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'TT 5/10/2021 17:44:16'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'TT 5/10/2021 17:44:17'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #FractionTest #testExactRaisedTo stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:18'!
ERROR!

!testRun: #FractionTest #testFloorLogExactness stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:18'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:18'!
ERROR!

!testRun: #FloatTest #testPrintStringStress stamp: 'TT 5/10/2021 17:44:18'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:19'!
ERROR!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FractionTest #testFractionPrinting stamp: 'TT 5/10/2021 17:44:19'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'TT 5/10/2021 17:44:19'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:19'!
ERROR!

!testRun: #FractionTest #testHash stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:19'!
ERROR!

!testRun: #FloatTest #testReciprocal stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:19'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:19'!
ERROR!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:19'!
ERROR!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:19'!
ERROR!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'TT 5/10/2021 17:44:19'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FractionTest #testIntegerWholeMultiplication stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FloatTest #testSin stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'TT 5/10/2021 17:44:20'!
PASSED!

!testRun: #FractionTest #testExactRaisedTo stamp: 'TT 5/10/2021 17:44:21'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'TT 5/10/2021 17:44:21'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'TT 5/10/2021 17:44:21'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'TT 5/10/2021 17:44:21'!
PASSED!

!testRun: #FloatTest #testSqrt stamp: 'TT 5/10/2021 17:44:21'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'TT 5/10/2021 17:44:21'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'TT 5/10/2021 17:44:21'!
ERROR!

!testRun: #IntegerTest #testIntegerDivision stamp: 'TT 5/10/2021 17:44:21'!
PASSED!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'TT 5/10/2021 17:44:21'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'TT 5/10/2021 17:44:21'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'TT 5/10/2021 17:44:21'!
PASSED!

!testRun: #FloatTest #testStoreBase16 stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #FractionTest #testRounded stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'TT 5/10/2021 17:44:22'!
ERROR!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #FloatTest #testStoreOn stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #FractionTest #testFloorLogExactness stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'TT 5/10/2021 17:44:22'!
ERROR!

!testRun: #FractionTest #testTruncated stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'TT 5/10/2021 17:44:22'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'TT 5/10/2021 17:44:23'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'TT 5/10/2021 17:44:23'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'TT 5/10/2021 17:44:23'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'TT 5/10/2021 17:44:23'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'TT 5/10/2021 17:44:23'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'TT 5/10/2021 17:44:23'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'TT 5/10/2021 17:44:23'!
PASSED!

!testRun: #FractionTest #testHash stamp: 'TT 5/10/2021 17:44:23'!
ERROR!

!testRun: #IntegerTest #testLCMExample stamp: 'TT 5/10/2021 17:44:23'!
PASSED!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'TT 5/10/2021 17:44:23'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'TT 5/10/2021 17:44:24'!
ERROR!

!testRun: #IntegerTest #testLCMProperties stamp: 'TT 5/10/2021 17:44:24'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'TT 5/10/2021 17:44:24'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'TT 5/10/2021 17:44:24'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'TT 5/10/2021 17:44:24'!
ERROR!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'TT 5/10/2021 17:44:24'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'TT 5/10/2021 17:44:24'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'TT 5/10/2021 17:44:24'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'TT 5/10/2021 17:44:24'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'TT 5/10/2021 17:44:24'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'TT 5/10/2021 17:44:24'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'TT 5/10/2021 17:44:24'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'TT 5/10/2021 17:44:25'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'TT 5/10/2021 17:44:26'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:26'!
ERROR!

!testRun: #IntegerTest #testModLnSn stamp: 'TT 5/10/2021 17:44:26'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'TT 5/10/2021 17:44:26'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'TT 5/10/2021 17:44:26'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:26'!
ERROR!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'TT 5/10/2021 17:44:26'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'TT 5/10/2021 17:44:26'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:26'!
ERROR!

!testRun: #IntegerTest #testModLnSp stamp: 'TT 5/10/2021 17:44:26'!
ERROR!

!testRun: #FractionTest #testRounded stamp: 'TT 5/10/2021 17:44:26'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'TT 5/10/2021 17:44:26'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:26'!
ERROR!

!testRun: #IntegerTest #testModLpLn stamp: 'TT 5/10/2021 17:44:26'!
PASSED!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'TT 5/10/2021 17:44:26'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:44:27'!
ERROR!

!testRun: #IntegerTest #testModLpSn stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #FractionTest #testTruncated stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'TT 5/10/2021 17:44:27'!
ERROR!

!testRun: #IntegerTest #testModLpSp stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'TT 5/10/2021 17:44:27'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #FractionTest #testWholeMultiplication stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'TT 5/10/2021 17:44:28'!
ERROR!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'TT 5/10/2021 17:44:28'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'TT 5/10/2021 17:44:29'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'TT 5/10/2021 17:44:29'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'TT 5/10/2021 17:44:29'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'TT 5/10/2021 17:44:29'!
ERROR!

!testRun: #FractionTest #testExactRaisedTo stamp: 'TT 5/10/2021 17:44:29'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'TT 5/10/2021 17:44:29'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'TT 5/10/2021 17:44:29'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'TT 5/10/2021 17:44:29'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'TT 5/10/2021 17:44:29'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'TT 5/10/2021 17:44:29'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'TT 5/10/2021 17:44:29'!
ERROR!

!testRun: #IntegerTest #testModSpSp stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'TT 5/10/2021 17:44:30'!
ERROR!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'TT 5/10/2021 17:44:30'!
ERROR!

!testRun: #FractionTest #testFloorLogExactness stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'TT 5/10/2021 17:44:30'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'TT 5/10/2021 17:44:31'!
ERROR!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #FractionTest #testFractionPrinting stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #FractionTest #testHash stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'TT 5/10/2021 17:44:31'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'TT 5/10/2021 17:44:32'!
ERROR!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #FractionTest #testIntegerWholeMultiplication stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'TT 5/10/2021 17:44:32'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'TT 5/10/2021 17:44:33'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'TT 5/10/2021 17:44:33'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'TT 5/10/2021 17:44:33'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'TT 5/10/2021 17:44:33'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'TT 5/10/2021 17:44:33'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'TT 5/10/2021 17:44:33'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'TT 5/10/2021 17:44:33'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'TT 5/10/2021 17:44:33'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'TT 5/10/2021 17:44:33'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'TT 5/10/2021 17:44:33'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'TT 5/10/2021 17:44:34'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'TT 5/10/2021 17:44:34'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'TT 5/10/2021 17:44:34'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'TT 5/10/2021 17:44:34'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'TT 5/10/2021 17:44:34'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'TT 5/10/2021 17:44:34'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'TT 5/10/2021 17:44:34'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'TT 5/10/2021 17:44:34'!
PASSED!

!testRun: #FractionTest #testRounded stamp: 'TT 5/10/2021 17:44:34'!
ERROR!

!testRun: #IntegerTest #testBitLogic stamp: 'TT 5/10/2021 17:44:34'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'TT 5/10/2021 17:44:34'!
PASSED!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #FractionTest #testTruncated stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'TT 5/10/2021 17:44:35'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'TT 5/10/2021 17:44:36'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'TT 5/10/2021 17:44:36'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'TT 5/10/2021 17:44:36'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'TT 5/10/2021 17:44:36'!
ERROR!

!testRun: #FractionTest #testWholeMultiplication stamp: 'TT 5/10/2021 17:44:36'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'TT 5/10/2021 17:44:36'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'TT 5/10/2021 17:44:36'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'TT 5/10/2021 17:44:36'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'TT 5/10/2021 17:44:36'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'TT 5/10/2021 17:44:36'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'TT 5/10/2021 17:44:36'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'TT 5/10/2021 17:44:37'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'TT 5/10/2021 17:44:38'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'TT 5/10/2021 17:44:39'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'TT 5/10/2021 17:44:39'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'TT 5/10/2021 17:44:39'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'TT 5/10/2021 17:44:39'!
ERROR!

!testRun: #IntegerTest #testQuoLnLp stamp: 'TT 5/10/2021 17:44:39'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'TT 5/10/2021 17:44:39'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'TT 5/10/2021 17:44:39'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'TT 5/10/2021 17:44:39'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'TT 5/10/2021 17:44:39'!
ERROR!

!testRun: #IntegerTest #testDivSpLn stamp: 'TT 5/10/2021 17:44:39'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'TT 5/10/2021 17:44:39'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'TT 5/10/2021 17:44:40'!
ERROR!

!testRun: #IntegerTest #testDivSpSn stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'TT 5/10/2021 17:44:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'TT 5/10/2021 17:44:41'!
ERROR!

!testRun: #IntegerTest #testIsInteger stamp: 'TT 5/10/2021 17:44:41'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'TT 5/10/2021 17:44:42'!
ERROR!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'TT 5/10/2021 17:44:42'!
ERROR!

!testRun: #IntegerTest #testQuoSpLp stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'TT 5/10/2021 17:44:42'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'TT 5/10/2021 17:44:43'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'TT 5/10/2021 17:44:43'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'TT 5/10/2021 17:44:43'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'TT 5/10/2021 17:44:43'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'TT 5/10/2021 17:44:43'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'TT 5/10/2021 17:44:43'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'TT 5/10/2021 17:44:43'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'TT 5/10/2021 17:44:43'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'TT 5/10/2021 17:44:43'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'TT 5/10/2021 17:44:44'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'TT 5/10/2021 17:44:45'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'TT 5/10/2021 17:44:46'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'TT 5/10/2021 17:44:47'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 17:44:48'!
ERROR!

!testRun: #IntegerTest #testModLpSn stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'TT 5/10/2021 17:44:48'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'TT 5/10/2021 17:44:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 17:44:50'!
ERROR!

!testRun: #IntegerTest #testStringAsNumber stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'TT 5/10/2021 17:44:50'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'TT 5/10/2021 17:44:51'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'TT 5/10/2021 17:44:52'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 17:44:53'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'TT 5/10/2021 17:44:53'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'TT 5/10/2021 17:44:54'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'TT 5/10/2021 17:44:54'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'TT 5/10/2021 17:44:54'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'TT 5/10/2021 17:44:54'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'TT 5/10/2021 17:44:54'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'TT 5/10/2021 17:44:54'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'TT 5/10/2021 17:44:55'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'TT 5/10/2021 17:44:55'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'TT 5/10/2021 17:44:55'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'TT 5/10/2021 17:44:55'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'TT 5/10/2021 17:44:55'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'TT 5/10/2021 17:44:56'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'TT 5/10/2021 17:44:57'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'TT 5/10/2021 17:44:57'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'TT 5/10/2021 17:44:57'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'TT 5/10/2021 17:44:57'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'TT 5/10/2021 17:44:59'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'TT 5/10/2021 17:44:59'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'TT 5/10/2021 17:44:59'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'TT 5/10/2021 17:44:59'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'TT 5/10/2021 17:44:59'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'TT 5/10/2021 17:44:59'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'TT 5/10/2021 17:44:59'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'TT 5/10/2021 17:44:59'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'TT 5/10/2021 17:44:59'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'TT 5/10/2021 17:44:59'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'TT 5/10/2021 17:45:00'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'TT 5/10/2021 17:45:00'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'TT 5/10/2021 17:45:00'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'TT 5/10/2021 17:45:00'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'TT 5/10/2021 17:45:00'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'TT 5/10/2021 17:45:00'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'TT 5/10/2021 17:45:00'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'TT 5/10/2021 17:45:00'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'TT 5/10/2021 17:45:01'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'TT 5/10/2021 17:45:02'!
ERROR!

!testRun: #IntegerTest #testRemSnSn stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'TT 5/10/2021 17:45:02'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'TT 5/10/2021 17:45:03'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'TT 5/10/2021 17:45:04'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'TT 5/10/2021 17:45:05'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'TT 5/10/2021 17:45:06'!
ERROR!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'TT 5/10/2021 17:45:06'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'TT 5/10/2021 17:45:07'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'TT 5/10/2021 17:45:08'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'TT 5/10/2021 17:45:09'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'TT 5/10/2021 17:45:10'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'TT 5/10/2021 17:45:11'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'TT 5/10/2021 17:45:11'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'TT 5/10/2021 17:45:11'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'TT 5/10/2021 17:45:11'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'TT 5/10/2021 17:45:11'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'TT 5/10/2021 17:45:11'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'TT 5/10/2021 17:45:12'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'TT 5/10/2021 17:45:12'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'TT 5/10/2021 17:45:12'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'TT 5/10/2021 17:45:12'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'TT 5/10/2021 17:45:12'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'TT 5/10/2021 17:45:13'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'TT 5/10/2021 17:45:17'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'TT 5/10/2021 17:45:18'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'TT 5/10/2021 17:45:18'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'TT 5/10/2021 17:45:18'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'TT 5/10/2021 17:45:18'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'TT 5/10/2021 17:45:18'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'TT 5/10/2021 17:45:18'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'TT 5/10/2021 17:45:18'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'TT 5/10/2021 17:45:18'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'TT 5/10/2021 17:45:18'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'TT 5/10/2021 17:45:18'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'TT 5/10/2021 17:45:19'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'TT 5/10/2021 17:45:19'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'TT 5/10/2021 17:45:19'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'TT 5/10/2021 17:45:19'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'TT 5/10/2021 17:45:19'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'TT 5/10/2021 17:45:19'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'TT 5/10/2021 17:45:19'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'TT 5/10/2021 17:45:19'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'TT 5/10/2021 17:45:19'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'TT 5/10/2021 17:45:19'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'TT 5/10/2021 17:45:19'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'TT 5/10/2021 17:45:20'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'TT 5/10/2021 17:45:20'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'TT 5/10/2021 17:45:20'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:45:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'TT 5/10/2021 17:45:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'TT 5/10/2021 17:45:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'TT 5/10/2021 17:45:23'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'TT 5/10/2021 17:45:23'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'TT 5/10/2021 17:45:23'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'TT 5/10/2021 17:45:23'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'TT 5/10/2021 17:45:23'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'TT 5/10/2021 17:45:24'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'TT 5/10/2021 17:45:24'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'TT 5/10/2021 17:45:28'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'TT 5/10/2021 17:45:29'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'TT 5/10/2021 17:45:30'!
ERROR!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'TT 5/10/2021 17:45:30'!
ERROR!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'TT 5/10/2021 17:45:30'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'TT 5/10/2021 17:45:31'!
ERROR!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'TT 5/10/2021 17:45:31'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'TT 5/10/2021 17:45:32'!
ERROR!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'TT 5/10/2021 17:45:32'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'TT 5/10/2021 17:45:33'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'TT 5/10/2021 17:45:33'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'TT 5/10/2021 17:45:33'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'TT 5/10/2021 17:45:34'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:45:59' prior: 50863243!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV']]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:46:03' prior: 50867736!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV']
		]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:46:06' prior: 50867745!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV']
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:46:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:46:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:46:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:46:10'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:46:10'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 17:46:48'!
test05
	
	self assert: 5 asRomanString equals: 'V'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 17:46:49'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:47:18' prior: 50867754!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		self = 5 ifTrue: [stream nextPutAll: 'V']
	]! !
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 17:50:45'!
test06
	
	self assert: 6 asRomanString equals: 'VI'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:50:58' prior: 50867787!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		self = 5 ifTrue: [stream nextPutAll: 'V'].
		self = 6 ifTrue: [stream nextPutAll: 'VI']
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 17:51:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:51:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:51:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:51:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:51:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 17:51:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 17:51:01'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 17:52:59'!
test07
	
	self assert: 7 asRomanString equals: 'VII'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 17:53:00'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:53:19' prior: 50867803!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		self = 5 ifTrue: [stream nextPutAll: 'V'].
		self = 6 ifTrue: [stream nextPutAll: 'VI'].
		self = 7 ifTrue: [stream nextPutAll: 'VII']
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 17:53:21'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:53:22'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:53:22'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:53:22'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:53:22'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 17:53:22'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 17:53:22'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 17:53:22'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 17:54:40'!
test08
	
	self assert: 7 asRomanString equals: 'VII'.! !
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 17:54:42' prior: 50867885!
test08
	
	self assert: 8 asRomanString equals: 'VII'.! !
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 17:54:46' prior: 50867891!
test08
	
	self assert: 8 asRomanString equals: 'VIII'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:54:55' prior: 50867846!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		self = 5 ifTrue: [stream nextPutAll: 'V'].
		self = 6 ifTrue: [stream nextPutAll: 'VI'].
		self = 7 ifTrue: [stream nextPutAll: 'VII'].
		self = 7 ifTrue: [stream nextPutAll: 'VIII'].
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:54:58' prior: 50867902!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		self = 5 ifTrue: [stream nextPutAll: 'V'].
		self = 6 ifTrue: [stream nextPutAll: 'VI'].
		self = 7 ifTrue: [stream nextPutAll: 'VII'].
		self = 8 ifTrue: [stream nextPutAll: 'VIII'].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 17:55:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:55:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:55:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:55:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:55:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 17:55:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 17:55:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 17:55:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 17:55:00'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 17:57:25'!
test09
	
	self assert: 9 asRomanString equals: 'IX'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 17:57:35' prior: 50867917!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		self = 5 ifTrue: [stream nextPutAll: 'V'].
		self = 6 ifTrue: [stream nextPutAll: 'VI'].
		self = 7 ifTrue: [stream nextPutAll: 'VII'].
		self = 8 ifTrue: [stream nextPutAll: 'VIII'].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 17:57:45'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 17:57:45'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 17:57:46'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 17:57:46'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 17:57:46'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 17:57:46'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 17:57:46'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 17:57:46'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 17:57:46'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 17:57:46'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:02:59' prior: 50867966!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:03:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:03:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:03:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:03:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:03:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:03:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:03:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:03:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:03:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:03:02'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 18:09:31'!
test10
	
	self assert: 10 asRomanString equals: 'X'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:09:46' prior: 50868014!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		self = 10 ifTrue: [stream nextPutAll: 'X'].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:09:55'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 18:10:38'!
test11
	
	self assert: 11 asRomanString equals: 'XI'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:10:50' prior: 50868065!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		self = 10 ifTrue: [stream nextPutAll: 'X'].
		self = 11 ifTrue: [stream nextPutAll: 'XI'].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:10:52'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 18:11:53'!
test12
	
	self assert: 12 asRomanString equals: 'XII'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:12:02' prior: 50868121!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		self = 10 ifTrue: [stream nextPutAll: 'X'].
		self = 11 ifTrue: [stream nextPutAll: 'XI'].
		self = 12 ifTrue: [stream nextPutAll: 'XII'].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:12:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:12:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:12:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:12:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:12:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:12:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:12:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:12:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:12:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:12:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:12:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:12:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:12:13'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:15:16' prior: 50868181!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-5) timesRepeat: [ stream nextPut: $I]].
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:15:20' prior: 50868241!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:15:23'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:17:31' prior: 50868259!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
	]! !
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 18:17:34'!
test13
	
	self assert: 13 asRomanString equals: 'XIV'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:17:35'!
FAILURE!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 18:17:43' prior: 50868337!
test13
	
	self assert: 14 asRomanString equals: 'XIV'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:17:45'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:17:45'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:17:45'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:17:45'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:17:45'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:20:27' prior: 50868318!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		self = 15 ifTrue: [stream nextPutAll: 'XV'].
	]! !
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 18:20:40'!
test14
	
	self assert: 15 asRomanString equals: 'XV'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:21:24'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:23:33' prior: 50868396!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPut: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:23:43'!
ERROR!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:23:52' prior: 50868470!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:23:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:23:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:23:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:23:56'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:29:45' prior: 50868496!
asRomanString
	^String streamContents: [ :stream |
		
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
	]

"
rem between: 0 and: 3 ifTrue: [
	| restNum |
	
]. 
(self between: 5 and: 8) ifTrue: [
	stream nextPut: $V.
	(self-5) timesRepeat: [ stream nextPut: $I]].
self = 9 ifTrue: [stream nextPutAll: 'IX'].
(self between: 10 and: 13) ifTrue: [
	stream nextPut: $X.
	(self-10) timesRepeat: [ stream nextPut: $I]].
self = 14 ifTrue: [stream nextPutAll: 'XIV'].
(self between: 15 and: 18) ifTrue: [
	stream nextPutAll: 'XV'.
	(self-15) timesRepeat: [ stream nextPut: $I]].
"! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:29:49' prior: 50868566!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
	]

"
rem between: 0 and: 3 ifTrue: [
	| restNum |
	
]. 
(self between: 5 and: 8) ifTrue: [
	stream nextPut: $V.
	(self-5) timesRepeat: [ stream nextPut: $I]].
self = 9 ifTrue: [stream nextPutAll: 'IX'].
(self between: 10 and: 13) ifTrue: [
	stream nextPut: $X.
	(self-10) timesRepeat: [ stream nextPut: $I]].
self = 14 ifTrue: [stream nextPutAll: 'XIV'].
(self between: 15 and: 18) ifTrue: [
	stream nextPutAll: 'XV'.
	(self-15) timesRepeat: [ stream nextPut: $I]].
"! !

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'TT 5/10/2021 18:29:51'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'TT 5/10/2021 18:29:52'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'TT 5/10/2021 18:29:53'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'TT 5/10/2021 18:29:54'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'TT 5/10/2021 18:29:55'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'TT 5/10/2021 18:29:56'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 18:29:56'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 18:29:56'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'TT 5/10/2021 18:29:56'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'TT 5/10/2021 18:29:56'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'TT 5/10/2021 18:29:56'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'TT 5/10/2021 18:29:56'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'TT 5/10/2021 18:29:56'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'TT 5/10/2021 18:29:57'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'TT 5/10/2021 18:29:57'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'TT 5/10/2021 18:29:57'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'TT 5/10/2021 18:29:57'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'TT 5/10/2021 18:29:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:29:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:29:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:29:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:29:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:29:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:29:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:29:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:29:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:29:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:29:59'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:29:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:29:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:29:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:29:59'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:29:59'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'TT 5/10/2021 18:29:59'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'TT 5/10/2021 18:29:59'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'TT 5/10/2021 18:29:59'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'TT 5/10/2021 18:30:00'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'TT 5/10/2021 18:30:01'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'TT 5/10/2021 18:30:02'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'TT 5/10/2021 18:30:02'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:23:52' prior: 50868606!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:30:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:30:24'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:30:25'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:33:07'!
asRomanString2
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:33:14' prior: 50869161!
asRomanString2
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:33:16' prior: 50869184!
asRomanString2
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:35:23' prior: 50869091!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		self = 5 ifTrue: [stream nextPutAll: 'V'].
		(self between: 6 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-6) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		self = 10 ifTrue: [stream nextPutAll: 'X'].
		(self between: 11 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-11) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		self = 15 ifTrue: [stream nextPutAll: 'XV'].
		(self between: 16 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-16) timesRepeat: [ stream nextPut: $I]].
	]

"
^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
	]
"! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:35:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:35:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:35:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:35:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:35:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:35:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:35:28'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:35:28'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:35:28'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:35:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:35:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:35:28'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:35:28'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:35:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:35:29'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:39:23'!
number: aNumber between: aFirstNumber and: aSecondNumber withRomanNumber: aRomanNumber xxx: aSecondRomanNumber withStream: stream
	(self = aNumber) ifTrue: [ stream nextPutAll: aRomanNumber .].
	(self between: aFirstNumber and: aSecondNumber) ifTrue:[
		stream nextPutAll: aSecondRomanNumber .
		(self-aFirstNumber ) timesRepeat: [stream nextPut: $I]].		! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:39:40' prior: 50869230!
asRomanString
	String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
	]
! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:39:42'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:23:52' prior: 50869338!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:40:09'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:41:21' prior: 50869364!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		self number: 14 between: 15 and: 18 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream 
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:41:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:41:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:41:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:41:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:41:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:41:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:41:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:41:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:41:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:41:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:41:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:41:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:41:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:41:26'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:41:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:41:26'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:41:38' prior: 50869434!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self number: 14 between: 15 and: 18 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream 
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:41:21' prior: 50869506!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		self number: 14 between: 15 and: 18 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream 
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:42:24' prior: 50869526!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self number: 14 between: 15 and: 18 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream 
	]! !

!methodRemoval: Integer #asRomanString2 stamp: 'TT 5/10/2021 18:42:40'!
asRomanString2
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [
			stream nextPutAll: 'XV'.
			(self-15) timesRepeat: [ stream nextPut: $I]].
	]!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:43:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:43:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:43:27'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:43:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:43:28'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:48:21'!
number: aNumber withRomanNumber: aRomanNumber xxx: aSecondRomanNumber withStream: stream
	(self = aNumber) ifTrue: [ stream nextPutAll: aRomanNumber .].
	(self between: aNumber+1 and: aNumber+4) ifTrue:[
		stream nextPutAll: aSecondRomanNumber .
		(self-(aNumber+1) ) timesRepeat: [stream nextPut: $I]].		! !

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'TT 5/10/2021 18:48:25'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'TT 5/10/2021 18:48:26'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'TT 5/10/2021 18:48:27'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'TT 5/10/2021 18:48:28'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'TT 5/10/2021 18:48:29'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'TT 5/10/2021 18:48:30'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'TT 5/10/2021 18:48:30'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'TT 5/10/2021 18:48:30'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'TT 5/10/2021 18:48:30'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 18:48:30'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 18:48:30'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'TT 5/10/2021 18:48:30'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'TT 5/10/2021 18:48:30'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'TT 5/10/2021 18:48:30'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'TT 5/10/2021 18:48:30'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'TT 5/10/2021 18:48:30'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'TT 5/10/2021 18:48:31'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'TT 5/10/2021 18:48:31'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'TT 5/10/2021 18:48:32'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'TT 5/10/2021 18:48:32'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'TT 5/10/2021 18:48:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:48:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:48:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:48:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:48:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:48:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:48:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:48:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:48:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:48:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:48:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:48:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:48:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:48:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:48:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:48:33'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'TT 5/10/2021 18:48:34'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'TT 5/10/2021 18:48:35'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'TT 5/10/2021 18:48:36'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'TT 5/10/2021 18:48:37'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'TT 5/10/2021 18:48:37'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'TT 5/10/2021 18:48:37'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'TT 5/10/2021 18:48:37'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:49:04' prior: 50869548!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self number: 14 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream 
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:49:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:49:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:49:09'!
PASSED!

!methodRemoval: Integer #number:between:and:withRomanNumber:xxx:withStream: stamp: 'TT 5/10/2021 18:49:27'!
number: aNumber between: aFirstNumber and: aSecondNumber withRomanNumber: aRomanNumber xxx: aSecondRomanNumber withStream: stream
	(self = aNumber) ifTrue: [ stream nextPutAll: aRomanNumber .].
	(self between: aFirstNumber and: aSecondNumber) ifTrue:[
		stream nextPutAll: aSecondRomanNumber .
		(self-aFirstNumber ) timesRepeat: [stream nextPut: $I]].		!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 18:53:07'!
test15
	
	self assert: 19 asRomanString equals: 'XIX'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 18:53:12'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:53:52' prior: 50870095!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self number: 14 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream .
		self number: 19 withRomanNumber: 'XIX' xxx: 'XX' withStream: stream 
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 18:53:57' prior: 50870186!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [
			stream nextPut: $V.
			(self-5) timesRepeat: [ stream nextPut: $I]].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [
			stream nextPut: $X.
			(self-10) timesRepeat: [ stream nextPut: $I]].
		self number: 14 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' xxx: 'XX' withStream: stream.
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 18:54:00'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 18:54:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 18:54:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 18:54:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 18:54:01'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 19:02:20' prior: 50870208!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self number: 4 withRomanNumber: 'IV' xxx: 'V' withStream: stream.
		self number: 9 withRomanNumber: 'IX' xxx: 'X' withStream: stream.
		self number: 14 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' xxx: 'XX' withStream: stream.
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 19:02:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 19:02:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 19:02:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 19:02:25'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 19:02:26'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 19:04:31'!
number: aNumber withRomanNumber: aRomanNumber aSecondRomanNumber: aSecondRomanNumber withStream: stream
	(self = aNumber) ifTrue: [ stream nextPutAll: aRomanNumber .].
	(self between: aNumber+1 and: aNumber+4) ifTrue:[
		stream nextPutAll: aSecondRomanNumber .
		(self-(aNumber+1) ) timesRepeat: [stream nextPut: $I]].		! !
!Integer methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 19:04:31' prior: 50870281!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self number: 4 withRomanNumber: 'IV' aSecondRomanNumber: 'V' withStream: stream.
		self number: 9 withRomanNumber: 'IX' aSecondRomanNumber: 'X' withStream: stream.
		self number: 14 withRomanNumber: 'XIV' aSecondRomanNumber: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' aSecondRomanNumber: 'XX' withStream: stream.
	]! !

!methodRemoval: Integer #number:withRomanNumber:xxx:withStream: stamp: 'TT 5/10/2021 19:04:31'!
number: aNumber withRomanNumber: aRomanNumber xxx: aSecondRomanNumber withStream: stream
	(self = aNumber) ifTrue: [ stream nextPutAll: aRomanNumber .].
	(self between: aNumber+1 and: aNumber+4) ifTrue:[
		stream nextPutAll: aSecondRomanNumber .
		(self-(aNumber+1) ) timesRepeat: [stream nextPut: $I]].		!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 19:04:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 19:04:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 19:04:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 19:04:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 19:04:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 19:04:36'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 19:06:56'!
test16
	
	self assert: 24 asRomanString equals: 'XXIV'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 19:06:58'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 19:07:21' prior: 50870360!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self number: 4 withRomanNumber: 'IV' aSecondRomanNumber: 'V' withStream: stream.
		self number: 9 withRomanNumber: 'IX' aSecondRomanNumber: 'X' withStream: stream.
		self number: 14 withRomanNumber: 'XIV' aSecondRomanNumber: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' aSecondRomanNumber: 'XX' withStream: stream.
		self number: 24 withRomanNumber: 'XXIV' aSecondRomanNumber: 'XXV' withStream: stream.
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 19:07:28'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 19:10:27'!
test17
	
	self assert: 29 asRomanString equals: 'XXIX'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 19:10:55' prior: 50870451!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self number: 4 withRomanNumber: 'IV' aSecondRomanNumber: 'V' withStream: stream.
		self number: 9 withRomanNumber: 'IX' aSecondRomanNumber: 'X' withStream: stream.
		self number: 14 withRomanNumber: 'XIV' aSecondRomanNumber: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' aSecondRomanNumber: 'XX' withStream: stream.
		self number: 24 withRomanNumber: 'XXIV' aSecondRomanNumber: 'XXV' withStream: stream.
		self number: 29 withRomanNumber: 'XXIX' aSecondRomanNumber: 'XXX' withStream: stream.
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 19:11:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 19:11:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 19:11:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 19:11:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 19:11:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 19:11:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 19:11:06'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 19:18:46'!
test18
	
	self assert: 34 asRomanString equals: 'XXXIV'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 19:19:04' prior: 50870531!
asRomanString
	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue:[self timesRepeat: [ stream nextPut: $I ] ].
		self number: 4 withRomanNumber: 'IV' aSecondRomanNumber: 'V' withStream: stream.
		self number: 9 withRomanNumber: 'IX' aSecondRomanNumber: 'X' withStream: stream.
		self number: 14 withRomanNumber: 'XIV' aSecondRomanNumber: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' aSecondRomanNumber: 'XX' withStream: stream.
		self number: 24 withRomanNumber: 'XXIV' aSecondRomanNumber: 'XXV' withStream: stream.
		self number: 29 withRomanNumber: 'XXIX' aSecondRomanNumber: 'XXX' withStream: stream.
		self number: 34 withRomanNumber: 'XXXIV' aSecondRomanNumber: 'XXXV' withStream: stream.
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 19:19:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 19:19:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 19:19:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 19:19:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 19:19:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 19:19:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 19:19:09'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 19:29:43'!
forNumber: number nextNumberIs: aRomanSymbol withStream: stream
	(self = number) ifTrue: [ stream nextPutAll: aRomanSymbol .].! !

!methodRemoval: Integer #forNumber:nextNumberIs:withStream: stamp: 'TT 5/10/2021 19:31:42'!
forNumber: number nextNumberIs: aRomanSymbol withStream: stream
	(self = number) ifTrue: [ stream nextPutAll: aRomanSymbol .].!

----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\Roman-Numbers-Integration.pck.st----!

!methodRemoval: DecimalToStringRomanNumberConvertionTest #test16 stamp: 'Install-Roman-Numbers-Integration 5/10/2021 20:17:24'!
test16
	
	self assert: 24 asRomanString equals: 'XXIV'.!

!methodRemoval: DecimalToStringRomanNumberConvertionTest #test15 stamp: 'Install-Roman-Numbers-Integration 5/10/2021 20:17:24'!
test15
	
	self assert: 19 asRomanString equals: 'XIX'.!

!methodRemoval: DecimalToStringRomanNumberConvertionTest #test18 stamp: 'Install-Roman-Numbers-Integration 5/10/2021 20:17:24'!
test18
	
	self assert: 34 asRomanString equals: 'XXXIV'.!

!methodRemoval: Integer #number:withRomanNumber:aSecondRomanNumber:withStream: stamp: 'Install-Roman-Numbers-Integration 5/10/2021 20:17:24'!
number: aNumber withRomanNumber: aRomanNumber aSecondRomanNumber: aSecondRomanNumber withStream: stream
	(self = aNumber) ifTrue: [ stream nextPutAll: aRomanNumber .].
	(self between: aNumber+1 and: aNumber+4) ifTrue:[
		stream nextPutAll: aSecondRomanNumber .
		(self-(aNumber+1) ) timesRepeat: [stream nextPut: $I]].		!

!methodRemoval: DecimalToStringRomanNumberConvertionTest #test17 stamp: 'Install-Roman-Numbers-Integration 5/10/2021 20:17:24'!
test17
	
	self assert: 29 asRomanString equals: 'XXIX'.!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 20:18:05' prior: 50870832!
asRomanString

	^String streamContents: [ :stream |
		(self between: 1 and: 3) ifTrue: [self timesRepeat: [ stream nextPut: $I ]].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPutAll: 'V'.
			(self - 5) timesRepeat: [ stream nextPut: $I ] ].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].
		
		(self between: 10 and: 13) ifTrue: [stream nextPutAll: 'X'.
			(self - 10) timesRepeat: [ stream nextPut: $I ] ].
		self = 14 ifTrue: [stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [stream nextPutAll: 'XV'.
			(self - 15) timesRepeat: [ stream nextPut: $I ] ].
		self = 19 ifTrue: [stream nextPutAll: 'XIX'].
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 20:18:24'!
ERROR!

----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\Roman-Numbers-Integration.pck.st----!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 20:23:49'!
ERROR!

----STARTUP---- (10 May 2021 20:25:02) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!


----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\Roman-Numbers-Integration.pck.st----!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 20:25:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 20:25:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 20:25:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 20:25:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 20:25:33'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 20:27:46'!
test16

	self assert: 20 asRomanString equals: 'XX'.! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 20:27:48'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 20:28:36' prior: 50871197!
asRomanString

	^String streamContents: [ :stream |
		self convertDigitUsing: stream.
		
		self >= 10 ifTrue:[
			stream nextPut: $X.
		(self - 10) convertDigitUsing: stream
		].
		self >= 20 ifTrue:[
			stream nextPut: $X.
		(self - 20) convertDigitUsing: stream
		]
	]! !

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'TT 5/10/2021 20:28:39'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'TT 5/10/2021 20:28:39'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'TT 5/10/2021 20:28:39'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'TT 5/10/2021 20:28:39'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'TT 5/10/2021 20:28:39'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'TT 5/10/2021 20:28:39'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'TT 5/10/2021 20:28:39'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'TT 5/10/2021 20:28:39'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'TT 5/10/2021 20:28:39'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'TT 5/10/2021 20:28:40'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'TT 5/10/2021 20:28:41'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'TT 5/10/2021 20:28:42'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'TT 5/10/2021 20:28:43'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 20:28:44'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'TT 5/10/2021 20:28:44'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'TT 5/10/2021 20:28:45'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'TT 5/10/2021 20:28:45'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'TT 5/10/2021 20:28:45'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'TT 5/10/2021 20:28:45'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'TT 5/10/2021 20:28:46'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'TT 5/10/2021 20:28:46'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'TT 5/10/2021 20:28:46'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'TT 5/10/2021 20:28:46'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'TT 5/10/2021 20:28:47'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'TT 5/10/2021 20:28:48'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'TT 5/10/2021 20:28:49'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'TT 5/10/2021 20:28:50'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 20:29:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 20:29:06'!
PASSED!

	21 asRomanString !

	25 asRomanString !
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 20:32:21' prior: 50871271!
test16

	self assert: 20 asRomanString equals: 'XX'.
	! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 20:32:55' prior: 50871279!
asRomanString

	^String streamContents: [ :stream |
		self convertDigitUsing: stream.
		
		self >= 10 ifTrue:[
			stream nextPut: $X.
		(self - 10) convertDigitUsing: stream
		].
		self >= 20 ifTrue:[
			stream nextPut: $X.
		(self - 20) convertDigitUsing: stream
		].
		self >= 30 ifTrue:[
			stream nextPut: $X.
		(self - 30) convertDigitUsing: stream
		]
	]! !
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 20:33:06'!
test17

	self assert: 30 asRomanString equals: 'XXX'.
	! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 20:33:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 20:33:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 20:33:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 20:33:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 20:33:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 20:33:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 20:33:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 20:33:09'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 20:35:43'!
test18

	self assert: 40 asRomanString equals: 'XL'.
	! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 20:44:15' prior: 50871749!
asRomanString

	^String streamContents: [ :stream |
		self convertDigitUsing: stream.
		
		self >= 40 ifTrue: [
			stream nextPutAll: 'XL'.
			(self - 40) convertDigitUsing: stream.
		] ifFalse: [
			self >= 10 ifTrue:[
				stream nextPut: $X.
			(self - 10) convertDigitUsing: stream
			].
			self >= 20 ifTrue:[
				stream nextPut: $X.
			(self - 20) convertDigitUsing: stream
			].
			self >= 30 ifTrue:[
				stream nextPut: $X.
			(self - 30) convertDigitUsing: stream
			]
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 20:44:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 20:44:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 20:44:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 20:44:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 20:44:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 20:44:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 20:44:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 20:44:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 20:44:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 20:44:18'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 20:44:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 20:44:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 20:44:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 20:44:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 20:44:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 20:44:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 20:44:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 20:44:19'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 20:44:19'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 20:50:21' prior: 50871832!
asRomanString

	^String streamContents: [ :stream |
		self convertDigitUsing: stream.
		
		self >= 40 ifTrue: [
			stream nextPutAll: 'XL'.
			(self - 40) convertDigitUsing: stream.
		] ifFalse: [
			self convertDigitUsing: stream.
			
			(self // 10) ifTrue:[
				stream nextPut: $X.
			(self - 10) convertDigitUsing: stream
			].
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 20:50:35'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 20:50:35'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 20:50:36'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 20:50:36'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 20:50:36'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 20:50:36'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 20:50:36'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 20:50:55' prior: 50871911!
asRomanString

	^String streamContents: [ :stream |
		self >= 40 ifTrue: [
			stream nextPutAll: 'XL'.
			(self - 40) convertDigitUsing: stream.
		] ifFalse: [
			self convertDigitUsing: stream.
			
			(self // 10) ifTrue:[
				stream nextPut: $X.
			(self - 10) convertDigitUsing: stream
			].
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 20:50:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 20:50:59'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 20:51:00'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 20:51:00'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 20:51:00'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 20:51:00'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 20:51:00'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 20:51:00'!
ERROR!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 20:51:00'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 20:51:40' prior: 50871985!
asRomanString

	^String streamContents: [ :stream |
		self >= 40 ifTrue: [
			stream nextPutAll: 'XL'.
			(self - 40) convertDigitUsing: stream.
		] ifFalse: [
			self convertDigitUsing: stream.
			
			(self // 10) timesRepeat:[
				stream nextPut: $X.
			(self - 10) convertDigitUsing: stream
			].
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 20:51:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 20:51:45'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 21:08:02' prior: 50872058!
asRomanString

	^String streamContents: [ :stream |
		self >= 40 ifTrue: [
			stream nextPutAll: 'XL'.
			(self - 40) convertDigitUsing: stream.
		] ifFalse: [
			(self // 10) timesRepeat:[
				stream nextPut: $X.
				(self \\ 10) convertDigitUsing: stream
			].
		]
	]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 21:08:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 21:08:06'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 21:08:06'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 21:08:06'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 21:08:06'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 21:08:06'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 21:08:06'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 21:08:06'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 21:08:06'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 21:08:06'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 21:08:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 21:08:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 21:08:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 21:08:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 21:08:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 21:08:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 21:08:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 21:08:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 21:08:06'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 21:08:20'!
test19

	self assert: 35 asRomanString equals: 'XXXV'.
	! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 21:08:49' prior: 50872131!
asRomanString

	^String streamContents: [ :stream |
		self >= 40 ifTrue: [
			stream nextPutAll: 'XL'.
			(self - 40) convertDigitUsing: stream.
		] ifFalse: [
			self // 10 timesRepeat:[
				stream nextPut: $X].
			].
			(self \\ 10) convertDigitUsing: stream
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'TT 5/10/2021 21:08:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 21:08:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 21:08:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 21:08:52'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'TT 5/10/2021 21:08:53'!
PASSED!
!DecimalToStringRomanNumberConvertionTest methodsFor: 'as yet unclassified' stamp: 'TT 5/10/2021 21:09:01'!
test20

	self assert: 50 asRomanString equals: 'L'.
	! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 21:09:55' prior: 50872209!
asRomanString

	^String streamContents: [ :stream |
		self >= 40 ifTrue: [
			
			self >= 50 ifTrue: [
				stream nextPutAll: 'L'.
				(self - 50) convertDigitUsing: stream.
				] ifFalse: [
				stream nextPutAll: 'XL'.
				(self - 40) convertDigitUsing: stream.
			].
		] ifFalse: [
			self // 10 timesRepeat:[
				stream nextPut: $X].
			].
			(self \\ 10) convertDigitUsing: stream
		]! !

!testRun: #DecimalToStringRomanNumberConvertionTest #test20 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test01 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test02 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test03 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test04 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test05 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test06 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test07 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test08 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test09 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test10 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test11 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test12 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test13 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test14 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test15 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test16 stamp: 'TT 5/10/2021 21:10:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test17 stamp: 'TT 5/10/2021 21:10:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test18 stamp: 'TT 5/10/2021 21:10:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test19 stamp: 'TT 5/10/2021 21:10:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConvertionTest #test20 stamp: 'TT 5/10/2021 21:10:02'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 21:15:35'!
convertTensUsing
	| tens |
	^String streamContents: [ :stream |
		self >= 40 ifTrue: [
			
			self >= 50 ifTrue: [
				stream nextPutAll: 'L'.
				(self - 50) convertDigitUsing: stream.
				] ifFalse: [
				stream nextPutAll: 'XL'.
				(self - 40) convertDigitUsing: stream.
			].
		] ifFalse: [
			self // 10 timesRepeat:[
				stream nextPut: $X].
			].
			(self \\ 10) convertDigitUsing: stream
		]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 21:20:38'!
convertTensUsing: stream
	| tens |
	tens := self // 10.
	(tens between: 1 and: 3) ifTrue: [ tens timesRepeat: [ stream nextPut: $X]]..
	tens = 4 ifTrue: [stream nextPutAll: 'XL'].
	(tens between: 5 and: 8) ifTrue: [stream nextPutAll: 'L'.
		(tens - 5) timesRepeat: [stream nextPut: $X ] ].
	tens = 9 ifTrue: [stream nextPutAll: 'XC'].! !

!methodRemoval: Integer #convertTensUsing stamp: 'TT 5/10/2021 21:20:46'!
convertTensUsing
	| tens |
	^String streamContents: [ :stream |
		self >= 40 ifTrue: [
			
			self >= 50 ifTrue: [
				stream nextPutAll: 'L'.
				(self - 50) convertDigitUsing: stream.
				] ifFalse: [
				stream nextPutAll: 'XL'.
				(self - 40) convertDigitUsing: stream.
			].
		] ifFalse: [
			self // 10 timesRepeat:[
				stream nextPut: $X].
			].
			(self \\ 10) convertDigitUsing: stream
		]!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'TT 5/10/2021 21:22:57'!
convertHundredsUsing: stream
	| hundreds |
	hundreds := self // 100.
	(hundreds between: 1 and: 3) ifTrue: [ hundreds timesRepeat: [ stream nextPut: $X]]..
	hundreds = 4 ifTrue: [stream nextPutAll: 'XL'].
	(hundreds between: 5 and: 8) ifTrue: [stream nextPutAll: 'L'.
		(hundreds - 5) timesRepeat: [stream nextPut: $X ] ].
	hundreds = 9 ifTrue: [stream nextPutAll: 'XC'].! !

!methodRemoval: Integer #asRomanString stamp: 'TT 5/10/2021 21:36:34'!
asRomanString

	^String streamContents: [ :stream |
		self >= 40 ifTrue: [
			
			self >= 50 ifTrue: [
				stream nextPutAll: 'L'.
				(self - 50) convertDigitUsing: stream.
				] ifFalse: [
				stream nextPutAll: 'XL'.
				(self - 40) convertDigitUsing: stream.
			].
		] ifFalse: [
			self // 10 timesRepeat:[
				stream nextPut: $X].
			].
			(self \\ 10) convertDigitUsing: stream
		]!

!methodRemoval: Integer #convertDigitUsing: stamp: 'TT 5/10/2021 21:36:34'!
convertDigitUsing: stream

		(self between: 1 and: 3) ifTrue: [self timesRepeat: [ stream nextPut: $I ]].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPutAll: 'V'.
			(self - 5) timesRepeat: [ stream nextPut: $I ] ].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].!

!methodRemoval: Integer #convertHundredsUsing: stamp: 'TT 5/10/2021 21:36:34'!
convertHundredsUsing: stream
	| hundreds |
	hundreds := self // 100.
	(hundreds between: 1 and: 3) ifTrue: [ hundreds timesRepeat: [ stream nextPut: $X]]..
	hundreds = 4 ifTrue: [stream nextPutAll: 'XL'].
	(hundreds between: 5 and: 8) ifTrue: [stream nextPutAll: 'L'.
		(hundreds - 5) timesRepeat: [stream nextPut: $X ] ].
	hundreds = 9 ifTrue: [stream nextPutAll: 'XC'].!

!methodRemoval: Integer #convertTensUsing: stamp: 'TT 5/10/2021 21:36:34'!
convertTensUsing: stream
	| tens |
	tens := self // 10.
	(tens between: 1 and: 3) ifTrue: [ tens timesRepeat: [ stream nextPut: $X]]..
	tens = 4 ifTrue: [stream nextPutAll: 'XL'].
	(tens between: 5 and: 8) ifTrue: [stream nextPutAll: 'L'.
		(tens - 5) timesRepeat: [stream nextPut: $X ] ].
	tens = 9 ifTrue: [stream nextPutAll: 'XC'].!

----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\Roman-Numbers-Integration.pck.st----!

!methodRemoval: DecimalToStringRomanNumberConvertionTest #test18 stamp: 'Install-Roman-Numbers-Integration 5/10/2021 21:36:50'!
test18

	self assert: 40 asRomanString equals: 'XL'.
	!

!methodRemoval: DecimalToStringRomanNumberConvertionTest #test19 stamp: 'Install-Roman-Numbers-Integration 5/10/2021 21:36:50'!
test19

	self assert: 35 asRomanString equals: 'XXXV'.
	!

!methodRemoval: DecimalToStringRomanNumberConvertionTest #test20 stamp: 'Install-Roman-Numbers-Integration 5/10/2021 21:36:50'!
test20

	self assert: 50 asRomanString equals: 'L'.
	!

!methodRemoval: DecimalToStringRomanNumberConvertionTest #test17 stamp: 'Install-Roman-Numbers-Integration 5/10/2021 21:36:50'!
test17

	self assert: 30 asRomanString equals: 'XXX'.
	!

!methodRemoval: DecimalToStringRomanNumberConvertionTest #test16 stamp: 'Install-Roman-Numbers-Integration 5/10/2021 21:36:50'!
test16

	self assert: 20 asRomanString equals: 'XX'.
	!

!methodRemoval: Integer #asRomanString stamp: 'TT 5/10/2021 21:36:59'!
asRomanString

	^String streamContents: [ :stream |
		self convertDigitUsing: stream.
		
		self >= 10 ifTrue:[
			stream nextPut: $X.
		(self - 10) convertDigitUsing: stream
		]
	]!

!methodRemoval: Integer #convertDigitUsing: stamp: 'TT 5/10/2021 21:36:59'!
convertDigitUsing: stream

		(self between: 1 and: 3) ifTrue: [self timesRepeat: [ stream nextPut: $I ]].
		self = 4 ifTrue: [stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPutAll: 'V'.
			(self - 5) timesRepeat: [ stream nextPut: $I ] ].
		self = 9 ifTrue: [stream nextPutAll: 'IX'].!

----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\Integer-convertUsingunitfiveten.st----!

----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\Roman-Numbers.st----!

----STARTUP---- (17 May 2021 19:55:13) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!


----End fileIn of C:\Users\tomas\Documents\Programming\University\Inge I\2021-1c\17-Portfolio 1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 19:57:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 19:57:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 19:57:51'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 19:57:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 19:57:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 19:57:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 19:57:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 19:57:51'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:17:43'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 20:17:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:17:43'!
FAILURE!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'TT 5/17/2021 20:25:15' prior: 50331768!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'TT 5/17/2021 20:26:54' prior: 50331871!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction value ] ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'value' stamp: 'TT 5/17/2021 20:27:16' prior: 50331827 overrides: 50331755!
value

	^ 0-value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 20:27:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:27:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:27:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 20:27:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 20:27:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 20:27:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 20:27:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 20:27:19'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50331960 overrides: 50331755!
value

	^ value! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'TT 5/17/2021 20:29:30' prior: 50331954!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw) ifTrue: [^0-aTransaction value].
	] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'TT 5/17/2021 20:29:40' prior: 50331998!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw) ifTrue: [^aTransaction value negative].
	] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'TT 5/17/2021 20:30:02' prior: 50332006!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw) ifTrue: [^aTransaction value negative].
		(aTransaction isKindOf: Deposit ) ifTrue: [^aTransaction value].
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 20:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:30:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 20:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 20:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 20:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 20:30:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:30:06'!
FAILURE!

50 negated !
!ReceptiveAccount methodsFor: 'balance' stamp: 'TT 5/17/2021 20:30:55' prior: 50332014!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw) ifTrue: [^aTransaction value negated].
		(aTransaction isKindOf: Deposit ) ifTrue: [^aTransaction value].
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 20:30:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:30:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:30:59'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 20:30:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 20:30:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 20:30:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 20:30:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:30:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'TT 5/17/2021 20:32:17' prior: 50332055!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw) ifTrue: [aTransaction value negated].
		(aTransaction isKindOf: Deposit ) ifTrue: [aTransaction value].
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 20:32:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:32:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:32:20'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 20:32:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 20:32:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 20:32:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 20:32:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:32:20'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'TT 5/17/2021 20:32:36' prior: 50332095!
balance

	^transactions sum: [ :aTransaction | 
		| balance |
		(aTransaction isKindOf: Withdraw) ifTrue: [aTransaction value negated].
		(aTransaction isKindOf: Deposit ) ifTrue: [aTransaction value].
	] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'TT 5/17/2021 20:32:48' prior: 50332135!
balance

	^transactions sum: [ :aTransaction | 
		| balance |
		(aTransaction isKindOf: Withdraw) ifTrue: [balance := aTransaction value negated].
		(aTransaction isKindOf: Deposit ) ifTrue: [balance := aTransaction value].
		^balance
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 20:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:32:52'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 20:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 20:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 20:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 20:32:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:32:52'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'TT 5/17/2021 20:33:04' prior: 50332145!
balance

	^transactions sum: [ :aTransaction | 
		| balance |
		(aTransaction isKindOf: Withdraw) ifTrue: [balance := aTransaction value negated].
		(aTransaction isKindOf: Deposit ) ifTrue: [balance := aTransaction value].
		balance
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 20:34:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:34:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 20:34:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 20:34:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 20:34:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 20:34:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 20:34:24'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/17/2021 20:35:39'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/17/2021 20:38:50'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'TT 5/17/2021 20:38:42'!
test01
	| portfolio |
	
	portfolio := Portfolio new.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:41:15' prior: 50332268!
test01
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 20:41:18'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:41:32'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:41:47' prior: 50332281!
balance
	^0! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 20:41:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:48:06'!
test02
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	account := AccountTransaction new.
	
	account register: deposit.
	
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:48:24' prior: 50332294!
test02
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	account := ReceptiveAccount new.
	
	account register: deposit.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:49:53' prior: 50332304!
test02
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 20:49:55'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:50:00'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:50:04' prior: 50332327!
add: aReceptiveAccount 
	! !

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 20:50:21'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:50:43' prior: 50332286!
balance
	^100! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 20:50:47'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 20:50:47'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 20:50:47'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/17/2021 20:52:25'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:53:05' prior: 50332332!
add: aReceptiveAccount 
	accounts ifNil: [accounts := OrderedCollection new].
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:53:07' prior: 50332362!
add: aReceptiveAccount 
	accounts ifNil: [accounts := OrderedCollection new].
	
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:53:42' prior: 50332339!
balance
	accounts size > 0 ifTrue: [^100].
	^0   ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 20:53:46'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 20:53:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 20:53:46'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:54:25' prior: 50332376!
balance
	
	accounts ifNil: [^0].
	
	^100! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 20:54:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 20:54:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:57:14'!
test03
	| portfolio withdraw deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	account register: deposit.
	account register: withdraw.
	
	portfolio add: account.
	
	self assert: 50 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03 stamp: 'TT 5/17/2021 20:57:15'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:57:46' prior: 50332388!
balance
	
	accounts ifNil: [^0].
	
	^accounts first balance! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 20:57:59'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 20:57:59'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/17/2021 20:57:59'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:59:59'!
test04
	| portfolio withdraw deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	accountPepe register: deposit.
	accountRuperto register: withdraw.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: 50 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04 stamp: 'TT 5/17/2021 21:00:01'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 21:01:50' prior: 50332412!
balance
	
	accounts ifNil: [^0].
	
	accounts size = 1 ifTrue: [^accounts first balance].
	^(accounts at: 1) balance + (accounts at: 2) balance
	! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 21:01:54'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 21:01:54'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/17/2021 21:01:54'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/17/2021 21:01:54'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 21:03:33' prior: 50332424!
test04
	| portfolio deposit accountPepe accountRuperto accountJimmy |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	accountPepe register: deposit.
	accountRuperto register: deposit.
	accountRuperto register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy .
	
	self assert: 300 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04 stamp: 'TT 5/17/2021 21:03:34'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 21:03:34'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 21:03:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/17/2021 21:03:34'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/17/2021 21:03:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 20:59:59' prior: 50332460!
test04
	| portfolio withdraw deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	accountPepe register: deposit.
	accountRuperto register: withdraw.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: 50 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 21:03:53'!
test05
	| portfolio deposit accountPepe accountRuperto accountJimmy |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	accountPepe register: deposit.
	accountRuperto register: deposit.
	accountRuperto register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy .
	
	self assert: 300 equals: portfolio balance.! !

!testRun: #PortfolioTest #test05 stamp: 'TT 5/17/2021 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/17/2021 21:03:54'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/17/2021 21:03:55'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/17/2021 21:03:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 21:04:15' prior: 50332507!
test05
	| portfolio deposit accountPepe accountRuperto accountJimmy |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	accountPepe register: deposit.
	accountRuperto register: deposit.
	accountJimmy register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy .
	
	self assert: 300 equals: portfolio balance.! !

!testRun: #PortfolioTest #test05 stamp: 'TT 5/17/2021 21:04:17'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/17/2021 21:04:22'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 21:05:49' prior: 50332443!
balance
	
	accounts ifNil: [^0].
	
	accounts size = 1 ifTrue: [^accounts first balance].
	accounts size = 2 ifTrue: [^(accounts at: 1) balance + (accounts at: 2) balance].
	(accounts at: 1) balance + (accounts at: 2) balance + (accounts at: 3) balance
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 21:05:54' prior: 50332564!
balance
	
	accounts ifNil: [^0].
	
	accounts size = 1 ifTrue: [^accounts first balance].
	accounts size = 2 ifTrue: [^(accounts at: 1) balance + (accounts at: 2) balance].
	^(accounts at: 1) balance + (accounts at: 2) balance + (accounts at: 3) balance
	! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 21:05:59'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 21:05:59'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/17/2021 21:05:59'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/17/2021 21:05:59'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/17/2021 21:05:59'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 21:07:49' prior: 50332575!
balance
	
	accounts ifNil: [^0].
	
	^accounts sum: [ :account | account balance ]
	! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 21:07:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 21:07:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/17/2021 21:07:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/17/2021 21:07:55'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/17/2021 21:07:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 21:26:37'!
test06
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio add: account.
	
	self should: [portfolio add: account] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test06 stamp: 'TT 5/17/2021 21:26:41'!
ERROR!
!Portfolio class methodsFor: 'exceptions' stamp: 'TT 5/17/2021 21:27:04'!
canNotAddSameAccountTwiceErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'exceptions' stamp: 'TT 5/17/2021 21:27:51' prior: 50332630!
canNotAddSameAccountTwiceErrorDescription
	^'Account is already in portfolio'.! !

!testRun: #PortfolioTest #test06 stamp: 'TT 5/17/2021 21:28:00'!
FAILURE!

Portfolio canNotAddSameAccountTwiceErrorDescription!
!AccountTransaction methodsFor: 'value' stamp: 'TT 5/17/2021 21:53:26'!
addTo: aBalance

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'TT 5/17/2021 21:54:11' overrides: 50332645!
addTo: aBalance

	^value + aBalance! !
!Withdraw methodsFor: 'value' stamp: 'TT 5/17/2021 21:54:22' overrides: 50332645!
addTo: aBalance

	^aBalance - value! !
!Deposit methodsFor: 'value' stamp: 'TT 5/17/2021 21:54:31' prior: 50332650 overrides: 50332645!
addTo: aBalance

	^aBalance - value! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'TT 5/17/2021 21:56:09' prior: 50332186!
balance

	^transactions inject: 0 into: [ :acumBalance :aTransaction | 
		aTransaction addTo: acumBalance 
	] ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 21:56:16'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 21:56:16'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/17/2021 21:56:16'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/17/2021 21:56:16'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/17/2021 21:56:16'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/17/2021 21:56:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 21:56:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 21:56:44'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 21:56:44'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 21:56:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 21:56:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 21:56:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 21:56:44'!
PASSED!
!Deposit methodsFor: 'value' stamp: 'TT 5/17/2021 21:56:57' prior: 50332659 overrides: 50332645!
addTo: aBalance

	^aBalance + value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/17/2021 21:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 21:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/17/2021 21:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/17/2021 21:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/17/2021 21:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/17/2021 21:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/17/2021 21:57:04'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/17/2021 21:57:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/17/2021 21:57:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/17/2021 21:57:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/17/2021 21:57:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/17/2021 21:57:09'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/17/2021 21:57:09'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/17/2021 21:57:09'!
FAILURE!

a := ReceptiveAccount new !

a register: (Deposit for: 20)!

a!

a = a!

b := ReceptiveAccount new 
b register: (Deposit for: 20)!

b!

b := ReceptiveAccount new !

b register: (Deposit for: 20)!

b!

a = b!

a = a!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/17/2021 22:11:09'!
testNN
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio add: account.
	
	"self should: [portfolio add: account] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription"! !

!methodRemoval: PortfolioTest #test06 stamp: 'TT 5/17/2021 22:11:14'!
test06
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio add: account.
	
	self should: [portfolio add: account] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription!

----SNAPSHOT----(17 May 2021 23:53:04) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (18 May 2021 17:26:42) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/18/2021 17:54:30'!
test06
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	self assert: 200 equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test06 stamp: 'TT 5/18/2021 17:54:40'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/18/2021 17:54:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/18/2021 17:54:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/18/2021 17:54:40'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/18/2021 17:54:40'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/18/2021 17:54:40'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/18/2021 17:54:40'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/18/2021 17:54:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/18/2021 17:57:57' prior: 50332796!
test06
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio1.
	
	self assert: 200 equals: portfolio1 balance.! !

----SNAPSHOT----(18 May 2021 17:58:00) CuisUniversity-4532.image priorSource: 36406!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/18/2021 17:58:26' prior: 50332829!
test06
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test06 stamp: 'TT 5/18/2021 17:58:29'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/18/2021 17:58:29'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/18/2021 17:58:37'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/18/2021 17:59:24' prior: 50332847!
test06
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test06 stamp: 'TT 5/18/2021 17:59:31'!
FAILURE!

----SNAPSHOT----(18 May 2021 18:47:11) CuisUniversity-4532.image priorSource: 38162!

----STARTUP---- (20 May 2021 14:46:03) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:03:43'!
test07
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: portfolio hasRegistered! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:03:57' prior: 50332891!
test07
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)! !

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:04:12'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:04:17'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:04:23' prior: 50332909!
hasRegistered: aDeposit 
	^false! !

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:04:26'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:04:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:04:26'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:04:26'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:04:26'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:04:26'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:04:26'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:04:26'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:04:26'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:04:26'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:04:47' prior: 50332871!
test06
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	"self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription"! !

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:04:50'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:04:50'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:04:50'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:04:50'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:04:50'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:04:50'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:04:50'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:04:51'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:04:51'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:05:35'!
test08
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account add: deposit.
	
	self deny: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:06:05' prior: 50332974!
test08
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	self assert: (portfolio hasRegistered: deposit)! !

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:06:08'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:10:26' prior: 50332914!
hasRegistered: aDeposit 
	accounts size = 1 ifTrue: [^accounts first hasRegistered: aDeposit ].
	
	^false! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:10:52' prior: 50332996!
hasRegistered: aDeposit 
	^accounts size = 1! !

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:10:55'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:11:12' prior: 50333003!
hasRegistered: aDeposit 
	^(accounts size) = 1! !

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:11:13'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:11:49' prior: 50332984!
test08
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:11:55'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:11:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:11:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:11:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:11:55'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:11:55'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:11:55'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:11:55'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:11:55'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:11:55'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:11:55'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:10:52' prior: 50333010!
hasRegistered: aDeposit 
	^accounts size = 1! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:12:27' prior: 50333053!
hasRegistered: aDeposit 
	accounts ifNil: [accounts := OrderedCollection new].
	
	^accounts size = 1! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:12:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:12:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:12:30'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:12:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:12:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/20/2021 15:12:31'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:12:36'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:12:36'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:12:36'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:12:36'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:12:36'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:12:36'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:12:36'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:12:36'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:12:36'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:13:00'!
test09
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:13:12'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:14:06' prior: 50333058!
hasRegistered: aDeposit 
	accounts ifNil: [accounts := OrderedCollection new].
	
	accounts size = 1 ifTrue: [^accounts first hasRegistered: aDeposit ].
	
	^false! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:14:10'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:14:10'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:14:10'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:14:10'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:14:10'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:14:10'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:14:10'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:14:10'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:14:10'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:14:10'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:18:29'!
test10
	| portfolio deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountRuperto register: deposit.
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:18:34' prior: 50333175!
test10
	| portfolio deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountRuperto register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: (portfolio hasRegistered: deposit)! !

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:18:36'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:19:06' prior: 50333144!
hasRegistered: aDeposit 
	accounts ifNil: [accounts := OrderedCollection new].
	
	accounts size = 1 ifTrue: [^accounts first hasRegistered: aDeposit ].
	accounts size = 2 ifTrue: [^(accounts at: 2) hasRegistered: aDeposit ].
	
	^false! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:20:36' prior: 50333206!
hasRegistered: aDeposit 
	accounts ifNil: [accounts := OrderedCollection new].
	
	((accounts size = 1) and: (accounts first hasRegistered: aDeposit)) ifTrue: [^true].
	((accounts size = 2) and: ((accounts at: 2) hasRegistered: aDeposit)) ifTrue: [^true].
	
	^false! !

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:20:42'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:20:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:20:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:20:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:20:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:20:42'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:20:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:20:42'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:20:42'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:20:42'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:20:42'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:20:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:20:55'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:22:42' prior: 50333217!
hasRegistered: aDeposit 
	accounts ifNil: [accounts := OrderedCollection new].
	
	(accounts size = 1) ifTrue: [(accounts first hasRegistered: aDeposit) ifTrue: [^true]].
	(accounts size = 2) ifTrue: [((accounts at: 2) hasRegistered: aDeposit) ifTrue: [^true]].
	
	^false! !

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:22:44'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:22:47'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:22:51'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:29:36'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:29:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:29:37'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:29:37'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:29:37'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:29:37'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:29:37'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:29:37'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:29:37'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:29:37'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:29:37'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:29:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:30:23' prior: 50333189!
test10
	| portfolio deposit accountPepe accountRuperto accountJimmy |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountJimmy register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy.
	
	self assert: (portfolio hasRegistered: deposit)! !

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:30:26'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:30:43' prior: 50333259!
hasRegistered: aDeposit 
	accounts ifNil: [accounts := OrderedCollection new].
	
	(accounts size = 1) ifTrue: [(accounts first hasRegistered: aDeposit) ifTrue: [^true]].
	(accounts size = 2) ifTrue: [((accounts at: 2) hasRegistered: aDeposit) ifTrue: [^true]].
	(accounts size = 3) ifTrue: [((accounts at: 3) hasRegistered: aDeposit) ifTrue: [^true]].
	
	^false! !

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:30:46'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:30:46'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:18:34' prior: 50333329!
test10
	| portfolio deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountRuperto register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:31:14'!
test11
	| portfolio deposit accountPepe accountRuperto accountJimmy |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountJimmy register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy.
	
	self assert: (portfolio hasRegistered: deposit)! !

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 15:31:15'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:31:15'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:34:12' prior: 50333348!
hasRegistered: aDeposit 
	accounts ifNil: [accounts := OrderedCollection new].
	
	^accounts anySatisfy: [ :account | account hasRegistered: aDeposit]! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 15:34:13'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:34:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:35:30'!
test12
	| portfolio1 portfolio2 deposit accountPepe accountRuperto accountJimmy |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountJimmy register: deposit.
	
	portfolio2 add: accountPepe.
	portfolio2 add: accountRuperto.
	portfolio2 add: accountJimmy.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:36:00' prior: 50333488!
test12
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)! !

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 15:36:56'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:36:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:43:50'!
test13
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions size = 0)! !

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 15:43:52'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:43:57'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:44:05' prior: 50333560!
transactions
	^OrderedCollection new! !

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 15:44:06'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:44:06'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:44:06'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:44:06'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:44:06'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:44:06'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:44:06'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:44:06'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:44:06'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:44:06'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:44:07'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 15:44:07'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 15:44:07'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 15:44:07'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:44:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:51:29'!
test14
	| portfolio account deposit transactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit .
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio transactions = transactions.! !

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 15:53:26'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 15:54:39'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:57:08' prior: 50333565!
transactions
	| transactions |
	 transactions := OrderedCollection new.
	
	accounts size = 1 ifTrue: [transactions add: accounts first].
	
	^transactions ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:57:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:57:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:57:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:57:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:57:09'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:57:10'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:57:10'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:57:10'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:57:10'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:57:10'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 15:57:10'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 15:57:10'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 15:57:10'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 15:57:10'!
ERROR!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:57:10'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 15:57:41'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 15:57:41'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 15:58:10'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 15:59:33' prior: 50333621!
transactions
	| transactions |
	 transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	accounts size = 1 ifTrue: [transactions add: accounts first].
	
	^transactions ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:59:34'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:59:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:59:34'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:59:34'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:59:34'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:59:35'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:59:35'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:59:35'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:59:35'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:59:35'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 15:59:35'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 15:59:35'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 15:59:35'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 15:59:35'!
FAILURE!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:59:35'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 15:59:35'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 15:59:57'!
FAILURE!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 15:59:57'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 15:59:57'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:03:57' prior: 50333604!
test14
	| portfolio account deposit transactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit .
	
	transactions := OrderedCollection with: deposit.
	
	self assert: (portfolio transactions) = transactions.! !

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:03:58'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:04:37' prior: 50333755!
test14
	| portfolio account deposit transactions transactions2 |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit .
	
	transactions := OrderedCollection with: deposit.
	transactions2 := portfolio transactions.
	
	self assert: transactions2 = transactions.! !

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:04:38'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:05:41' prior: 50333770!
test14
	| portfolio account deposit transactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: (portfolio transactions) = transactions.! !

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:05:42'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:06:16' prior: 50333671!
transactions
	| transactions |
	 transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	accounts size = 1 ifTrue: [transactions add: accounts transactions ].
	
	^transactions ! !

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:06:21'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:06:26'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:06:57' prior: 50333801!
transactions
	| transactions |
	 transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	accounts size = 1 ifTrue: [transactions := accounts transactions ].
	
	^transactions ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:07:01'!
ERROR!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:07:01'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:07:01'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:07:20' prior: 50333816!
transactions
	| transactions |
	 transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	accounts size = 1 ifTrue: [transactions := accounts first transactions ].
	
	^transactions ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:07:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:07:21'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:07:21'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:07:21'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:07:21'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:07:21'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:07:21'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:07:21'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:07:21'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:07:21'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:07:22'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:07:22'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:07:22'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:07:22'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:07:22'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:20:08' prior: 50333863!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	accounts size = 1 ifTrue: [transactions := accounts first transactions ].
	
	^transactions ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:20:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:20:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:20:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:20:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:20:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:20:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:20:20'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:20:20'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:20:20'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:20:20'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:20:20'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:20:20'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:20:20'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:20:20'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:20:20'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:22:07' prior: 50333786!
test14
	| portfolio accountPepe accountRuperto deposit1 deposit2 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	transactions := OrderedCollection with: deposit1 with: deposit2.
	
	self assert: (portfolio transactions) = transactions.! !

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:22:10'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:22:17'!
test15
	| portfolio accountPepe accountRuperto deposit1 deposit2 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	transactions := OrderedCollection with: deposit1 with: deposit2.
	
	self assert: (portfolio transactions) = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:05:41' prior: 50333953!
test14
	| portfolio account deposit transactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: (portfolio transactions) = transactions.! !

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:23:02'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:24:06' prior: 50333908!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	accounts size = 1 ifTrue: [transactions addAll: accounts first transactions ].
	accounts size = 2 ifTrue: [transactions addAll: accounts first transactions ].
	
	^transactions ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:24:12'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:24:13'!
FAILURE!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:24:13'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:24:13'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:24:40' prior: 50334009!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	accounts size = 1 ifTrue: [transactions addAll: accounts first transactions ].
	accounts size = 2 ifTrue: [transactions addAll: (accounts at: 2) transactions ].
	
	^transactions ! !

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:24:49'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:24:52'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:24:53'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:24:53'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:24:53'!
FAILURE!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:24:53'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:24:53'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:25:26' prior: 50334061!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	accounts size > 0 ifTrue: [transactions addAll: accounts first transactions ].
	accounts size > 1 ifTrue: [transactions addAll: (accounts at: 2) transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:25:34' prior: 50334116!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	accounts size > 0 ifTrue: [transactions addAll: (accounts at: 1) transactions ].
	accounts size > 1 ifTrue: [transactions addAll: (accounts at: 2) transactions ].
	
	^transactions ! !

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:25:40'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:25:43'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:25:43'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:25:43'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:25:44'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:25:44'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:27:01' prior: 50333974!
test15
	| portfolio accountPepe accountRuperto accountJimmy deposit1 deposit2 deposit3 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	deposit3 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	accountJimmy register: deposit2.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy.
	
	transactions := OrderedCollection with: deposit1 with: deposit2 with: deposit3.
	
	self assert: (portfolio transactions) = transactions.! !

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:27:03'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:27:07'!
test16
	| portfolio accountPepe accountRuperto accountJimmy deposit1 deposit2 deposit3 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	deposit3 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	accountJimmy register: deposit2.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy.
	
	transactions := OrderedCollection with: deposit1 with: deposit2 with: deposit3.
	
	self assert: (portfolio transactions) = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:22:17' prior: 50334182!
test15
	| portfolio accountPepe accountRuperto deposit1 deposit2 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	transactions := OrderedCollection with: deposit1 with: deposit2.
	
	self assert: (portfolio transactions) = transactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:27:32' prior: 50334129!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	accounts size > 0 ifTrue: [transactions addAll: (accounts at: 1) transactions ].
	accounts size > 1 ifTrue: [transactions addAll: (accounts at: 2) transactions ].
	accounts size > 2 ifTrue: [transactions addAll: (accounts at: 3) transactions ].
	
	^transactions ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:27:44'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:27:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:27:44'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:27:44'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:27:44'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:27:44'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 16:27:45'!
FAILURE!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 16:27:45'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:28:02' prior: 50334209!
test16
	| portfolio accountPepe accountRuperto accountJimmy deposit1 deposit2 deposit3 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	deposit3 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	accountJimmy register: deposit3.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy.
	
	transactions := OrderedCollection with: deposit1 with: deposit2 with: deposit3.
	
	self assert: (portfolio transactions) = transactions.! !

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 16:28:04'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:28:04'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:29:15' prior: 50334253!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	accounts ifNil: [accounts := OrderedCollection new].
	
	accounts do: [ :account | transactions addAll: account transactions ].
	
	^transactions ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:29:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:29:20'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:29:20'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:29:20'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:29:20'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 16:29:20'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:29:20'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:30:46'!
test17
	| portfolio1 portfolio2 deposit account transactions |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:30:51' prior: 50334426!
test17
	| portfolio1 portfolio2 deposit account transactions |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: (portfolio1 transactions = transactions)! !

!testRun: #PortfolioTest #test17 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:30:53'!
PASSED!

!methodRemoval: PortfolioTest #test17 stamp: 'TT 5/20/2021 16:31:01'!
test17
	| portfolio1 portfolio2 deposit account transactions |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: (portfolio1 transactions = transactions)!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/20/2021 16:32:15'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountsPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:32:15' prior: 50333452!
hasRegistered: aDeposit 
	accountsPortfolios ifNil: [accountsPortfolios := OrderedCollection new].
	
	^accountsPortfolios anySatisfy: [ :account | account hasRegistered: aDeposit]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:32:15' prior: 50334377!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	accountsPortfolios ifNil: [accountsPortfolios := OrderedCollection new].
	
	accountsPortfolios do: [ :account | transactions addAll: account transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:32:15' prior: 50332598!
balance
	
	accountsPortfolios ifNil: [^0].
	
	^accountsPortfolios sum: [ :account | account balance ]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 16:32:15' prior: 50332369!
add: aReceptiveAccount 
	accountsPortfolios ifNil: [accountsPortfolios := OrderedCollection new].
	
	accountsPortfolios add: aReceptiveAccount ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 16:32:18'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 16:32:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 16:32:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 16:32:19'!
PASSED!

----SNAPSHOT----(20 May 2021 16:59:47) CuisUniversity-4532.image priorSource: 39464!

----SNAPSHOT----(20 May 2021 17:00:56) CuisUniversity-4532.image priorSource: 94268!

----STARTUP---- (20 May 2021 20:00:58) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!

!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:47:42' overrides: 16896425!
initialize
	accountsPortfolios := OrderedCollection new! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 20:47:44'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 20:47:44'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 20:47:45'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 20:47:45'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:48:06' prior: 50334543!
balance
	
	accountsPortfolios ifNil: [^0].
	
	^accountsPortfolios sum: [ :account | account balance ] ifEmpty: [^0]
	! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 20:48:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 20:48:09'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 20:48:09'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:48:25' prior: 50334532!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	accountsPortfolios do: [ :account | transactions addAll: account transactions ].
	
	^transactions ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 20:48:26'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 20:48:26'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:48:31' prior: 50334523!
hasRegistered: aDeposit 

	^accountsPortfolios anySatisfy: [ :account | account hasRegistered: aDeposit]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:48:38' prior: 50334654!
balance
	
	^accountsPortfolios sum: [ :account | account balance ] ifEmpty: [^0]
	! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 20:48:41'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 20:48:41'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:48:46' prior: 50334550!
add: aReceptiveAccount 

	accountsPortfolios add: aReceptiveAccount ! !

!testRun: #PortfolioTest #test01 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 20:48:47'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 20:48:48'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 20:48:48'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 20:48:48'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 20:48:48'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 20:48:48'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 20:48:48'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:49:34'!
test01EmptyPortfolioHasZeroBalance
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test01 stamp: 'TT 5/20/2021 20:49:34'!
test01
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 20:49:36'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 20:49:37'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 20:49:37'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 20:49:37'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 20:49:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:50:30'!
test02PortfolioWithOneAccountGivesCorrectBalance
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test02 stamp: 'TT 5/20/2021 20:50:30'!
test02
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:50:56'!
test03PortfolioWithTwoAccountsGivesCorrectBalance
	| portfolio withdraw deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	account register: deposit.
	account register: withdraw.
	
	portfolio add: account.
	
	self assert: 50 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test03 stamp: 'TT 5/20/2021 20:50:56'!
test03
	| portfolio withdraw deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	account register: deposit.
	account register: withdraw.
	
	portfolio add: account.
	
	self assert: 50 equals: portfolio balance.!

!methodRemoval: PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/20/2021 20:52:02'!
test03PortfolioWithTwoAccountsGivesCorrectBalance
	| portfolio withdraw deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	account register: deposit.
	account register: withdraw.
	
	portfolio add: account.
	
	self assert: 50 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:52:07'!
test03PortfolioWithTwoAccountsGivesCorrectBalance

	| portfolio withdraw deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	accountPepe register: deposit.
	accountRuperto register: withdraw.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: 50 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04 stamp: 'TT 5/20/2021 20:52:08'!
test04
	| portfolio withdraw deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	accountPepe register: deposit.
	accountRuperto register: withdraw.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: 50 equals: portfolio balance.!

!methodRemoval: PortfolioTest #test05 stamp: 'TT 5/20/2021 20:52:23'!
test05
	| portfolio deposit accountPepe accountRuperto accountJimmy |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	accountPepe register: deposit.
	accountRuperto register: deposit.
	accountJimmy register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy .
	
	self assert: 300 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:53:31'!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	"self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription"! !

!methodRemoval: PortfolioTest #test06 stamp: 'TT 5/20/2021 20:53:31'!
test06
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	"self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription"!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:54:54'!
test07EmptyPortfolioDoesNotHaveTransactionsRegistered
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test07 stamp: 'TT 5/20/2021 20:54:54'!
test07
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:58:40'!
test08PortfolioWithOneAccountThatHasTransactionHasItRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08 stamp: 'TT 5/20/2021 20:58:40'!
test08
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:58:59'!
test08PortfolioWithOneAccountThatHasATransactionHasItRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08PortfolioWithOneAccountThatHasTransactionHasItRegistered stamp: 'TT 5/20/2021 20:58:59'!
test08PortfolioWithOneAccountThatHasTransactionHasItRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:02:35'!
test08PortfolioWithOneAccountHasOneOfItsTransactionsRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08PortfolioWithOneAccountThatHasATransactionHasItRegistered stamp: 'TT 5/20/2021 21:02:35'!
test08PortfolioWithOneAccountThatHasATransactionHasItRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:03:01'!
test09PortfolioWithOneAccountDoesNotATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test09 stamp: 'TT 5/20/2021 21:03:01'!
test09
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:03:09'!
test09PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test09PortfolioWithOneAccountDoesNotATransactionRegistered stamp: 'TT 5/20/2021 21:03:09'!
test09PortfolioWithOneAccountDoesNotATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:03:28'!
test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered
	| portfolio deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountRuperto register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test10 stamp: 'TT 5/20/2021 21:03:28'!
test10
	| portfolio deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountRuperto register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: (portfolio hasRegistered: deposit)!

!methodRemoval: PortfolioTest #test11 stamp: 'TT 5/20/2021 21:03:41'!
test11
	| portfolio deposit accountPepe accountRuperto accountJimmy |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountJimmy register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy.
	
	self assert: (portfolio hasRegistered: deposit)!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/20/2021 21:14:31'!
Object subclass: #Portfolio
	instanceVariableNames: 'financialEntities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:14:31' prior: 50334703!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	financialEntities do: [ :account | transactions addAll: account transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:14:31' prior: 50334607 overrides: 16896425!
initialize
	financialEntities := OrderedCollection new! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:14:32' prior: 50334751!
hasRegistered: aDeposit 

	^financialEntities anySatisfy: [ :account | account hasRegistered: aDeposit]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:14:32' prior: 50334758!
balance
	
	^financialEntities sum: [ :account | account balance ] ifEmpty: [^0]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:14:32' prior: 50334803!
add: aReceptiveAccount 

	financialEntities add: aReceptiveAccount ! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/20/2021 21:14:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/20/2021 21:14:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/20/2021 21:14:35'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/20/2021 21:14:35'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/20/2021 21:14:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/20/2021 21:14:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/20/2021 21:14:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/20/2021 21:14:36'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 21:14:36'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 21:14:36'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 21:14:36'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 21:14:36'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 21:14:36'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 21:14:36'!
PASSED!

Object subclass: #FinancialEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialEntity category: 'Portfolio-Ejercicio' stamp: 'TT 5/20/2021 21:29:49'!
Object subclass: #FinancialEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialEntities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/20/2021 21:30:04'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialEntities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'TT 5/20/2021 21:30:11'!
FinancialEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/20/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/20/2021 21:31:25'!
PASSED!
!FinancialEntity methodsFor: 'no messages' stamp: 'TT 5/20/2021 21:33:52'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:34:06'!
transactions

	self subclassResponsibility ! !
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:34:25'!
balance

	self subclassResponsibility ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 22:28:44' prior: 50335219 overrides: 50335382!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	financialEntities do: [ :finanialEntity | transactions addAll: finanialEntity transactions ].
	
	^transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'TT 5/20/2021 23:57:02' prior: 50331867 overrides: 50335382!
transactions

	^ transactions copy! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:01:28'!
test08PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test09PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:01:28'!
test09PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:01:37'!
test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:01:37'!
test08PortfolioWithOneAccountHasOneOfItsTransactionsRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:01:53'!
test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:01:53'!
test08PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:02:02'!
test08EmptyPortfolioDoesNotHaveTransactionsRegistered
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test07EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:02:02'!
test07EmptyPortfolioDoesNotHaveTransactionsRegistered
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:04:37'!
test12PortfolioWithAPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test12 stamp: 'TT 5/21/2021 00:04:37'!
test12
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:05:07'!
test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test12PortfolioWithAPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:05:07'!
test12PortfolioWithAPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:07:36'!
test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 portfolio3 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio3 add: account.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)! !

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:07:37'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:07:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:07:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:07:37'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:07:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:07:38'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:07:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:07:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:07:38'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:07:38'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'TT 5/21/2021 00:07:38'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:07:38'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'TT 5/21/2021 00:07:38'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'TT 5/21/2021 00:07:38'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'TT 5/21/2021 00:07:38'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/21/2021 00:07:38'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:09:12'!
test14EmptyPortfolioHasNoTransactions
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions size = 0)! !

!methodRemoval: PortfolioTest #test13 stamp: 'TT 5/21/2021 00:09:12'!
test13
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions size = 0)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:09:57'!
test15PortfolioWithOneAccountHasOneTransaction
	| portfolio account deposit transactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: (portfolio transactions) = transactions.! !

!methodRemoval: PortfolioTest #test14 stamp: 'TT 5/21/2021 00:09:57'!
test14
	| portfolio account deposit transactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: (portfolio transactions) = transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:10:25'!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| portfolio accountPepe accountRuperto deposit1 deposit2 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	transactions := OrderedCollection with: deposit1 with: deposit2.
	
	self assert: (portfolio transactions) = transactions.! !

!methodRemoval: PortfolioTest #test15 stamp: 'TT 5/21/2021 00:10:25'!
test15
	| portfolio accountPepe accountRuperto deposit1 deposit2 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	transactions := OrderedCollection with: deposit1 with: deposit2.
	
	self assert: (portfolio transactions) = transactions.!

!methodRemoval: PortfolioTest #test16 stamp: 'TT 5/21/2021 00:10:33'!
test16
	| portfolio accountPepe accountRuperto accountJimmy deposit1 deposit2 deposit3 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	deposit3 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	accountJimmy register: deposit3.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy.
	
	transactions := OrderedCollection with: deposit1 with: deposit2 with: deposit3.
	
	self assert: (portfolio transactions) = transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:12:41'!
test04OneDepthPortfolioWithAnAccountGivesCorrectBalance
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance) equals: 20.! !

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:43'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:12:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:12:43'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:12:43'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/21/2021 00:12:43'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:44'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:12:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:44'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:44'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:12:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:45'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:46'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:46'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:12:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:12:46'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:12:46'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/21/2021 00:12:46'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/21/2021 00:12:47'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:12:57'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/21/2021 00:12:57'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:13:10'!
test04TwoDepthPortfolioWithAnAccountGivesCorrectBalance
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance) equals: 20.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:13:14'!
test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance) equals: 20.! !

!methodRemoval: PortfolioTest #test04TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:13:16'!
test04TwoDepthPortfolioWithAnAccountGivesCorrectBalance
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance) equals: 20.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:13:37' prior: 50336076!
test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance
	| portfolio1 portfolio2 portfolio3 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio3 add: account.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: portfolio1 balance equals: 20.! !

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:13:39'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:13:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:13:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:13:40'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/21/2021 00:13:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:18:13'!
test17OneDepthPortfolioWithAnAccountGivesCorrectBalance
	| transactions portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .! !

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:18:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:18:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:18:16'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/21/2021 00:18:16'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:18:30'!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .! !

!methodRemoval: PortfolioTest #test17OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:18:33'!
test17OneDepthPortfolioWithAnAccountGivesCorrectBalance
	| transactions portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:18:57' prior: 50336268!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions portfolio1 portfolio2 portfolio3 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio3 add: account.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:18:30' prior: 50336303!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:19:18'!
test18TwoDepthPortfolioWithAnAccountHasOneTransaction
	| transactions portfolio1 portfolio2 portfolio3 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio3 add: account.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .! !

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:19:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:19:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:19:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:19:20'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:19:20'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:19:20'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:19:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:19:20'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:19:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:19:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:19:21'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:19:21'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:19:21'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:19:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:19:21'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:19:21'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:19:21'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:19:21'!
PASSED!

!testRun: #PortfolioTest #testNN stamp: 'TT 5/21/2021 00:19:21'!
PASSED!

!methodRemoval: PortfolioTest #testNN stamp: 'TT 5/21/2021 00:19:43'!
testNN
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio add: account.
	
	"self should: [portfolio add: account] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription"!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:25:36' prior: 50335012!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:25:38'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:25:38'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:25:38'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:29:10' prior: 50336441!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!Portfolio class methodsFor: 'exceptions' stamp: 'TT 5/21/2021 00:29:25'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.! !

!methodRemoval: Portfolio class #canNotAddSameAccountTwiceErrorDescription stamp: 'TT 5/21/2021 00:29:33'!
canNotAddSameAccountTwiceErrorDescription
	^'Account is already in portfolio'.!

!methodRemoval: Portfolio class #canNotAddSameFinancialAccountTwiceErrorDescription stamp: 'TT 5/21/2021 00:29:42'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.!
!FinancialEntity class methodsFor: 'no messages' stamp: 'TT 5/21/2021 00:29:47'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:29:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:29:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:29:50'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:29:50'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:29:50'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:29:50'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:29:50'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:29:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:29:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:29:51'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:29:51'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:29:51'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:29:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:29:51'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:29:51'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:29:51'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:29:51'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:29:51'!
FAILURE!

!methodRemoval: FinancialEntity class #canNotAddSameFinancialAccountTwiceErrorDescription stamp: 'TT 5/21/2021 00:31:38'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.!
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:31:47'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:32:10' prior: 50335246!
add: aFinancialEntity 
	
	
	
	financialEntities add: aFinancialEntity ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:34:25' prior: 50336637!
add: aFinancialEntity 
	
	financialEntities add: aFinancialEntity ! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 00:36:59'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialEntities parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:36:57'!
addAsParent: aFinancialEntity 
	
	parents add: aFinancialEntity ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:37:24' prior: 50335228 overrides: 16896425!
initialize
	financialEntities := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:37:34' prior: 50336662 overrides: 16896425!
initialize
	financialEntities := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:38:24' prior: 50336643!
add: aFinancialEntity 
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:42:11' prior: 50336675!
add: aFinancialEntity 
	
	parents size > 0 ifTrue: [
		self error: self canNotAddSameFinancialAccountTwiceErrorDescription.
	].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:42:20' prior: 50336682!
add: aFinancialEntity 
	
	parents size > 0 ifTrue: [ self error: self canNotAddSameFinancialAccountTwiceErrorDescription ].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:42:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:42:21'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:42:21'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:42:21'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:42:21'!
ERROR!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:42:21'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:42:21'!
ERROR!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:42:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:42:22'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:42:22'!
ERROR!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:42:22'!
ERROR!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:42:22'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:42:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:42:22'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:42:22'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:42:22'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:42:22'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:42:50' prior: 50336692!
add: aFinancialEntity 
	
	parents size > 0 ifTrue: [ parents first = aFinancialEntity ifTrue: [self error: self canNotAddSameFinancialAccountTwiceErrorDescription] ].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:42:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:42:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:42:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:42:52'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:43:01'!
ERROR!
!ReceptiveAccount methodsFor: 'nil' stamp: 'TT 5/21/2021 00:43:33'!
addAsParent: aFinancialEntity 
	! !
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:43:54'!
addAsParent: aFinancialEntity 
	
	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:43:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:43:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:43:57'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:43:57'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:43:57'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:43:57'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:43:57'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:43:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:43:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:43:58'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:43:58'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:43:58'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:43:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:43:58'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:43:58'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:43:58'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:43:58'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:43:58'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:44:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:44:41'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:44:41'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:44:41'!
ERROR!

!methodRemoval: FinancialEntity #canNotAddSameFinancialAccountTwiceErrorDescription stamp: 'TT 5/21/2021 00:45:09'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.!
!Portfolio class methodsFor: 'exceptions' stamp: 'TT 5/21/2021 00:46:15'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:46:25' prior: 50336766!
add: aFinancialEntity 
	
	parents size > 0 ifTrue: [ parents first = aFinancialEntity ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription] ].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:46:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:46:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:46:26'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:46:27'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:46:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:50:04' prior: 50336521!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:50:05'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:50:42' prior: 50337000!
add: aFinancialEntity 
	
	parents size > 0 ifTrue: [ parents first = aFinancialEntity ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription] ].
	parents size > 1 ifTrue: [ (parents at: 2) = aFinancialEntity ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription] ].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:50:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:50:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:50:43'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:50:44'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:50:44'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:51:47' prior: 50337094!
add: aFinancialEntity 
	
	(parents anySatisfy: [ :parent | parent = aFinancialEntity ]) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:51:48'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:51:49'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:51:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:29:10' prior: 50337076!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:54:25'!
test07ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:54:33'!
test061ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:54:37'!
test07ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:54:53'!
test062ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:54:54'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 00:58:19'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialAssets parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:58:19' prior: 50335392 overrides: 50335382!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	financialAssets do: [ :finanialEntity | transactions addAll: finanialEntity transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:58:19' prior: 50336669 overrides: 16896425!
initialize
	financialAssets := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:58:19' prior: 50335233 overrides: 50335377!
hasRegistered: aDeposit 

	^financialAssets anySatisfy: [ :account | account hasRegistered: aDeposit]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:58:19' prior: 50335240 overrides: 50335387!
balance
	
	^financialAssets sum: [ :account | account balance ] ifEmpty: [^0]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:58:19' prior: 50337174!
add: aFinancialEntity 
	
	(parents anySatisfy: [ :parent | parent = aFinancialEntity ]) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !

!classRenamed: #FinancialEntity as: #FinancialAsset stamp: 'TT 5/21/2021 00:58:36'!
Smalltalk renameClassNamed: #FinancialEntity as: #FinancialAsset!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test061ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:58:44'!
FAILURE!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 00:58:44'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 00:58:44'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:05:37'!
containsAsset: aFinancialAsset 
	
	^aFinancialAsset  = self or: (parents anySatisfy: [ :parent | parent containsAsset: aFinancialAsset ]).! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 01:05:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:05:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 01:05:39'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:05:39'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:05:39'!
PASSED!

!testRun: #PortfolioTest #test061ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:05:39'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:05:39'!
FAILURE!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:05:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 01:05:39'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 01:05:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:05:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:05:40'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:05:40'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:05:40'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 01:05:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 01:05:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 01:05:40'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:05:40'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:05:40'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:05:40'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:05:49' prior: 50337453!
containsAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsAsset: aFinancialAsset ]).! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test061ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:05:52'!
FAILURE!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:05:52'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:05:52'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:07:01' prior: 50337363!
add: aFinancialEntity 
	
	(aFinancialEntity containsAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 01:07:02'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:07:02'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 01:07:02'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:07:02'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:07:02'!
ERROR!

!testRun: #PortfolioTest #test061ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:07:02'!
FAILURE!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:07:02'!
FAILURE!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:07:02'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 01:07:02'!
ERROR!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 01:07:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:07:02'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:07:02'!
ERROR!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:07:03'!
ERROR!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:07:03'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 01:07:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 01:07:03'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 01:07:03'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:07:03'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:07:03'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:07:34' prior: 50337617!
add: aFinancialEntity 
	
	(self containsAsset: aFinancialEntity ) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:07:37' prior: 50337698!
add: aFinancialEntity 
	
	(self containsAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test061ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:07:38'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:07:38'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:09:24'!
test063ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:09:25'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:13:34'!
containsParentAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsAsset: aFinancialAsset ]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:13:34' prior: 50337535!
containsAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsParentAsset: aFinancialAsset ]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:13:34' prior: 50337709!
add: aFinancialEntity 
	
	(self containsParentAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:13:34' prior: 50337808!
containsParentAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsParentAsset: aFinancialAsset ]).! !

!methodRemoval: Portfolio #containsAsset: stamp: 'TT 5/21/2021 01:13:34'!
containsAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsParentAsset: aFinancialAsset ]).!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:14:14'!
containsChildAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :child | child containsChildAsset: aFinancialAsset ]).! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test061ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:14:22'!
FAILURE!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:14:22'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 01:14:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 01:14:23'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 01:14:23'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:14:23'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:14:23'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:14:23'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:14:37' prior: 50337824!
add: aFinancialEntity 
	
	(self containsParentAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	(self containsChildAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 01:14:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:14:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 01:14:38'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:14:38'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:14:38'!
PASSED!

!testRun: #PortfolioTest #test061ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:14:39'!
ERROR!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 01:14:39'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:14:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 01:15:00'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:15:59'!
containsChildAsset: aFinancialAsset

	^self = aFinancialAsset ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:16:04' prior: 50338029!
containsChildAsset: aFinancialAsset

	^false! !
!FinancialAsset methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:16:41'!
containsChildAsset: aFinancialAsset

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test061ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 01:16:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 01:17:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 01:17:00'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:17:00'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 01:17:00'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:19:59' prior: 50337250!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: account ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 01:20:05'!
FAILURE!

----STARTUP---- (21 May 2021 23:27:04) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!

!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:47:42' overrides: 16896425!
initialize
	accountsPortfolios := OrderedCollection new! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:48:06' prior: 50334543!
balance
	
	accountsPortfolios ifNil: [^0].
	
	^accountsPortfolios sum: [ :account | account balance ] ifEmpty: [^0]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:48:25' prior: 50334532!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	accountsPortfolios do: [ :account | transactions addAll: account transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:48:31' prior: 50334523!
hasRegistered: aDeposit 

	^accountsPortfolios anySatisfy: [ :account | account hasRegistered: aDeposit]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:48:38' prior: 50338148!
balance
	
	^accountsPortfolios sum: [ :account | account balance ] ifEmpty: [^0]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:48:46' prior: 50334550!
add: aReceptiveAccount 

	accountsPortfolios add: aReceptiveAccount ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:49:34'!
test01EmptyPortfolioHasZeroBalance
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test01 stamp: 'TT 5/21/2021 23:27:09'!
test01
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:50:30'!
test02PortfolioWithOneAccountGivesCorrectBalance
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test02 stamp: 'TT 5/21/2021 23:27:09'!
test02
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:50:56'!
test03PortfolioWithTwoAccountsGivesCorrectBalance
	| portfolio withdraw deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	account register: deposit.
	account register: withdraw.
	
	portfolio add: account.
	
	self assert: 50 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test03 stamp: 'TT 5/21/2021 23:27:09'!
test03
	| portfolio withdraw deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	account register: deposit.
	account register: withdraw.
	
	portfolio add: account.
	
	self assert: 50 equals: portfolio balance.!

!methodRemoval: PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 23:27:09'!
test03PortfolioWithTwoAccountsGivesCorrectBalance
	| portfolio withdraw deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	account register: deposit.
	account register: withdraw.
	
	portfolio add: account.
	
	self assert: 50 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:52:07'!
test03PortfolioWithTwoAccountsGivesCorrectBalance

	| portfolio withdraw deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	accountPepe register: deposit.
	accountRuperto register: withdraw.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: 50 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04 stamp: 'TT 5/21/2021 23:27:09'!
test04
	| portfolio withdraw deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	accountPepe register: deposit.
	accountRuperto register: withdraw.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: 50 equals: portfolio balance.!

!methodRemoval: PortfolioTest #test05 stamp: 'TT 5/21/2021 23:27:09'!
test05
	| portfolio deposit accountPepe accountRuperto accountJimmy |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	accountPepe register: deposit.
	accountRuperto register: deposit.
	accountJimmy register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy .
	
	self assert: 300 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:53:31'!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	"self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription"! !

!methodRemoval: PortfolioTest #test06 stamp: 'TT 5/21/2021 23:27:10'!
test06
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	"self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription"!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:54:54'!
test07EmptyPortfolioDoesNotHaveTransactionsRegistered
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test07 stamp: 'TT 5/21/2021 23:27:10'!
test07
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:58:40'!
test08PortfolioWithOneAccountThatHasTransactionHasItRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08 stamp: 'TT 5/21/2021 23:27:10'!
test08
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 20:58:59'!
test08PortfolioWithOneAccountThatHasATransactionHasItRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08PortfolioWithOneAccountThatHasTransactionHasItRegistered stamp: 'TT 5/21/2021 23:27:10'!
test08PortfolioWithOneAccountThatHasTransactionHasItRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:02:35'!
test08PortfolioWithOneAccountHasOneOfItsTransactionsRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08PortfolioWithOneAccountThatHasATransactionHasItRegistered stamp: 'TT 5/21/2021 23:27:10'!
test08PortfolioWithOneAccountThatHasATransactionHasItRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:03:01'!
test09PortfolioWithOneAccountDoesNotATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test09 stamp: 'TT 5/21/2021 23:27:10'!
test09
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:03:09'!
test09PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test09PortfolioWithOneAccountDoesNotATransactionRegistered stamp: 'TT 5/21/2021 23:27:10'!
test09PortfolioWithOneAccountDoesNotATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:03:28'!
test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered
	| portfolio deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountRuperto register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test10 stamp: 'TT 5/21/2021 23:27:10'!
test10
	| portfolio deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountRuperto register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: (portfolio hasRegistered: deposit)!

!methodRemoval: PortfolioTest #test11 stamp: 'TT 5/21/2021 23:27:10'!
test11
	| portfolio deposit accountPepe accountRuperto accountJimmy |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountJimmy register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy.
	
	self assert: (portfolio hasRegistered: deposit)!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 23:27:10'!
Object subclass: #Portfolio
	instanceVariableNames: 'financialEntities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:14:31' prior: 50338155!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	financialEntities do: [ :account | transactions addAll: account transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:14:31' prior: 50338143 overrides: 16896425!
initialize
	financialEntities := OrderedCollection new! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:14:32' prior: 50338164!
hasRegistered: aDeposit 

	^financialEntities anySatisfy: [ :account | account hasRegistered: aDeposit]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:14:32' prior: 50338171!
balance
	
	^financialEntities sum: [ :account | account balance ] ifEmpty: [^0]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:14:32' prior: 50338177!
add: aReceptiveAccount 

	financialEntities add: aReceptiveAccount ! !

!classDefinition: #FinancialEntity category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 23:27:11'!
Object subclass: #FinancialEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialEntity category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 23:27:11'!
Object subclass: #FinancialEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 23:27:11'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialEntities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 23:27:11'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialEntities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 23:27:11'!
FinancialEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 23:27:11'!
FinancialEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialEntity methodsFor: 'no messages' stamp: 'TT 5/20/2021 21:33:52'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:34:06'!
transactions

	self subclassResponsibility ! !
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 21:34:25'!
balance

	self subclassResponsibility ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/20/2021 22:28:44' prior: 50338512 overrides: 50338597!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	financialEntities do: [ :finanialEntity | transactions addAll: finanialEntity transactions ].
	
	^transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'TT 5/20/2021 23:57:02' prior: 50331867 overrides: 50338597!
transactions

	^ transactions copy! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:01:28'!
test08PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test09PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 23:27:12'!
test09PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:01:37'!
test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:27:12'!
test08PortfolioWithOneAccountHasOneOfItsTransactionsRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:01:53'!
test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 23:27:12'!
test08PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:02:02'!
test08EmptyPortfolioDoesNotHaveTransactionsRegistered
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test07EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 23:27:13'!
test07EmptyPortfolioDoesNotHaveTransactionsRegistered
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:04:37'!
test12PortfolioWithAPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test12 stamp: 'TT 5/21/2021 23:27:13'!
test12
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:05:07'!
test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test12PortfolioWithAPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:27:13'!
test12PortfolioWithAPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:07:36'!
test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 portfolio3 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio3 add: account.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:09:12'!
test14EmptyPortfolioHasNoTransactions
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions size = 0)! !

!methodRemoval: PortfolioTest #test13 stamp: 'TT 5/21/2021 23:27:13'!
test13
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions size = 0)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:09:57'!
test15PortfolioWithOneAccountHasOneTransaction
	| portfolio account deposit transactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: (portfolio transactions) = transactions.! !

!methodRemoval: PortfolioTest #test14 stamp: 'TT 5/21/2021 23:27:13'!
test14
	| portfolio account deposit transactions |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: (portfolio transactions) = transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:10:25'!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| portfolio accountPepe accountRuperto deposit1 deposit2 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	transactions := OrderedCollection with: deposit1 with: deposit2.
	
	self assert: (portfolio transactions) = transactions.! !

!methodRemoval: PortfolioTest #test15 stamp: 'TT 5/21/2021 23:27:13'!
test15
	| portfolio accountPepe accountRuperto deposit1 deposit2 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	transactions := OrderedCollection with: deposit1 with: deposit2.
	
	self assert: (portfolio transactions) = transactions.!

!methodRemoval: PortfolioTest #test16 stamp: 'TT 5/21/2021 23:27:13'!
test16
	| portfolio accountPepe accountRuperto accountJimmy deposit1 deposit2 deposit3 transactions |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	accountJimmy := ReceptiveAccount new.
	deposit1 := Deposit for: 20.
	deposit2 := Deposit for: 40.
	deposit3 := Deposit for: 40.
	
	accountPepe register: deposit1.
	accountRuperto register: deposit2.
	accountJimmy register: deposit3.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	portfolio add: accountJimmy.
	
	transactions := OrderedCollection with: deposit1 with: deposit2 with: deposit3.
	
	self assert: (portfolio transactions) = transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:12:41'!
test04OneDepthPortfolioWithAnAccountGivesCorrectBalance
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance) equals: 20.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:13:10'!
test04TwoDepthPortfolioWithAnAccountGivesCorrectBalance
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance) equals: 20.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:13:14'!
test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance) equals: 20.! !

!methodRemoval: PortfolioTest #test04TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:27:13'!
test04TwoDepthPortfolioWithAnAccountGivesCorrectBalance
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance) equals: 20.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:13:37' prior: 50338916!
test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance
	| portfolio1 portfolio2 portfolio3 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio3 add: account.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: portfolio1 balance equals: 20.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:18:13'!
test17OneDepthPortfolioWithAnAccountGivesCorrectBalance
	| transactions portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:18:30'!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .! !

!methodRemoval: PortfolioTest #test17OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:27:13'!
test17OneDepthPortfolioWithAnAccountGivesCorrectBalance
	| transactions portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:18:57' prior: 50338979!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions portfolio1 portfolio2 portfolio3 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio3 add: account.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:18:30' prior: 50339014!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:19:18'!
test18TwoDepthPortfolioWithAnAccountHasOneTransaction
	| transactions portfolio1 portfolio2 portfolio3 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio3 add: account.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit.
	
	self assert: portfolio1 transactions equals: transactions .! !

!methodRemoval: PortfolioTest #testNN stamp: 'TT 5/21/2021 23:27:14'!
testNN
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 100.
	
	account register: deposit.
	
	portfolio add: account.
	
	"self should: [portfolio add: account] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription"!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:25:36' prior: 50338305!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameAccountTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:29:10' prior: 50339081!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!Portfolio class methodsFor: 'exceptions' stamp: 'TT 5/21/2021 00:29:25'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.! !

!methodRemoval: Portfolio class #canNotAddSameAccountTwiceErrorDescription stamp: 'TT 5/21/2021 23:27:14'!
canNotAddSameAccountTwiceErrorDescription
	^'Account is already in portfolio'.!

!methodRemoval: Portfolio class #canNotAddSameFinancialAccountTwiceErrorDescription stamp: 'TT 5/21/2021 23:27:14'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.!
!FinancialEntity class methodsFor: 'no messages' stamp: 'TT 5/21/2021 00:29:47'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.! !

!methodRemoval: FinancialEntity class #canNotAddSameFinancialAccountTwiceErrorDescription stamp: 'TT 5/21/2021 23:27:14'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.!
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:31:47'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:32:10' prior: 50338539!
add: aFinancialEntity 
	
	
	
	financialEntities add: aFinancialEntity ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:34:25' prior: 50339143!
add: aFinancialEntity 
	
	financialEntities add: aFinancialEntity ! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 23:27:14'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialEntities parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:36:57'!
addAsParent: aFinancialEntity 
	
	parents add: aFinancialEntity ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:37:24' prior: 50338521 overrides: 16896425!
initialize
	financialEntities := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:37:34' prior: 50339168 overrides: 16896425!
initialize
	financialEntities := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:38:24' prior: 50339149!
add: aFinancialEntity 
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:42:11' prior: 50339181!
add: aFinancialEntity 
	
	parents size > 0 ifTrue: [
		self error: self canNotAddSameFinancialAccountTwiceErrorDescription.
	].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:42:20' prior: 50339188!
add: aFinancialEntity 
	
	parents size > 0 ifTrue: [ self error: self canNotAddSameFinancialAccountTwiceErrorDescription ].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:42:50' prior: 50339198!
add: aFinancialEntity 
	
	parents size > 0 ifTrue: [ parents first = aFinancialEntity ifTrue: [self error: self canNotAddSameFinancialAccountTwiceErrorDescription] ].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'TT 5/21/2021 00:43:33'!
addAsParent: aFinancialEntity 
	! !
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:43:54'!
addAsParent: aFinancialEntity 
	
	self subclassResponsibility ! !

!methodRemoval: FinancialEntity #canNotAddSameFinancialAccountTwiceErrorDescription stamp: 'TT 5/21/2021 23:27:15'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.!
!Portfolio class methodsFor: 'exceptions' stamp: 'TT 5/21/2021 00:46:15'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:46:25' prior: 50339208!
add: aFinancialEntity 
	
	parents size > 0 ifTrue: [ parents first = aFinancialEntity ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription] ].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:50:04' prior: 50339094!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:50:42' prior: 50339240!
add: aFinancialEntity 
	
	parents size > 0 ifTrue: [ parents first = aFinancialEntity ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription] ].
	parents size > 1 ifTrue: [ (parents at: 2) = aFinancialEntity ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription] ].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:51:47' prior: 50339267!
add: aFinancialEntity 
	
	(parents anySatisfy: [ :parent | parent = aFinancialEntity ]) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialEntities add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:29:10' prior: 50339252!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:54:25'!
test07ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:54:33'!
test061ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:27:15'!
test07ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:54:53'!
test062ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'TT 5/21/2021 23:27:15'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialAssets parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:58:19' prior: 50338607 overrides: 50338597!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	financialAssets do: [ :finanialEntity | transactions addAll: finanialEntity transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:58:19' prior: 50339175 overrides: 16896425!
initialize
	financialAssets := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:58:19' prior: 50338526 overrides: 50338592!
hasRegistered: aDeposit 

	^financialAssets anySatisfy: [ :account | account hasRegistered: aDeposit]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:58:19' prior: 50338533 overrides: 50338602!
balance
	
	^financialAssets sum: [ :account | account balance ] ifEmpty: [^0]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:58:19' prior: 50339283!
add: aFinancialEntity 
	
	(parents anySatisfy: [ :parent | parent = aFinancialEntity ]) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:05:37'!
containsAsset: aFinancialAsset 
	
	^aFinancialAsset  = self or: (parents anySatisfy: [ :parent | parent containsAsset: aFinancialAsset ]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:05:49' prior: 50339416!
containsAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsAsset: aFinancialAsset ]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:07:01' prior: 50339405!
add: aFinancialEntity 
	
	(aFinancialEntity containsAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:07:34' prior: 50339432!
add: aFinancialEntity 
	
	(self containsAsset: aFinancialEntity ) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:07:37' prior: 50339443!
add: aFinancialEntity 
	
	(self containsAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:09:24'!
test063ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:13:34'!
containsParentAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsAsset: aFinancialAsset ]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:13:34' prior: 50339424!
containsAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsParentAsset: aFinancialAsset ]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:13:34' prior: 50339454!
add: aFinancialEntity 
	
	(self containsParentAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:13:34' prior: 50339478!
containsParentAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsParentAsset: aFinancialAsset ]).! !

!methodRemoval: Portfolio #containsAsset: stamp: 'TT 5/21/2021 23:27:16'!
containsAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsParentAsset: aFinancialAsset ]).!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:14:14'!
containsChildAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :child | child containsChildAsset: aFinancialAsset ]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:14:37' prior: 50339494!
add: aFinancialEntity 
	
	(self containsParentAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	(self containsChildAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	
	
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:15:59'!
containsChildAsset: aFinancialAsset

	^self = aFinancialAsset ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:16:04' prior: 50339543!
containsChildAsset: aFinancialAsset

	^false! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:19:59' prior: 50339295!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: account ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

----SNAPSHOT----(21 May 2021 23:27:24) CuisUniversity-4532.image priorSource: 94354!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 23:28:45' prior: 50339322!
test061ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test061ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:28:46'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 23:29:08'!
test064ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test061ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:29:09'!
test061ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:29:17'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 23:47:37' prior: 50339520!
containsChildAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :child | (child containsChildAsset: aFinancialAsset) or: (child containsParentAsset: aFinancialAsset )]).! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 23:47:39'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:47:39'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:47:39'!
ERROR!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 23:47:39'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 23:47:40'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:47:40'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:47:40'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 23:48:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:48:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 23:48:22'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:48:22'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:48:22'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:48:22'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:48:23'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:48:23'!
ERROR!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 23:48:23'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:48:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 23:48:39'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 23:48:56'!
containsParentAsset: aFinancialAsset

	^false! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 23:49:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:01'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:49:01'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:01'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 23:49:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:25'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:25'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:25'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:25'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:25'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:25'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:25'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 23:49:25'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 23:49:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:26'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:26'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:26'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 23:49:26'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 23:49:26'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 23:49:26'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:49:26'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:49:26'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:26'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 23:49:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:57'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:57'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:49:57'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:57'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:57'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:57'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:57'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 23:49:57'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 23:49:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:58'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:58'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:49:58'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 23:49:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 23:49:58'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 23:49:58'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:49:58'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:49:58'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:49:58'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:29:10' prior: 50339554!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:53:03'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/21/2021 23:53:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:53:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/21/2021 23:53:03'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:53:03'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/21/2021 23:53:03'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:53:03'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:53:04'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/21/2021 23:53:04'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 23:55:16' prior: 50339528!
add: aFinancialEntity 
	"
	(self containsParentAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	(self containsChildAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	"
	parents do: [ :parent | parent xxx: aFinancialEntity ].
	
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 23:55:27'!
xxx: aFinancialAsset! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 23:56:43' prior: 50340131!
xxx: aFinancialAsset
	
	parents size = 0 ifTrue: [
		
	] ifFalse: [
		parents do: [ :parent | parent xxx: aFinancialAsset ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:10:56' prior: 50340135!
xxx: aFinancialAsset
	
	parents size = 0 ifTrue: [
		^aFinancialAsset yyy: self.
	] ifFalse: [
		parents do: [ :parent | parent xxx: aFinancialAsset ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:13:03' prior: 50340142!
xxx: aFinancialAsset
	
	parents size = 0 ifTrue: [
		(aFinancialAsset yyy: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent xxx: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:13:34'!
yyy: aRoot
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:15:56' prior: 50340161!
yyy: aRoot
	
	(aRoot find: self) ifTrue: [^true].
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:17:09' prior: 50340165!
yyy: aRoot
	
	(aRoot find: self) ifTrue: [^true].
	
	financialAssets do: []
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:18:39' prior: 50340170!
yyy: aRoot
	
	(aRoot find: self) ifTrue: [^true].
	
	^(aRoot find: self) or: (financialAssets anySatisfy: [ :child | child yyy: aRoot]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:18:51' prior: 50340176!
yyy: aRoot
	
	^(aRoot find: self) or: (financialAssets anySatisfy: [ :child | child yyy: aRoot]).
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:19:21'!
yyy: aRoot
	^false! !

!methodRemoval: ReceptiveAccount #yyy: stamp: 'TT 5/22/2021 00:19:30'!
yyy: aRoot
	^false!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:20:04'!
find: aFinancialAsset! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:20:15' prior: 50340196!
find: aFinancialAsset

	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :child | (child containsChildAsset: aFinancialAsset) or: (child containsParentAsset: aFinancialAsset )]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:20:42' prior: 50340200!
find: aFinancialAsset

	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :child | child find: aFinancialAsset]).! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:20:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:20:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:20:45'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:20:45'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:20:45'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:20:45'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:20:45'!
FAILURE!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:20:45'!
FAILURE!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:20:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:20:45'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:20:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:20:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:20:46'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:20:46'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:20:46'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:20:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:20:46'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:20:46'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:20:46'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:20:46'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:21:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:21:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:21:00'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:21:01'!
FAILURE!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:21:01'!
FAILURE!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:21:01'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:21:04'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:23:03' prior: 50340115!
add: aFinancialEntity 
	"
	(self containsParentAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	(self containsChildAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	"
	1 halt.
	parents do: [ :parent | parent xxx: aFinancialEntity ].
	
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:23:29' prior: 50340369!
add: aFinancialEntity 
	"
	(self containsParentAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	(self containsChildAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	"
	parents do: [ :parent | parent xxx: aFinancialEntity ].
	
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:23:54' prior: 50340386!
add: aFinancialEntity 
	"
	(self containsParentAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	(self containsChildAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	"
	self xxx: aFinancialEntity .
	
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:23:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:23:58'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:23:58'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:23:58'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:23:58'!
ERROR!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:23:58'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:23:58'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:23:58'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:23:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:23:58'!
ERROR!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:23:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:23:58'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:23:59'!
ERROR!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:23:59'!
ERROR!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:23:59'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:23:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:23:59'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:23:59'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:23:59'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:23:59'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:24:07'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:24:14'!
yyy: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:24:22' prior: 50340497!
yyy: aPortfolio 
	^false! !

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:24:24'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:24:25'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:24:25'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:24:25'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:24:25'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:24:26'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:24:26'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 01:19:59' prior: 50340024!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: account ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/21/2021 00:29:10' prior: 50340585!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: Portfolio #containsParentAsset: stamp: 'TT 5/22/2021 00:25:55'!
containsParentAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (parents anySatisfy: [ :parent | parent containsParentAsset: aFinancialAsset ]).!

!methodRemoval: Portfolio #containsChildAsset: stamp: 'TT 5/22/2021 00:25:56'!
containsChildAsset: aFinancialAsset 
	
	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :child | (child containsChildAsset: aFinancialAsset) or: (child containsParentAsset: aFinancialAsset )]).!

!methodRemoval: ReceptiveAccount #containsParentAsset: stamp: 'TT 5/22/2021 00:26:00'!
containsParentAsset: aFinancialAsset

	^false!

!methodRemoval: ReceptiveAccount #containsChildAsset: stamp: 'TT 5/22/2021 00:26:01'!
containsChildAsset: aFinancialAsset

	^false!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:26:19'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:26:20'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:26:20'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:26:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:26:20'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:26:20'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:26:20'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:26:20'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:28:32'!
isFinancialAssetReachable: aFinancialAsset
	
	parents size = 0 ifTrue: [
		(aFinancialAsset yyy: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent xxx: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:28:32' prior: 50340150!
xxx: aFinancialAsset
	
	parents size = 0 ifTrue: [
		(aFinancialAsset yyy: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent isFinancialAssetReachable: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:28:32' prior: 50340403!
add: aFinancialEntity 
	"
	(self containsParentAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	(self containsChildAsset: aFinancialEntity) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription].
	"
	self isFinancialAssetReachable: aFinancialEntity .
	
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:28:32' prior: 50340711!
isFinancialAssetReachable: aFinancialAsset
	
	parents size = 0 ifTrue: [
		(aFinancialAsset yyy: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent isFinancialAssetReachable: aFinancialAsset) ]
	].! !

!methodRemoval: Portfolio #xxx: stamp: 'TT 5/22/2021 00:28:32'!
xxx: aFinancialAsset
	
	parents size = 0 ifTrue: [
		(aFinancialAsset yyy: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent isFinancialAssetReachable: aFinancialAsset) ]
	].!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:28:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:28:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:28:47'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:28:47'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:28:47'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:28:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:28:47'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:28:47'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:28:47'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:28:47'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:29:29'!
isReachableByFinancialAsset: aRoot
	
	^(aRoot find: self) or: (financialAssets anySatisfy: [ :child | child yyy: aRoot]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:29:29' prior: 50340752!
isFinancialAssetReachable: aFinancialAsset
	
	parents size = 0 ifTrue: [
		(aFinancialAsset isReachableByFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent isFinancialAssetReachable: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:29:29' prior: 50340184!
yyy: aRoot
	
	^(aRoot find: self) or: (financialAssets anySatisfy: [ :child | child isReachableByFinancialAsset: aRoot]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:29:29' prior: 50340849!
isReachableByFinancialAsset: aRoot
	
	^(aRoot find: self) or: (financialAssets anySatisfy: [ :child | child isReachableByFinancialAsset: aRoot]).
	! !

!methodRemoval: Portfolio #yyy: stamp: 'TT 5/22/2021 00:29:29'!
yyy: aRoot
	
	^(aRoot find: self) or: (financialAssets anySatisfy: [ :child | child isReachableByFinancialAsset: aRoot]).
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:29:49' prior: 50340876!
isReachableByFinancialAsset: aFinancialAsset
	
	^(aFinancialAsset find: self) or: (financialAssets anySatisfy: [ :child | child isReachableByFinancialAsset: aFinancialAsset]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:30:16'!
containsFinancialAsset: aFinancialAsset

	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :child | child find: aFinancialAsset]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:30:16' prior: 50340890!
isReachableByFinancialAsset: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :child | child isReachableByFinancialAsset: aFinancialAsset]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:30:16' prior: 50340209!
find: aFinancialAsset

	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :child | child containsFinancialAsset: aFinancialAsset]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:30:17' prior: 50340899!
containsFinancialAsset: aFinancialAsset

	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :child | child containsFinancialAsset: aFinancialAsset]).! !

!methodRemoval: Portfolio #find: stamp: 'TT 5/22/2021 00:30:17'!
find: aFinancialAsset

	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :child | child containsFinancialAsset: aFinancialAsset]).!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:30:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:30:18'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:30:18'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:30:19'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:30:19'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:30:19'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:30:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:30:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:30:19'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:30:19'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:30:30'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:30:49'!
isReachableByFinancialAsset: aPortfolio 
	^false! !

!methodRemoval: ReceptiveAccount #yyy: stamp: 'TT 5/22/2021 00:30:49'!
yyy: aPortfolio 
	^false!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:30:59' prior: 50341017!
isReachableByFinancialAsset: aFinancialAsset 
	^false! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:31:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:31:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:31:02'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:31:02'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:35:10'!
test06ShouldNotAddAnAccountTwice
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio add: account.
	
	self should: [portfolio add: account ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test06ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 00:35:23'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:36:32' prior: 50341025!
isReachableByFinancialAsset: aFinancialAsset 
	^self = aFinancialAsset ! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 00:36:59'!
FAILURE!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:36:59'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 00:36:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:37:43' prior: 50341120!
isReachableByFinancialAsset: aFinancialAsset 
	^aFinancialAsset find: self! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:37:49' prior: 50341207!
isReachableByFinancialAsset: aFinancialAsset 
	^aFinancialAsset containsFinancialAsset: self! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:37:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:37:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:37:51'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:37:52'!
ERROR!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:37:52'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:37:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:37:58'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 00:39:59'!
containsFinancialAsset: aFinancialAsset 
	^self = aFinancialAsset ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/22/2021 00:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/22/2021 00:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/22/2021 00:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/22/2021 00:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/22/2021 00:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/22/2021 00:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/22/2021 00:40:11'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:40:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:40:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:40:14'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:40:14'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:40:14'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:40:14'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:40:14'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:40:14'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 00:40:14'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:40:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 00:54:08'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:54:09'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 00:54:10'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:02:03'!
test06ShouldNotAddAPortfolioTwice
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/22/2021 01:02:05'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 01:02:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:02:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 01:02:05'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 01:02:06'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 01:02:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:02:21'!
test07ShouldNotAddAnAccountTwice
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio add: account.
	
	self should: [portfolio add: account ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test06ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 01:02:21'!
test06ShouldNotAddAnAccountTwice
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio add: account.
	
	self should: [portfolio add: account ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:03:09'!
test07ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test06ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:03:09'!
test06ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:03:22'!
test08ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test062ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:03:22'!
test062ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:03:29'!
test09ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test063ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:03:29'!
test063ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:03:39'!
test10ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test064ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:03:39'!
test064ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:04:05'!
test11ShouldNotAddAnAccountTwice
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio add: account.
	
	self should: [portfolio add: account ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test07ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 01:04:05'!
test07ShouldNotAddAnAccountTwice
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio add: account.
	
	self should: [portfolio add: account ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:08:41' prior: 50341718!
test11ShouldNotAddAnAccountTwice
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 01:08:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 01:08:44'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 01:08:44'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 01:08:44'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 01:08:44'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:40:04'!
test11ShouldNotAddAPortfolioWithTheSameAccount
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 01:40:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 01:40:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:40:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 01:40:20'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:40:20'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:40:20'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/22/2021 01:40:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 01:40:20'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:40:20'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 01:40:20'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 01:40:21'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 01:40:21'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:46:50' prior: 50341742!
test11ShouldNotAddAnAccountTwice
	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 01:46:51'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/22/2021 01:46:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:46:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/22/2021 01:46:51'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:46:51'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/22/2021 01:46:51'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/22/2021 01:46:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 01:46:51'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:46:51'!
PASSED!

!testRun: #PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 01:46:52'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/22/2021 01:46:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:08:41' prior: 50341942!
test11ShouldNotAddAnAccountTwice
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:48:28'!
test13ShouldNotAddAPortfolioWithTheSameAccount
	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:48:37'!
test12ShouldNotAddAPortfolioWithTheSameAccount
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test11ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/22/2021 01:48:37'!
test11ShouldNotAddAPortfolioWithTheSameAccount
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/22/2021 01:54:20'!
test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/22/2021 01:54:20'!
test07PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/22/2021 01:54:30'!
test20EmptyPortfolioDoesNotHaveTransactionsRegistered
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test08EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/22/2021 01:54:30'!
test08EmptyPortfolioDoesNotHaveTransactionsRegistered
	| portfolio deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit for: 20.
	
	self deny: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/22/2021 01:54:39'!
test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:54:39'!
test09PortfolioWithOneAccountHasOneOfItsTransactionsRegistered
	| portfolio deposit account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/22/2021 01:54:50'!
test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered
	| portfolio deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountRuperto register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: (portfolio hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:54:50'!
test10PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered
	| portfolio deposit accountPepe accountRuperto |
	
	portfolio := Portfolio new.
	accountPepe := ReceptiveAccount new.
	accountRuperto := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	accountRuperto register: deposit.
	
	portfolio add: accountPepe.
	portfolio add: accountRuperto.
	
	self assert: (portfolio hasRegistered: deposit)!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/22/2021 01:55:03'!
test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:55:03'!
test12OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio2 add: account.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/22/2021 01:55:17'!
test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 portfolio3 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio3 add: account.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)! !

!methodRemoval: PortfolioTest #test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/22/2021 01:55:17'!
test13TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered
	| portfolio1 portfolio2 portfolio3 deposit account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit for: 20.
	
	account register: deposit.
	
	portfolio3 add: account.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit)!
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:56:27'!
containsFinancialAsset: aFinancialAsset

	self subclassResponsibility ! !
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:56:45'!
isReachableByFinancialAsset: aFinancialAsset
	
	self subclassResponsibility ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 01:59:32' prior: 50340735!
add: aFinancialEntity 

	self isFinancialAssetReachable: aFinancialEntity .
	
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 02:00:35'!
assertFinancialEntityIsNotReachable: aFinancialEntity

	^ self isFinancialAssetReachable: aFinancialEntity! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 02:00:35' prior: 50342285!
add: aFinancialEntity 

	self assertFinancialEntityIsNotReachable: aFinancialEntity .
	
	
	financialAssets add: aFinancialEntity.
	
	aFinancialEntity addAsParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/22/2021 02:00:42' prior: 50342300!
add: aFinancialEntity 

	self assertFinancialEntityIsNotReachable: aFinancialEntity .
	
	financialAssets add: aFinancialEntity.
	aFinancialEntity addAsParent: self.! !

----SNAPSHOT----(22 May 2021 02:29:35) CuisUniversity-4532.image priorSource: 253355!

----STARTUP---- (23 May 2021 12:52:47) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!

!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:05:57'!
addAsPortfolioParent: aFinancialEntity 
	
	parents add: aFinancialEntity ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:05:58' prior: 50342309!
add: aFinancialEntity 

	self assertFinancialEntityIsNotReachable: aFinancialEntity .
	
	financialAssets add: aFinancialEntity.
	aFinancialEntity addAsPortfolioParent: self.! !

!methodRemoval: Portfolio #addAsParent: stamp: 'TT 5/23/2021 13:05:58'!
addAsParent: aFinancialEntity 
	
	parents add: aFinancialEntity !
!ReceptiveAccount methodsFor: 'nil' stamp: 'TT 5/23/2021 13:06:53'!
addAsPortfolioParent: aFinancialEntity 
	! !

!methodRemoval: ReceptiveAccount #addAsParent: stamp: 'TT 5/23/2021 13:06:53'!
addAsParent: aFinancialEntity 
	!
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:07:03'!
addAsPortfolioParent: aFinancialEntity 
	
	self subclassResponsibility ! !

!methodRemoval: FinancialEntity #addAsParent: stamp: 'TT 5/23/2021 13:07:03'!
addAsParent: aFinancialEntity 
	
	self subclassResponsibility !

!classRenamed: #FinancialEntity as: #FinancialAsset stamp: 'TT 5/23/2021 13:13:56'!
Smalltalk renameClassNamed: #FinancialEntity as: #FinancialAsset!
!FinancialAsset methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:14:06' prior: 50342350!
addAsPortfolioParent: aFinancialAsset
	
	self subclassResponsibility ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:14:21' prior: 50342330!
add: aFinancialAsset 

	self assertFinancialEntityIsNotReachable: aFinancialAsset .
	
	financialAssets add: aFinancialAsset.
	aFinancialAsset addAsPortfolioParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:14:26' prior: 50342324 overrides: 50342365!
addAsPortfolioParent: aFinancialAsset 
	
	parents add: aFinancialAsset ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:14:33' prior: 50342293!
assertFinancialEntityIsNotReachable: aFinancialAsset

	^ self isFinancialAssetReachable: aFinancialAsset! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:14:55' prior: 50339399 overrides: 50338602!
balance
	
	^financialAssets sum: [ :aFinancialAsset | aFinancialAsset balance ] ifEmpty: [^0]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:15:27' prior: 50340925 overrides: 50342274!
containsFinancialAsset: aFinancialAsset

	^aFinancialAsset = self or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild containsFinancialAsset: aFinancialAsset]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:15:52' prior: 50339392 overrides: 50338592!
hasRegistered: aDeposit 

	^financialAssets anySatisfy: [ :aFinancialAsset | aFinancialAsset hasRegistered: aDeposit]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:16:24' prior: 50339375 overrides: 50338597!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	financialAssets do: [ :aFinancialAsset | transactions addAll: aFinancialAsset transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:34:33' prior: 50342410 overrides: 50338592!
hasRegistered: aTransaction 

	^financialAssets anySatisfy: [ :aFinancialAsset | aFinancialAsset hasRegistered: aTransaction]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:39:31' prior: 50340907 overrides: 50342279!
isReachableByFinancialAsset: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild isReachableByFinancialAsset: aFinancialAsset]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:40:55'!
assertFinancialAssetIsNotReachable: aFinancialAsset

	^ self isFinancialAssetReachable: aFinancialAsset! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:40:55' prior: 50342371!
add: aFinancialAsset 

	self assertFinancialAssetIsNotReachable: aFinancialAsset .
	
	financialAssets add: aFinancialAsset.
	aFinancialAsset addAsPortfolioParent: self.! !

!methodRemoval: Portfolio #assertFinancialEntityIsNotReachable: stamp: 'TT 5/23/2021 13:40:55'!
assertFinancialEntityIsNotReachable: aFinancialAsset

	^ self isFinancialAssetReachable: aFinancialAsset!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:41:42' prior: 50342446!
assertFinancialAssetIsNotReachable: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset isReachableByFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertFinancialAssetIsNotReachable: aFinancialAsset) ]
	].! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:41:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:41:45'!
PASSED!

!methodRemoval: Portfolio #isFinancialAssetReachable: stamp: 'TT 5/23/2021 13:41:57'!
isFinancialAssetReachable: aFinancialAsset
	
	parents size = 0 ifTrue: [
		(aFinancialAsset isReachableByFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent isFinancialAssetReachable: aFinancialAsset) ]
	].!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:41:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:41:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:41:59'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:41:59'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:41:59'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:41:59'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:41:59'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:42:00'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:42:00'!
PASSED!
!Portfolio class methodsFor: 'exceptions' stamp: 'TT 5/23/2021 13:43:33'!
canNotAddSameFinancialAssetTwiceErrorDescription
	^'Account is already in portfolio'.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:43:33' prior: 50342468!
assertFinancialAssetIsNotReachable: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset isReachableByFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertFinancialAssetIsNotReachable: aFinancialAsset) ]
	].! !

!methodRemoval: Portfolio class #canNotAddSameFinancialAccountTwiceErrorDescription stamp: 'TT 5/23/2021 13:43:33'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:48:49'!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset isReachableByFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertFinancialAssetIsNotReachable: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:48:49' prior: 50342675!
assertFinancialAssetIsNotReachable: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset isReachableByFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:48:50' prior: 50342453!
add: aFinancialAsset 

	self assertNoFinancialAssetIsSharedWith: aFinancialAsset .
	
	financialAssets add: aFinancialAsset.
	aFinancialAsset addAsPortfolioParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:48:50' prior: 50342695!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset isReachableByFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !

!methodRemoval: Portfolio #assertFinancialAssetIsNotReachable: stamp: 'TT 5/23/2021 13:48:50'!
assertFinancialAssetIsNotReachable: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset isReachableByFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:48:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:48:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:48:52'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:48:52'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:48:52'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:48:52'!
ERROR!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:48:52'!
ERROR!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:48:52'!
ERROR!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:48:52'!
ERROR!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:48:52'!
ERROR!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:48:52'!
ERROR!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:48:53'!
ERROR!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:48:53'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:48:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:48:53'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:48:53'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:48:53'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:48:53'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:48:53'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:48:53'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:48:53'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:48:53'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:48:53'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:48:53'!
PASSED!
!Portfolio class methodsFor: 'exceptions' stamp: 'TT 5/23/2021 13:49:23'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:49:24' prior: 50342732!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset isReachableByFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAccountTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !

!methodRemoval: Portfolio class #canNotAddSameFinancialAssetTwiceErrorDescription stamp: 'TT 5/23/2021 13:49:24'!
canNotAddSameFinancialAssetTwiceErrorDescription
	^'Account is already in portfolio'.!
!Portfolio class methodsFor: 'exceptions' stamp: 'TT 5/23/2021 13:50:09'!
canNotAddSameFinancialAssetTwiceErrorDescription
	^'Account is already in portfolio'.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:50:09' prior: 50341487!
test06ShouldNotAddAPortfolioTwice
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:50:09' prior: 50341689!
test10ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:50:09' prior: 50342062!
test13ShouldNotAddAPortfolioWithTheSameAccount
	| portfolio1 portfolio2 portfolio3 portfolio4 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:50:09' prior: 50342048!
test11ShouldNotAddAnAccountTwice
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:50:09' prior: 50341606!
test07ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:50:09' prior: 50341660!
test09ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:50:10' prior: 50342081!
test12ShouldNotAddAPortfolioWithTheSameAccount
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	portfolio2 add: account.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:50:10' prior: 50342852!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset isReachableByFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:50:10' prior: 50341631!
test08ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: Portfolio class #canNotAddSameFinancialAccountTwiceErrorDescription stamp: 'TT 5/23/2021 13:50:10'!
canNotAddSameFinancialAccountTwiceErrorDescription
	^'Account is already in portfolio'.!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:50:14'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:50:15'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:50:15'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:50:15'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:50:15'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:50:15'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:50:15'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:50:15'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:51:29'!
assertFinancialAssetIsNotReachable: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild isReachableByFinancialAsset: aFinancialAsset]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:51:29' prior: 50342982!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertFinancialAssetIsNotReachable: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:51:29' prior: 50342436 overrides: 50342279!
isReachableByFinancialAsset: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild assertFinancialAssetIsNotReachable: aFinancialAsset]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:51:29' prior: 50343105!
assertFinancialAssetIsNotReachable: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild assertFinancialAssetIsNotReachable: aFinancialAsset]).
	! !

!methodRemoval: Portfolio #isReachableByFinancialAsset: stamp: 'TT 5/23/2021 13:51:29'!
isReachableByFinancialAsset: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild assertFinancialAssetIsNotReachable: aFinancialAsset]).
	!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:51:31'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:51:31'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:51:31'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:51:31'!
ERROR!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:51:31'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:51:32'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:51:32'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:51:32'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:51:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:51:32'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:51:32'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:52:26'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:52:26'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:52:26'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:52:26'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:52:26'!
ERROR!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:52:26'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:52:26'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:52:26'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:52:26'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:52:27'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:52:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:52:27'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:52:27'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:52:31'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:52:52'!
assertFinancialAssetIsNotReachable: aFinancialAsset 
	^aFinancialAsset containsFinancialAsset: self! !

!methodRemoval: ReceptiveAccount #isReachableByFinancialAsset: stamp: 'TT 5/23/2021 13:52:52'!
isReachableByFinancialAsset: aFinancialAsset 
	^aFinancialAsset containsFinancialAsset: self!
!FinancialAsset methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:52:59'!
assertFinancialAssetIsNotReachable: aFinancialAsset
	
	self subclassResponsibility ! !

!methodRemoval: FinancialAsset #isReachableByFinancialAsset: stamp: 'TT 5/23/2021 13:52:59'!
isReachableByFinancialAsset: aFinancialAsset
	
	self subclassResponsibility !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:53:07'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:53:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:53:08'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:53:08'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:53:08'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:53:08'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:53:08'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:53:08'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:53:08'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:53:08'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:53:08'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:53:08'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:54:04' prior: 50343116!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		aFinancialAsset assertFinancialAssetIsNotReachable: self
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:54:27' prior: 50343141 overrides: 50343352!
assertFinancialAssetIsNotReachable: aFinancialAsset
	| isReachable |
	isReachable := (aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild assertFinancialAssetIsNotReachable: aFinancialAsset]).
	isReachable ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:54:31'!
ERROR!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:54:31'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:54:32'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:54:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:54:32'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:54:32'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:54:32'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:54:32'!
ERROR!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:54:32'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:54:32'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:54:32'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:54:32'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:54:32'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:54:32'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:51:29' prior: 50343463 overrides: 50343352!
assertFinancialAssetIsNotReachable: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild assertFinancialAssetIsNotReachable: aFinancialAsset]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:51:29' prior: 50343451!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertFinancialAssetIsNotReachable: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:55:38'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:55:39'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:55:39'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:55:39'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:55:39'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:55:39'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:55:39'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:55:39'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:58:05'!
assertNoFinancialAssetIsReachableFrom: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertFinancialAssetIsNotReachable: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:58:05' prior: 50343577!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertFinancialAssetIsNotReachable: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsReachableFrom: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:58:06' prior: 50342723!
add: aFinancialAsset 

	self assertNoFinancialAssetIsReachableFrom: aFinancialAsset .
	
	financialAssets add: aFinancialAsset.
	aFinancialAsset addAsPortfolioParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:58:06' prior: 50343678!
assertNoFinancialAssetIsReachableFrom: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertFinancialAssetIsNotReachable: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsReachableFrom: aFinancialAsset) ]
	].! !

!methodRemoval: Portfolio #assertNoFinancialAssetIsSharedWith: stamp: 'TT 5/23/2021 13:58:06'!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertFinancialAssetIsNotReachable: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsReachableFrom: aFinancialAsset) ]
	].!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 13:58:18'!
assertNoFinancialAssetIsReachableFrom: aFinancialAsset 
	^aFinancialAsset containsFinancialAsset: self! !

!methodRemoval: ReceptiveAccount #assertFinancialAssetIsNotReachable: stamp: 'TT 5/23/2021 13:58:18'!
assertFinancialAssetIsNotReachable: aFinancialAsset 
	^aFinancialAsset containsFinancialAsset: self!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/23/2021 13:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/23/2021 13:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/23/2021 13:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/23/2021 13:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/23/2021 13:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/23/2021 13:58:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/23/2021 13:58:19'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:58:22'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:58:22'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:58:22'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:58:22'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:58:22'!
ERROR!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:58:22'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:58:22'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:58:22'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:58:22'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:58:22'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:58:22'!
ERROR!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:58:22'!
ERROR!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:58:22'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:58:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:58:23'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:58:23'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:58:23'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:58:23'!
ERROR!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:58:23'!
ERROR!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:58:23'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:58:23'!
ERROR!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:58:23'!
ERROR!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:58:23'!
ERROR!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:58:23'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:58:26'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 13:58:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:58:51'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 13:58:51'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:58:51'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:58:51'!
ERROR!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 13:58:52'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:58:52'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:58:52'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:58:52'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 13:58:52'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 13:58:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 13:58:52'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 13:58:52'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 13:58:58'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:00:29'!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertFinancialAssetIsNotReachable: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsReachableFrom: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:00:29' prior: 50343706!
add: aFinancialAsset 

	self assertNoFinancialAssetIsSharedWith: aFinancialAsset .
	
	financialAssets add: aFinancialAsset.
	aFinancialAsset addAsPortfolioParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:00:29' prior: 50343715!
assertNoFinancialAssetIsReachableFrom: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertFinancialAssetIsNotReachable: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:00:29' prior: 50343963!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertFinancialAssetIsNotReachable: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !

!methodRemoval: Portfolio #assertNoFinancialAssetIsReachableFrom: stamp: 'TT 5/23/2021 14:00:29'!
assertNoFinancialAssetIsReachableFrom: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertFinancialAssetIsNotReachable: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 14:00:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:00:35'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 14:00:35'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:00:35'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:00:35'!
ERROR!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 14:00:35'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:00:35'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:00:35'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:00:35'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:00:35'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 14:00:35'!
ERROR!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:00:35'!
ERROR!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:00:35'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 14:00:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 14:00:35'!
ERROR!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 14:00:35'!
ERROR!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:00:36'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:00:36'!
ERROR!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 14:00:36'!
ERROR!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 14:00:36'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:00:36'!
ERROR!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:00:36'!
ERROR!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:00:36'!
ERROR!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:00:36'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:01:07'!
assertNoFinancialAssetIsReachableFrom: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild assertFinancialAssetIsNotReachable: aFinancialAsset]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:01:07' prior: 50343566 overrides: 50343352!
assertFinancialAssetIsNotReachable: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild assertNoFinancialAssetIsReachableFrom: aFinancialAsset]).
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:01:07' prior: 50344000!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		(aFinancialAsset assertNoFinancialAssetIsReachableFrom: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:01:07' prior: 50344114!
assertNoFinancialAssetIsReachableFrom: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild assertNoFinancialAssetIsReachableFrom: aFinancialAsset]).
	! !

!methodRemoval: Portfolio #assertFinancialAssetIsNotReachable: stamp: 'TT 5/23/2021 14:01:07'!
assertFinancialAssetIsNotReachable: aFinancialAsset
	
	^(aFinancialAsset containsFinancialAsset: self) or: (financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild assertNoFinancialAssetIsReachableFrom: aFinancialAsset]).
	!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:01:10'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 14:01:11'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 14:01:11'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:01:11'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:01:11'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:01:11'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:01:11'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:03:40' prior: 50344151!
assertNoFinancialAssetIsReachableFrom: aFinancialAsset
	
	(aFinancialAsset containsFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ].
	
	financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild assertNoFinancialAssetIsReachableFrom: aFinancialAsset]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:03:48' prior: 50344261!
assertNoFinancialAssetIsReachableFrom: aFinancialAsset
	
	(aFinancialAsset containsFinancialAsset: self) ifTrue: [self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ].
	
	financialAssets do: [ :aFinancialAssetChild | aFinancialAssetChild assertNoFinancialAssetIsReachableFrom: aFinancialAsset]
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 14:03:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:03:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 14:03:51'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:03:51'!
ERROR!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:03:51'!
ERROR!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 14:03:51'!
ERROR!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:03:51'!
ERROR!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:03:51'!
ERROR!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:03:51'!
ERROR!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:03:51'!
ERROR!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 14:03:51'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:03:51'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:03:51'!
ERROR!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 14:03:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 14:03:51'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 14:03:51'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:03:51'!
ERROR!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:03:51'!
ERROR!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 14:03:51'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 14:03:51'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:03:51'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:03:52'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:03:52'!
ERROR!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:03:52'!
ERROR!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:03:54'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:04:10' prior: 50344137!
assertNoFinancialAssetIsSharedWith: aFinancialAsset

	parents size = 0 ifTrue: [
		aFinancialAsset assertNoFinancialAssetIsReachableFrom: self
	] ifFalse: [
		parents do: [ :parent | (parent assertNoFinancialAssetIsSharedWith: aFinancialAsset) ]
	].! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 14:04:16'!
FAILURE!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:04:16'!
FAILURE!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:04:16'!
FAILURE!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:04:16'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 14:04:17'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 14:04:17'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:04:17'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:04:17'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:04:17'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:04:17'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 14:04:18'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 14:08:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:08:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 14:08:39'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 14:08:40'!
FAILURE!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:08:40'!
FAILURE!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:08:40'!
FAILURE!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:08:40'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 14:08:43'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:09:23' prior: 50343742!
assertNoFinancialAssetIsReachableFrom: aFinancialAsset 
	(aFinancialAsset containsFinancialAsset: self) ifTrue: [^self error: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription ]! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 14:09:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:09:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 14:09:50'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:09:51'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:09:52'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 14:09:52'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:32:14' prior: 50342428 overrides: 50338592!
hasRegistered: aTransaction 

	^financialAssets anySatisfy: [ :aFinancialAssetChild | aFinancialAssetChild hasRegistered: aTransaction]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:32:19' prior: 50342418 overrides: 50338597!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	financialAssets do: [ :aFinancialAssetChild | transactions addAll: aFinancialAssetChild transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:32:26' prior: 50342393 overrides: 50338602!
balance
	
	^financialAssets sum: [ :aFinancialAssetChild | aFinancialAssetChild balance ] ifEmpty: [^0]
	! !
!FinancialAsset methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 14:37:18'!
actions! !

!methodRemoval: FinancialAsset #actions stamp: 'TT 5/23/2021 14:37:21'!
actions!

----SNAPSHOT----(23 May 2021 14:48:08) CuisUniversity-4532.image priorSource: 341319!
!Portfolio methodsFor: 'transactions - private' stamp: 'TT 5/23/2021 16:07:29'!
addAllTransactionsTo: aCollectionOfTransactions
	financialAssets do: [ :aFinancialAssetChild | aFinancialAssetChild addAllTransactionsTo: aCollectionOfTransactions ]. 
	! !
!Portfolio methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:07:41' prior: 50344680 overrides: 50338597!
transactions
	| transactions |
	transactions := OrderedCollection new.
	
	self addAllTransactionsTo: transactions.
	
	^transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:07:58'!
addAllTransactionsTo: aCollectionOfTransactions
	aCollectionOfTransactions addAll: self transactions.! !
!FinancialAsset methodsFor: 'transactions - private' stamp: 'TT 5/23/2021 16:08:22'!
addAllTransactionsTo: aCollectionOfTransactions
	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:08:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:08:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:08:54'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:08:54'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:08:54'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:08:55'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:08:56'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:08:56'!
PASSED!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:13:03' prior: 50342924!
test11ShouldNotAddAnAccountTwice
	| portfolio1 account1 |
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	
	portfolio1 add: account1.
	
	self should: [portfolio1 add: account1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'nil' stamp: 'TT 5/23/2021 16:16:37' overrides: 16927572!
setUp! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:17:10'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:17:11'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:17:11'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:17:11'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:17:11'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:17:11'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:17:11'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 transaction1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 transaction1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio5 portfolio6 portfolio7 portfolio8 account3 account4 transaction1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:18:45'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio5 portfolio6 portfolio7 portfolio8 account3 account4 transaction1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:19:33' prior: 50344832 overrides: 16927572!
setUp
	portfolio5 := Portfolio new.
	portfolio6 := Portfolio new.
	portfolio7 := Portfolio new.
	portfolio8 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	! !
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:20:01' prior: 50342877!
test06ShouldNotAddAPortfolioTwice

	portfolio5 add: portfolio6.
	
	self should: [portfolio5 add: portfolio6 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:20:11' prior: 50342939!
test07ShouldNotAddTwoPortfoliosToEachOther
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 13:50:09' prior: 50344963!
test06ShouldNotAddAPortfolioTwice
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:20:50'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:21:11' prior: 50338182!
test01EmptyPortfolioHasZeroBalance
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio5 portfolio6 portfolio7 portfolio8 account3 account4 deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio5 portfolio6 portfolio7 portfolio8 account3 account4 deposit1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio5 portfolio6 portfolio7 portfolio8 account3 account4 deposit2 deposit3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio5 portfolio6 portfolio7 portfolio8 account3 account4 deposit3 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:22:01'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio5 portfolio6 portfolio7 portfolio8 account3 account4 deposit3 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:22:10' prior: 50345008!
test01EmptyPortfolioHasZeroBalance

	self assert: 0 equals: portfolio5 balance.! !
!PortfolioTest methodsFor: 'setup' stamp: 'TT 5/23/2021 16:22:36' prior: 50344954 overrides: 16927572!
setUp
	portfolio5 := Portfolio new.
	portfolio6 := Portfolio new.
	portfolio7 := Portfolio new.
	portfolio8 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 20.
	deposit4 := Deposit for: 20.
	! !
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:23:18' prior: 50338194!
test02PortfolioWithOneAccountGivesCorrectBalance

	account3 register: deposit3.
	
	portfolio5 add: account3 .
	
	self assert: 100 equals: portfolio5 balance.! !
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:23:21' prior: 50345069!
test02PortfolioWithOneAccountGivesCorrectBalance

	account3 register: deposit3.
	portfolio5 add: account3 .
	
	self assert: 100 equals: portfolio5 balance.! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:24:32'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio5 portfolio6 portfolio7 portfolio8 account3 account4 deposit3 deposit4 withdraw1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:24:31' prior: 50338255!
test03PortfolioWithTwoAccountsGivesCorrectBalance

	portfolio5 := Portfolio new.
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	deposit3 := Deposit for: 100.
	withdraw1 := Withdraw for: 50.
	
	account3 register: deposit3.
	account4 register: withdraw1.
	
	portfolio5 add: account3.
	portfolio5 add: account4.
	
	self assert: 50 equals: portfolio5 balance.! !
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:24:40' prior: 50345095!
test03PortfolioWithTwoAccountsGivesCorrectBalance

	account3 register: deposit3.
	account4 register: withdraw1.
	
	portfolio5 add: account3.
	portfolio5 add: account4.
	
	self assert: 50 equals: portfolio5 balance.! !
!PortfolioTest methodsFor: 'setup' stamp: 'TT 5/23/2021 16:24:53' prior: 50345058 overrides: 16927572!
setUp
	portfolio5 := Portfolio new.
	portfolio6 := Portfolio new.
	portfolio7 := Portfolio new.
	portfolio8 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 20.
	
	withdraw1 := Withdraw for: 50.
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:24:56'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:24:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:24:57'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:24:57'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:24:57'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:24:57'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:24:57'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:24:57'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:24:57'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:24:57'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:24:57'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:24:57'!
PASSED!
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:27:28' prior: 50338888!
test04OneDepthPortfolioWithAnAccountGivesCorrectBalance

	account3 register: deposit3.
	
	portfolio6 add: account3.
	portfolio5 add: portfolio6.
	
	self assert: (portfolio5 balance) equals: 100.! !

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:27:29'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:27:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:27:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:27:29'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:27:29'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:27:29'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:27:29'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:27:29'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:27:29'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:27:30'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:27:30'!
PASSED!
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:28:28' prior: 50338946!
test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance

	account3 register: deposit3.
	
	portfolio7 add: account3.
	portfolio6 add: portfolio7.
	portfolio5 add: portfolio6.
	
	self assert: portfolio5 balance equals: 100.! !

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:28:30'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:28:31'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:28:31'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:28:31'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:28:31'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:28:31'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:29:06' prior: 50338787!
test14EmptyPortfolioHasNoTransactions

	self assert: (portfolio5 transactions size = 0)! !

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:29:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:29:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:29:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:29:07'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:29:07'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:29:07'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:29:08'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:29:09'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:29:09'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:29:09'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:29:48' prior: 50338800!
test15PortfolioWithOneAccountHasOneTransaction
	| transactions |
	account3 register: deposit3.
	portfolio5 add: account3.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: (portfolio5 transactions) = transactions.! !

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:29:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:29:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:29:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:29:50'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:29:51'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:29:51'!
PASSED!
!PortfolioTest methodsFor: 'setup' stamp: 'TT 5/23/2021 16:30:20' prior: 50345121 overrides: 16927572!
setUp
	portfolio5 := Portfolio new.
	portfolio6 := Portfolio new.
	portfolio7 := Portfolio new.
	portfolio8 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	
	withdraw1 := Withdraw for: 50.
	! !

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:30:27'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:30:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:30:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:30:27'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:30:27'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:30:27'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:30:27'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:30:27'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:30:27'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:30:28'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:30:28'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:31:51' prior: 50338826!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| transactions |
	
	account3 register: deposit3.
	account4 register: deposit4.
	
	portfolio5 add: account3.
	portfolio5 add: account4.
	
	transactions := OrderedCollection with: deposit3 with: deposit4.
	
	self assert: (portfolio5 transactions) = transactions.! !

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:31:53'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:31:54'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:31:54'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:31:58' prior: 50345728!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| transactions |
	
	portfolio5 add: account3.
	portfolio5 add: account4.
	
	transactions := OrderedCollection with: deposit3 with: deposit4.
	
	self assert: (portfolio5 transactions) = transactions.! !
!PortfolioTest methodsFor: 'setup' stamp: 'TT 5/23/2021 16:32:13' prior: 50345624 overrides: 16927572!
setUp
	portfolio5 := Portfolio new.
	portfolio6 := Portfolio new.
	portfolio7 := Portfolio new.
	portfolio8 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	withdraw1 := Withdraw for: 50.
	
	account3 register: deposit3.
	account4 register: deposit4.
	
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:32:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:32:14'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:32:14'!
FAILURE!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:32:14'!
FAILURE!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:32:14'!
FAILURE!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:32:15'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:32:15'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:32:15'!
PASSED!
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:32:20' prior: 50345077!
test02PortfolioWithOneAccountGivesCorrectBalance

	portfolio5 add: account3 .
	
	self assert: 100 equals: portfolio5 balance.! !
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:23:21' prior: 50345948!
test02PortfolioWithOneAccountGivesCorrectBalance

	account3 register: deposit3.
	portfolio5 add: account3 .
	
	self assert: 100 equals: portfolio5 balance.! !
!PortfolioTest methodsFor: 'setup' stamp: 'TT 5/23/2021 16:32:51' prior: 50345845 overrides: 16927572!
setUp
	portfolio5 := Portfolio new.
	portfolio6 := Portfolio new.
	portfolio7 := Portfolio new.
	portfolio8 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	withdraw1 := Withdraw for: 50.
	
	
	! !

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:32:58'!
FAILURE!
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:33:20' prior: 50345833!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| transactions |
	
	account3 register: deposit3.
	account4 register: deposit4.
	
	portfolio5 add: account3.
	portfolio5 add: account4.
	
	transactions := OrderedCollection with: deposit3 with: deposit4.
	
	self assert: (portfolio5 transactions) = transactions.! !

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:33:21'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:33:22'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:33:22'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:33:50' prior: 50339033!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	account3 register: deposit3.
	
	portfolio6 add: account3.
	portfolio5 add: portfolio6.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio5 transactions equals: transactions .! !

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:33:51'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:33:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:33:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:33:51'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:33:52'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:33:53'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:33:53'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:33:53'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:34:25' prior: 50339050!
test18TwoDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	account3 register: deposit3.
	
	portfolio7 add: account3.
	portfolio6 add: portfolio7.
	portfolio5 add: portfolio6.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio5 transactions equals: transactions .! !

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:34:27'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:34:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:34:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:34:27'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:34:27'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:34:27'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:34:27'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:34:27'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:34:28'!
PASSED!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 16:37:43' prior: 50342110!
test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered

	portfolio5 add: account3.
	
	self deny: (portfolio5 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 16:37:53' prior: 50342133!
test20EmptyPortfolioDoesNotHaveTransactionsRegistered

	self deny: (portfolio5 hasRegistered: deposit3)! !

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:37:57'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:37:58'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:37:58'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:37:58'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:37:58'!
PASSED!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 16:38:44' prior: 50342151!
test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered

	account3 register: deposit3.
	portfolio5 add: account3.
	
	self assert: (portfolio5 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 16:39:16' prior: 50342176!
test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered
	
	account3 register: deposit3.
	
	portfolio5 add: account3.
	portfolio5 add: account4.
	
	self assert: (portfolio5 hasRegistered: deposit3)! !

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:39:18'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:39:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:39:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:39:18'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:39:18'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:39:18'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:39:18'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:39:18'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:39:19'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:39:19'!
PASSED!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 16:40:00' prior: 50342208!
test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account3 register: deposit3.
	
	portfolio6 add: account3.
	portfolio5 add: portfolio7.
	
	self assert: (portfolio5 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 16:40:23' prior: 50342239!
test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account3 register: deposit3.
	
	portfolio7 add: account3.
	portfolio6 add: portfolio7.
	portfolio5 add: portfolio6.
	
	self assert: (portfolio5 hasRegistered: deposit3)! !

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:25'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:40:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:40:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:40:26'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:40:26'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:40:26'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:40:26'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:40:26'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:40:26'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:40:26'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:40:26'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:40:26'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:27'!
FAILURE!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:27'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:27'!
FAILURE!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 16:40:47' prior: 50346511!
test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account3 register: deposit3.
	
	portfolio6 add: account3.
	portfolio5 add: portfolio6.
	
	self assert: (portfolio5 hasRegistered: deposit3)! !

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:49'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:40:49'!
PASSED!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:41:56' prior: 50344984!
test06ShouldNotAddAPortfolioTwice

	portfolio5 add: portfolio6.
	
	self should: [portfolio5 add: portfolio6 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:41:58'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:41:59'!
PASSED!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:42:10' prior: 50344972!
test07ShouldNotAddTwoPortfoliosToEachOther

	portfolio5 add: portfolio6.
	
	self should: [portfolio6 add: portfolio5 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:42:27' prior: 50342996!
test08ShouldNotAddTwoPortfoliosToEachOther

	portfolio5 add: portfolio6.
	portfolio6 add: portfolio7.
	
	self should: [portfolio7 add: portfolio5 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:42:44' prior: 50342952!
test09ShouldNotAddTwoPortfoliosToEachOther

	portfolio5 add: portfolio6.
	portfolio6 add: portfolio7.
	
	self should: [portfolio5 add: portfolio7 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:42:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:42:48'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:42:48'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:42:48'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:42:48'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:42:48'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:42:48'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:42:48'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:42:48'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:42:48'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:42:48'!
PASSED!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:43:12' prior: 50342890!
test10ShouldNotAddTwoPortfoliosToEachOther

	portfolio5 add: portfolio7.
	portfolio6 add: portfolio7.
	
	self should: [portfolio5 add: portfolio6 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:44:46' prior: 50344820!
test11ShouldNotAddAnAccountTwice

	portfolio5 add: account3.
	
	self should: [portfolio5 add: account3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:44:49'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:44:50'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:44:50'!
PASSED!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:45:17' prior: 50342967!
test12ShouldNotAddAPortfolioWithTheSameAccount

	portfolio5 add: account3.
	portfolio6 add: account3.
	
	self should: [portfolio5 add: portfolio6 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/23/2021 16:45:48' prior: 50342905!
test13ShouldNotAddAPortfolioWithTheSameAccount

	portfolio5 add: account3.
	portfolio5 add: portfolio6.
	portfolio7 add: portfolio8.
	portfolio8 add: account3.
	
	self should: [portfolio6 add: portfolio7 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:45:51'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:45:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:45:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:45:51'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:45:52'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:45:53'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:45:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/23/2021 16:45:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/23/2021 16:45:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/23/2021 16:45:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/23/2021 16:45:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/23/2021 16:45:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/23/2021 16:45:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/23/2021 16:45:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:45:59'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:46:00'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:46:00'!
PASSED!
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:46:41' prior: 50345110!
test03PortfolioWithTwoAccountsGivesCorrectBalance

	account3 register: deposit3.
	account4 register: deposit4.
	
	portfolio5 add: account3.
	portfolio5 add: account4.
	
	self assert: 150 equals: portfolio5 balance.! !

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:46:42'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:46:43'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:46:43'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:46:43'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:46:43'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:46:43'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:46:43'!
PASSED!
!PortfolioTest methodsFor: 'setup' stamp: 'TT 5/23/2021 16:46:51' prior: 50345964 overrides: 16927572!
setUp
	portfolio5 := Portfolio new.
	portfolio6 := Portfolio new.
	portfolio7 := Portfolio new.
	portfolio8 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	
	account3 register: deposit3.
	account4 register: deposit4.
	
	
	
	! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio5 portfolio6 portfolio7 portfolio8 account3 account4 deposit3 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:47:01'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio5 portfolio6 portfolio7 portfolio8 account3 account4 deposit3 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:47:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:47:06'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:47:06'!
FAILURE!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:47:06'!
FAILURE!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:47:06'!
FAILURE!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:47:06'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:47:06'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:47:06'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:47:07'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:47:07'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:47:07'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:47:07'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:47:07'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:47:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:47:07'!
FAILURE!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:47:07'!
FAILURE!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:47:07'!
FAILURE!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:47:07'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:47:07'!
FAILURE!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:47:07'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:47:07'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:47:07'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:47:07'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:47:07'!
PASSED!
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:47:13' prior: 50345955!
test02PortfolioWithOneAccountGivesCorrectBalance

	portfolio5 add: account3 .
	
	self assert: 100 equals: portfolio5 balance.! !
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:47:18' prior: 50347289!
test03PortfolioWithTwoAccountsGivesCorrectBalance

	portfolio5 add: account3.
	portfolio5 add: account4.
	
	self assert: 150 equals: portfolio5 balance.! !
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:47:22' prior: 50345221!
test04OneDepthPortfolioWithAnAccountGivesCorrectBalance

	portfolio6 add: account3.
	portfolio5 add: portfolio6.
	
	self assert: (portfolio5 balance) equals: 100.! !
!PortfolioTest methodsFor: 'balance' stamp: 'TT 5/23/2021 16:47:25' prior: 50345322!
test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance

	portfolio7 add: account3.
	portfolio6 add: portfolio7.
	portfolio5 add: portfolio6.
	
	self assert: portfolio5 balance equals: 100.! !
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:47:32' prior: 50345521!
test15PortfolioWithOneAccountHasOneTransaction
	| transactions |
	
	portfolio5 add: account3.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: (portfolio5 transactions) = transactions.! !
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:47:36' prior: 50345980!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| transactions |
	
	portfolio5 add: account3.
	portfolio5 add: account4.
	
	transactions := OrderedCollection with: deposit3 with: deposit4.
	
	self assert: (portfolio5 transactions) = transactions.! !
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:47:40' prior: 50346085!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio6 add: account3.
	portfolio5 add: portfolio6.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio5 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'transactions' stamp: 'TT 5/23/2021 16:47:43' prior: 50346189!
test18TwoDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio7 add: account3.
	portfolio6 add: portfolio7.
	portfolio5 add: portfolio6.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio5 transactions equals: transactions .! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:47:48'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:47:49'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:47:49'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:47:49'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:47:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:47:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:47:49'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:47:49'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:47:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:47:50'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:47:50'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:47:50'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:47:50'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:47:50'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:47:50'!
FAILURE!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:48:37'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:48:41'!
FAILURE!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:48:41'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:48:41'!
FAILURE!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 16:49:44' prior: 50346294!
test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	
	portfolio5 add: account3.
	
	self deny: (portfolio5 hasRegistered: deposit4)! !

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:49:47'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:49:47'!
PASSED!

----SNAPSHOT----(23 May 2021 16:49:51) CuisUniversity-4532.image priorSource: 417628!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:50:14'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio6 portfolio7 portfolio8 account3 account4 deposit3 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50346302!
test20EmptyPortfolioDoesNotHaveTransactionsRegistered

	self deny: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50347542!
test15PortfolioWithOneAccountHasOneTransaction
	| transactions |
	
	portfolio1 add: account3.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: (portfolio1 transactions) = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50346839!
test08ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio6.
	portfolio6 add: portfolio7.
	
	self should: [portfolio7 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50346951!
test10ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio7.
	portfolio6 add: portfolio7.
	
	self should: [portfolio1 add: portfolio6 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50346521!
test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account3 register: deposit3.
	
	portfolio7 add: account3.
	portfolio6 add: portfolio7.
	portfolio1 add: portfolio6.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50346961!
test11ShouldNotAddAnAccountTwice

	portfolio1 add: account3.
	
	self should: [portfolio1 add: account3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50347061!
test12ShouldNotAddAPortfolioWithTheSameAccount

	portfolio1 add: account3.
	portfolio6 add: account3.
	
	self should: [portfolio1 add: portfolio6 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50347563!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio6 add: account3.
	portfolio1 add: portfolio6.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50347574!
test18TwoDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio7 add: account3.
	portfolio6 add: portfolio7.
	portfolio1 add: portfolio6.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50347774!
test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	
	portfolio1 add: account3.
	
	self deny: (portfolio1 hasRegistered: deposit4)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50346409!
test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered
	
	account3 register: deposit3.
	
	portfolio1 add: account3.
	portfolio1 add: account4.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50346628!
test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account3 register: deposit3.
	
	portfolio6 add: account3.
	portfolio1 add: portfolio6.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50346730!
test06ShouldNotAddAPortfolioTwice

	portfolio1 add: portfolio6.
	
	self should: [portfolio1 add: portfolio6 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50347525!
test04OneDepthPortfolioWithAnAccountGivesCorrectBalance

	portfolio6 add: account3.
	portfolio1 add: portfolio6.
	
	self assert: (portfolio1 balance) equals: 100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50345052!
test01EmptyPortfolioHasZeroBalance

	self assert: 0 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50347071!
test13ShouldNotAddAPortfolioWithTheSameAccount

	portfolio1 add: account3.
	portfolio1 add: portfolio6.
	portfolio7 add: portfolio8.
	portfolio8 add: account3.
	
	self should: [portfolio6 add: portfolio7 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:14' prior: 50347517!
test03PortfolioWithTwoAccountsGivesCorrectBalance

	portfolio1 add: account3.
	portfolio1 add: account4.
	
	self assert: 150 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:15' prior: 50346400!
test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered

	account3 register: deposit3.
	portfolio1 add: account3.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:15' prior: 50347552!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| transactions |
	
	portfolio1 add: account3.
	portfolio1 add: account4.
	
	transactions := OrderedCollection with: deposit3 with: deposit4.
	
	self assert: (portfolio1 transactions) = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:15' prior: 50346849!
test09ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio6.
	portfolio6 add: portfolio7.
	
	self should: [portfolio1 add: portfolio7 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:15' prior: 50347533!
test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance

	portfolio7 add: account3.
	portfolio6 add: portfolio7.
	portfolio1 add: portfolio6.
	
	self assert: portfolio1 balance equals: 100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:15' prior: 50347510!
test02PortfolioWithOneAccountGivesCorrectBalance

	portfolio1 add: account3 .
	
	self assert: 100 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:15' prior: 50346830!
test07ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio6.
	
	self should: [portfolio6 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:15' prior: 50345424!
test14EmptyPortfolioHasNoTransactions

	self assert: (portfolio1 transactions size = 0)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:15' prior: 50347391 overrides: 16927572!
setUp
	portfolio1 := Portfolio new.
	portfolio6 := Portfolio new.
	portfolio7 := Portfolio new.
	portfolio8 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	
	account3 register: deposit3.
	account4 register: deposit4.
	
	
	
	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:50:20'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio7 portfolio8 account3 account4 deposit3 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:20' prior: 50347904!
test08ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio7.
	
	self should: [portfolio7 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:20' prior: 50348086!
test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance

	portfolio7 add: account3.
	portfolio2 add: portfolio7.
	portfolio1 add: portfolio2.
	
	self assert: portfolio1 balance equals: 100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:20' prior: 50348121 overrides: 16927572!
setUp
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio7 := Portfolio new.
	portfolio8 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	
	account3 register: deposit3.
	account4 register: deposit4.
	
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:20' prior: 50347926!
test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account3 register: deposit3.
	
	portfolio7 add: account3.
	portfolio2 add: portfolio7.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:20' prior: 50348019!
test04OneDepthPortfolioWithAnAccountGivesCorrectBalance

	portfolio2 add: account3.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance) equals: 100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:20' prior: 50347999!
test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account3 register: deposit3.
	
	portfolio2 add: account3.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:20' prior: 50348104!
test07ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio2.
	
	self should: [portfolio2 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:21' prior: 50348009!
test06ShouldNotAddAPortfolioTwice

	portfolio1 add: portfolio2.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:21' prior: 50347947!
test12ShouldNotAddAPortfolioWithTheSameAccount

	portfolio1 add: account3.
	portfolio2 add: account3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:21' prior: 50348075!
test09ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio7.
	
	self should: [portfolio1 add: portfolio7 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:21' prior: 50347958!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio2 add: account3.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:21' prior: 50347969!
test18TwoDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio7 add: account3.
	portfolio2 add: portfolio7.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:21' prior: 50347915!
test10ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio7.
	portfolio2 add: portfolio7.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:21' prior: 50348034!
test13ShouldNotAddAPortfolioWithTheSameAccount

	portfolio1 add: account3.
	portfolio1 add: portfolio2.
	portfolio7 add: portfolio8.
	portfolio8 add: account3.
	
	self should: [portfolio2 add: portfolio7 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:50:26'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio8 account3 account4 deposit3 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:26' prior: 50348156!
test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance

	portfolio3 add: account3.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: portfolio1 balance equals: 100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:26' prior: 50348145!
test08ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:26' prior: 50348263!
test18TwoDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio3 add: account3.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:26' prior: 50348286!
test13ShouldNotAddAPortfolioWithTheSameAccount

	portfolio1 add: account3.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio8.
	portfolio8 add: account3.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:26' prior: 50348180!
test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account3 register: deposit3.
	
	portfolio3 add: account3.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:26' prior: 50348275!
test10ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:26' prior: 50348166 overrides: 16927572!
setUp
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio8 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	
	account3 register: deposit3.
	account4 register: deposit4.
	
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:26' prior: 50348241!
test09ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:50:31'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 account3 account4 deposit3 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:31' prior: 50348342!
test13ShouldNotAddAPortfolioWithTheSameAccount

	portfolio1 add: account3.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account3.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:32' prior: 50348378 overrides: 16927572!
setUp
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account3 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	
	account3 register: deposit3.
	account4 register: deposit4.
	
	
	
	! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:50:35'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 account1 account4 deposit3 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50348330!
test18TwoDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio3 add: account1.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50348055!
test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered

	account1 register: deposit3.
	portfolio1 add: account1.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50348047!
test03PortfolioWithTwoAccountsGivesCorrectBalance

	portfolio1 add: account1.
	portfolio1 add: account4.
	
	self assert: 150 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50348426 overrides: 16927572!
setUp
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account4 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	
	account1 register: deposit3.
	account4 register: deposit4.
	
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50347894!
test15PortfolioWithOneAccountHasOneTransaction
	| transactions |
	
	portfolio1 add: account1.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: (portfolio1 transactions) = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50347937!
test11ShouldNotAddAnAccountTwice

	portfolio1 add: account1.
	
	self should: [portfolio1 add: account1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50348252!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio2 add: account1.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit3.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50347989!
test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered
	
	account1 register: deposit3.
	
	portfolio1 add: account1.
	portfolio1 add: account4.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50348191!
test04OneDepthPortfolioWithAnAccountGivesCorrectBalance

	portfolio2 add: account1.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 balance) equals: 100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50348309!
test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance

	portfolio3 add: account1.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: portfolio1 balance equals: 100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:35' prior: 50348355!
test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account1 register: deposit3.
	
	portfolio3 add: account1.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:36' prior: 50348413!
test13ShouldNotAddAPortfolioWithTheSameAccount

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:36' prior: 50348230!
test12ShouldNotAddAPortfolioWithTheSameAccount

	portfolio1 add: account1.
	portfolio2 add: account1.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:36' prior: 50348200!
test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account1 register: deposit3.
	
	portfolio2 add: account1.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:36' prior: 50348096!
test02PortfolioWithOneAccountGivesCorrectBalance

	portfolio1 add: account1 .
	
	self assert: 100 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:36' prior: 50348064!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| transactions |
	
	portfolio1 add: account1.
	portfolio1 add: account4.
	
	transactions := OrderedCollection with: deposit3 with: deposit4.
	
	self assert: (portfolio1 transactions) = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:36' prior: 50347981!
test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	
	portfolio1 add: account1.
	
	self deny: (portfolio1 hasRegistered: deposit4)! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:50:38'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 deposit3 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:38' prior: 50348525!
test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered
	
	account1 register: deposit3.
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	
	self assert: (portfolio1 hasRegistered: deposit3)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:38' prior: 50348471!
test03PortfolioWithTwoAccountsGivesCorrectBalance

	portfolio1 add: account1.
	portfolio1 add: account2.
	
	self assert: 150 equals: portfolio1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:38' prior: 50348480 overrides: 16927572!
setUp
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit3 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	
	account1 register: deposit3.
	account2 register: deposit4.
	
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:39' prior: 50348607!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| transactions |
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	
	transactions := OrderedCollection with: deposit3 with: deposit4.
	
	self assert: (portfolio1 transactions) = transactions.! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:50:42'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 deposit1 deposit4'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:42' prior: 50348636!
test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered
	
	account1 register: deposit1.
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	
	self assert: (portfolio1 hasRegistered: deposit1)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:42' prior: 50348494!
test15PortfolioWithOneAccountHasOneTransaction
	| transactions |
	
	portfolio1 add: account1.
	
	transactions := OrderedCollection with: deposit1.
	
	self assert: (portfolio1 transactions) = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:42' prior: 50348462!
test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered

	account1 register: deposit1.
	portfolio1 add: account1.
	
	self assert: (portfolio1 hasRegistered: deposit1)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:42' prior: 50348655 overrides: 16927572!
setUp
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit for: 100.
	deposit4 := Deposit for: 50.
	
	account1 register: deposit1.
	account2 register: deposit4.
	
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:42' prior: 50347887!
test20EmptyPortfolioDoesNotHaveTransactionsRegistered

	self deny: (portfolio1 hasRegistered: deposit1)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:42' prior: 50348554!
test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account1 register: deposit1.
	
	portfolio3 add: account1.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit1)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:42' prior: 50348450!
test18TwoDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio3 add: account1.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit1.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:43' prior: 50348514!
test17OneDepthPortfolioWithAnAccountHasOneTransaction
	| transactions |
	
	portfolio2 add: account1.
	portfolio1 add: portfolio2.
	
	transactions := OrderedCollection with: deposit1.
	
	self assert: portfolio1 transactions equals: transactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:43' prior: 50348589!
test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	account1 register: deposit1.
	
	portfolio2 add: account1.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit1)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:43' prior: 50348669!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| transactions |
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	
	transactions := OrderedCollection with: deposit1 with: deposit4.
	
	self assert: (portfolio1 transactions) = transactions.! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'TT 5/23/2021 16:50:45'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 account1 account2 deposit1 deposit2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:45' prior: 50348720 overrides: 16927572!
setUp
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit for: 100.
	deposit2 := Deposit for: 50.
	
	account1 register: deposit1.
	account2 register: deposit2.
	
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:45' prior: 50348785!
test16PortfolioWithTwoAccountsHasTwoTransactions
	| transactions |
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	
	transactions := OrderedCollection with: deposit1 with: deposit2.
	
	self assert: (portfolio1 transactions) = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'TT 5/23/2021 16:50:45' prior: 50348618!
test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered
	
	portfolio1 add: account1.
	
	self deny: (portfolio1 hasRegistered: deposit2)! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:50:47'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 16:50:48'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 16:50:48'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 16:50:48'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:50:48'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:50:48'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:50:48'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 16:50:48'!
PASSED!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 17:01:13' prior: 50348741!
test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	portfolio3 add: account1.
	portfolio2 add: portfolio3.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit1)! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 17:01:17' prior: 50348775!
test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered

	portfolio2 add: account1.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit1)! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 17:01:20' prior: 50348690!
test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	
	self assert: (portfolio1 hasRegistered: deposit1)! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'TT 5/23/2021 17:01:24' prior: 50348710!
test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered

	portfolio1 add: account1.
	
	self assert: (portfolio1 hasRegistered: deposit1)! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/23/2021 17:01:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 17:01:50'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/23/2021 17:01:51'!
PASSED!

----SNAPSHOT----(23 May 2021 17:01:56) CuisUniversity-4532.image priorSource: 519120!

----SNAPSHOT----(23 May 2021 18:58:13) CuisUniversity-4532.image priorSource: 556815!

----STARTUP---- (25 May 2021 12:14:01) as C:\Users\tomas\Documents\Programming\University\Inge I\1ParcialCheck\CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 12:53:18'!
test08ShouldNotAddAPortfolioThatCanReachTheParent

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test08ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/25/2021 12:53:18'!
test08ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 12:57:28'!
test09ShouldNotAddAPortfolioThatIsReachableByParent

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test09ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/25/2021 12:57:28'!
test09ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 12:57:56'!
test08ShouldNotAddAPortfolioChildThatCanReachTheParent

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test08ShouldNotAddAPortfolioThatCanReachTheParent stamp: 'TT 5/25/2021 12:57:56'!
test08ShouldNotAddAPortfolioThatCanReachTheParent

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio3 add: portfolio1 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 12:58:06'!
test09ShouldNotAddAPortfolioChildThatIsReachableByParent

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test09ShouldNotAddAPortfolioThatIsReachableByParent stamp: 'TT 5/25/2021 12:58:06'!
test09ShouldNotAddAPortfolioThatIsReachableByParent

	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 13:03:26'!
test10ShouldNotAddAPortfolioThatSharesPortfoliosInCommon

	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test10ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/25/2021 13:03:26'!
test10ShouldNotAddTwoPortfoliosToEachOther

	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 13:05:48'!
test13ShouldNotAddAPortfolioThatSharesPortfoliosInCommon

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test13ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/25/2021 13:05:48'!
test13ShouldNotAddAPortfolioWithTheSameAccount

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/25/2021 13:06:43'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddAPortfolioChildThatCanReachTheParent stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddAPortfolioChildThatIsReachableByParent stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddAPortfolioThatSharesPortfoliosInCommon stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioThatSharesPortfoliosInCommon stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:06:44'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:06:45'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:06:45'!
PASSED!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 13:11:04'!
test13ShouldNotAddAPortfolioThatSharesAccountsInCommon

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test13ShouldNotAddAPortfolioThatSharesPortfoliosInCommon stamp: 'TT 5/25/2021 13:11:04'!
test13ShouldNotAddAPortfolioThatSharesPortfoliosInCommon

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 13:11:42'!
test10ShouldNotAddAPortfolioThatHasPortfoliosInCommon

	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test10ShouldNotAddAPortfolioThatSharesPortfoliosInCommon stamp: 'TT 5/25/2021 13:11:42'!
test10ShouldNotAddAPortfolioThatSharesPortfoliosInCommon

	portfolio1 add: portfolio3.
	portfolio2 add: portfolio3.
	
	self should: [portfolio1 add: portfolio2 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 13:11:51'!
test13ShouldNotAddAPortfolioHasSharesAccountsInCommon

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test13ShouldNotAddAPortfolioThatSharesAccountsInCommon stamp: 'TT 5/25/2021 13:11:51'!
test13ShouldNotAddAPortfolioThatSharesAccountsInCommon

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 13:12:00'!
test13ShouldNotAddAPortfolioHasAccountsInCommon

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test13ShouldNotAddAPortfolioHasSharesAccountsInCommon stamp: 'TT 5/25/2021 13:12:00'!
test13ShouldNotAddAPortfolioHasSharesAccountsInCommon

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!
!PortfolioTest methodsFor: 'add' stamp: 'TT 5/25/2021 13:12:11'!
test13ShouldNotAddAPortfolioThatHasAccountsInCommon

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription! !

!methodRemoval: PortfolioTest #test13ShouldNotAddAPortfolioHasAccountsInCommon stamp: 'TT 5/25/2021 13:12:11'!
test13ShouldNotAddAPortfolioHasAccountsInCommon

	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio3 add: portfolio4.
	portfolio4 add: account1.
	
	self should: [portfolio2 add: portfolio3 ] raise: Error description: Portfolio canNotAddSameFinancialAssetTwiceErrorDescription!

----SNAPSHOT----(25 May 2021 13:18:46) CuisUniversity-4532.image priorSource: 556902!
!AccountTransaction methodsFor: 'value' stamp: 'TT 5/25/2021 13:19:06' prior: 50331755 overrides: 16881508!
value 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'TT 5/25/2021 13:19:16' prior: 50331793 overrides: 50349407!
value

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'TT 5/25/2021 13:19:24' prior: 50331994 overrides: 50349407!
value

	^ value! !
!Withdraw methodsFor: 'initialization' stamp: 'TT 5/25/2021 13:22:27' prior: 50331822!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'initialization' stamp: 'TT 5/25/2021 13:22:47' prior: 50331788!
initializeFor: aValue

	value := aValue ! !

AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'TT 5/25/2021 13:23:28'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'TT 5/25/2021 13:23:33'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'TT 5/25/2021 13:23:45'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'TT 5/25/2021 13:23:44'!
initializeFor: aValue

	value := aValue ! !

!methodRemoval: Deposit #initializeFor: stamp: 'TT 5/25/2021 13:24:12'!
initializeFor: aValue

	value := aValue !

!methodRemoval: Withdraw #initializeFor: stamp: 'TT 5/25/2021 13:24:16'!
initializeFor: aValue

	value := aValue !
!AccountTransaction methodsFor: 'value' stamp: 'TT 5/25/2021 13:24:46' prior: 50349407 overrides: 16881508!
value

	^ value! !

!methodRemoval: Deposit #value stamp: 'TT 5/25/2021 13:24:53'!
value

	^ value!

!methodRemoval: Withdraw #value stamp: 'TT 5/25/2021 13:24:57'!
value

	^ value!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddAPortfolioChildThatCanReachTheParent stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddAPortfolioChildThatIsReachableByParent stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddAPortfolioThatHasPortfoliosInCommon stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioThatHasAccountsInCommon stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/25/2021 13:25:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/25/2021 13:25:33'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/25/2021 13:25:33'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/25/2021 13:25:33'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/25/2021 13:25:33'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/25/2021 13:25:33'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/25/2021 13:25:33'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:25:33'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:25:33'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:25:33'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:25:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/25/2021 13:25:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/25/2021 13:25:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/25/2021 13:25:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/25/2021 13:25:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/25/2021 13:25:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/25/2021 13:25:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/25/2021 13:25:37'!
PASSED!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'TT 5/25/2021 13:27:52' prior: 50331857 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'TT 5/25/2021 13:28:30' prior: 50331877 overrides: 50338592!
hasRegistered: aTransaction

	^ transactions includes: aTransaction
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'TT 5/25/2021 13:32:18' prior: 50331862!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TT 5/25/2021 13:32:48' prior: 50331668!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TT 5/25/2021 13:32:54' prior: 50331676!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TT 5/25/2021 13:33:00' prior: 50331685!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TT 5/25/2021 13:33:05' prior: 50331695!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TT 5/25/2021 13:33:12' prior: 50331705!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TT 5/25/2021 13:33:17' prior: 50331718!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TT 5/25/2021 13:33:25' prior: 50331730!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountGivesCorrectBalance stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithTwoAccountsGivesCorrectBalance stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test04OneDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test05TwoDepthPortfolioWithAnAccountGivesCorrectBalance stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test06ShouldNotAddAPortfolioTwice stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test07ShouldNotAddTwoPortfoliosToEachOther stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test08ShouldNotAddAPortfolioChildThatCanReachTheParent stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test09ShouldNotAddAPortfolioChildThatIsReachableByParent stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test10ShouldNotAddAPortfolioThatHasPortfoliosInCommon stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test11ShouldNotAddAnAccountTwice stamp: 'TT 5/25/2021 13:33:29'!
PASSED!

!testRun: #PortfolioTest #test12ShouldNotAddAPortfolioWithTheSameAccount stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test13ShouldNotAddAPortfolioThatHasAccountsInCommon stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test14EmptyPortfolioHasNoTransactions stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioWithOneAccountHasOneTransaction stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioWithTwoAccountsHasTwoTransactions stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test17OneDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test18TwoDepthPortfolioWithAnAccountHasOneTransaction stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test19PortfolioWithOneAccountDoesNotHaveATransactionRegistered stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test20EmptyPortfolioDoesNotHaveTransactionsRegistered stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test21PortfolioWithOneAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test22PortfolioWithTwoAccountsHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test23OneDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #PortfolioTest #test24TwoDepthPortfolioWithAnAccountHasOneOfItsTransactionsRegistered stamp: 'TT 5/25/2021 13:33:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TT 5/25/2021 13:33:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TT 5/25/2021 13:33:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TT 5/25/2021 13:33:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TT 5/25/2021 13:33:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TT 5/25/2021 13:33:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TT 5/25/2021 13:33:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TT 5/25/2021 13:33:32'!
PASSED!

----SNAPSHOT----(25 May 2021 13:33:37) CuisUniversity-4532.image priorSource: 568063!

----SNAPSHOT----(25 May 2021 13:35:23) CuisUniversity-4532.image priorSource: 580886!