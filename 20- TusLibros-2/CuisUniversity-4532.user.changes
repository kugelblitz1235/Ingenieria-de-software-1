

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (10 June 2021 18:26:03) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!


----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-1.st----!

!classRemoval: #CartTest stamp: 'BAG 6/10/2021 18:26:51'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-2.st----!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:27:11'!
ERROR!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-1.st----!

!classRemoval: #CartTest stamp: 'BAG 6/10/2021 18:27:33'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-1.st----!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-2.st----!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:27:50'!
ERROR!

----STARTUP---- (10 June 2021 18:34:01) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!


----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-1.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:34:32'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:34:32'!
PASSED!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-2.st----!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:35:05'!
ERROR!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-3.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:35:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:35:32'!
PASSED!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-4.st----!

!testRun: #CartTest #test03AfterAddingABookTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:35:44'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:35:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:35:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingABookTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:35:51'!
FAILURE!

!testRun: #CartTest #test03AfterAddingABookTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:35:51'!
FAILURE!

!testRun: #CartTest #test03AfterAddingABookTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:36:08'!
FAILURE!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-18.st----!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:37:03'!
FAILURE!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingABookTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/10/2021 18:37:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddBooksThatDoNotBelongToPublishier stamp: 'BAG 6/10/2021 18:37:03'!
FAILURE!

!classRemoval: #Cart stamp: 'BAG 6/10/2021 18:37:11'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'BAG 6/10/2021 18:37:11'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/bruno/Documents/UBA/Ingenieria del software 1/Guia de ejercicios/2021-1c/20-TusLibros/TusLibros-18.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/10/2021 18:37:17'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/10/2021 19:40:14'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BAG 6/10/2021 19:40:18'!
TestCase subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'BAG 6/10/2021 19:47:10'!
test01
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartErrorMessage.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'nil' stamp: 'BAG 6/10/2021 19:47:32'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'nil' stamp: 'BAG 6/10/2021 19:47:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'nil' stamp: 'BAG 6/10/2021 19:47:55'!
itemSellByTheStore
	
	^ 'validBook'! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:48:12'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 19:48:27'!
checkout: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 19:49:52' prior: 50860142!
checkout: aCart 
	self class invalidCartErrorMessage.! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:49:54'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'BAG 6/10/2021 19:50:12'!
invalidCartErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'BAG 6/10/2021 19:50:39' prior: 50860154!
invalidCartErrorMessage
	^'No se puede cobrar con un carrito inválido.'! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:50:41'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:50:50'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:50:50'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 19:51:14' prior: 50860116!
test01
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCartErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:51:17'!
FAILURE!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 19:51:39' prior: 50860147!
checkout: aCart 
	self error: self class invalidCartErrorMessage.! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:51:40'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:51:43'!
PASSED!

!methodRemoval: Cashier class #invalidCartErrorMessage stamp: 'BAG 6/10/2021 19:52:05'!
invalidCartErrorMessage
	^'No se puede cobrar con un carrito inválido.'!
!Cashier methodsFor: 'nil' stamp: 'BAG 6/10/2021 19:52:33'!
invalidCartErrorMessage
	^'No se puede cobrar con un carrito inválido.'! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 19:52:45' prior: 50860186!
checkout: aCart 
	self error: self invalidCartErrorMessage.! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:52:49'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:52:49'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 19:53:26' prior: 50860172!
test01
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 19:53:29'!
PASSED!

Date dateAndTimeNow.!

Date dateAndTimeNow + Date dateAndTimeNow.!

(Date dateAndTimeNow) + (Date dateAndTimeNow).!

now := Date dateAndTimeNow!

now := FixedGregorianDate today.!

now yesterday.!

now := FixedGregorianDate yesterday!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:23:09'!
test0xCanNotCheckoutWithExpiredCard
	| cart cashier card |
	
	card := FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart with: card] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier InvalidCardErrorDescription.
		
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:24:27'!
test02
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	cashier checkout: cart. 
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:27:36' prior: 50860132!
defaultCatalog
	
	^ Dictionary with: (self itemSellByTheStore @5).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:28:14' prior: 50860250!
test02
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self assert: 5 equals: (cashier checkout: cart). 
	
		! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:28:16'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:29:07' prior: 50860257!
defaultCatalog
	
	^ Dictionary with: ((self itemSellByTheStore)@5).! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:29:08'!
ERROR!

Dictionary with: (1@1).!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:32:29' prior: 50860273!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: 5).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:34:07' prior: 50860263!
test02
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cashier := Cashier new.
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart). 
	
		! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:34:08'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 20:34:49' prior: 50860205!
checkout: aCart 
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:34:54'!
ERROR!

catalog at: self itemSellByTheStore!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:36:44' prior: 50860128!
createCart
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	cart add: self itemSellByTheStore. 
	^cart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:36:58' prior: 50860310!
createCart
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	^cart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:37:13' prior: 50860288!
test02
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart). 
	
		! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:37:14'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 20:37:48' prior: 50860300!
checkout: aCart 
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	^5.! !

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:37:57'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 20:37:57'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:37:57'!
ERROR!

!testRun: #CashierTest #test0xCanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 20:37:57'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'BAG 6/10/2021 20:38:31' prior: 50860056!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: 5).! !
!Cart methodsFor: 'assertions' stamp: 'BAG 6/10/2021 20:39:46' prior: 50859904!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/10/2021 20:40:05'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'BAG 6/10/2021 20:40:11'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'BAG 6/10/2021 20:40:13'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:40:57'!
test01CanNotCheckoutAnEmptyCart
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: CashierTest #test01 stamp: 'BAG 6/10/2021 20:40:57'!
test01
	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty ]!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:41:31'!
test02CheckoutCartWithOneItemReturnsTotal
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart). 
	
		! !

!methodRemoval: CashierTest #test02 stamp: 'BAG 6/10/2021 20:41:31'!
test02
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart). 
	
		!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 20:43:26'!
test03CheckoutCartWithManyItemsReturnsTotal
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cart add: 5 of: self itemSellByTheStore.
	cashier := Cashier new.
	
	self assert: (catalog at: self itemSellByTheStore)*5 equals: (cashier checkout: cart). 
	
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 20:43:29'!
FAILURE!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 20:45:17' prior: 50860336!
checkout: aCart 
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	^5* aCart items size.! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 20:45:18'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'BAG 6/10/2021 21:40:32'!
total

	^items sum:[:item | catalog at: item].! !
!Cart methodsFor: 'queries' stamp: 'BAG 6/10/2021 21:40:45' prior: 50860465!
total

	^items sum:[:item | catalog at: item] ifEmpty:[0].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 21:41:04' prior: 50860440!
test03CheckoutCartWithManyItemsReturnsTotal
	| cart cashier catalog |
	catalog := self  defaultCatalog .	
	cart := self createCart.
	cart add: 5 of: self itemSellByTheStore.
	cashier := Cashier new.
	
	self assert: cart total equals: (cashier checkout: cart). 
	
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:41:09'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:41:18'!
ERROR!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 21:41:37' prior: 50860456!
checkout: aCart 
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	^aCart total.! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:41:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/10/2021 21:41:38'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/10/2021 21:41:38'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:41:38'!
PASSED!

!testRun: #CashierTest #test0xCanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:41:38'!
ERROR!

!testRun: #CashierTest #test0xCanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:41:38'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:41:45'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 21:45:54'!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card |
	
	card := FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart with: card] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier InvalidCardErrorDescription.
		].
	
		! !

!methodRemoval: CashierTest #test0xCanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:45:57'!
test0xCanNotCheckoutWithExpiredCard
	| cart cashier card |
	
	card := FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart with: card] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier InvalidCardErrorDescription.
		
		].
	
		!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:46:04'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 21:46:56'!
checkout: aCart with: aFixedGregorianDate 
	self shouldBeImplemented.! !

FixedGregorianDate yesterday < FixedGregorianDate today!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 21:51:07' prior: 50860552!
checkout: aCart with: aCard 
	aCard < FixedGregorianDate today ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:51:14'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:51:14'!
ERROR!
!Cashier methodsFor: 'error descriptions' stamp: 'BAG 6/10/2021 21:52:27'!
invalidCardErrorMessage
	^'No se puede cobrar con una tarjeta vencida.'! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/10/2021 21:52:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/10/2021 21:52:30'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:52:30'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:52:30'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:52:30'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 21:53:14' prior: 50860521!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card |
	
	card := FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart with: card] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier invalidCardErrorMessage.
		].
	
		! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/10/2021 21:53:19'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/10/2021 21:53:19'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 21:53:19'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 21:53:19'!
PASSED!

Object subclass: #Card
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'BAG 6/10/2021 21:59:12'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card class methodsFor: 'nil' stamp: 'BAG 6/10/2021 21:59:54'!
for: aExpirationDate
	self new initializeFor: aExpirationDate .! !
!Card class methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 21:59:57' prior: 50860631!
for: aExpirationDate
	^self new initializeFor: aExpirationDate .! !
!Card methodsFor: 'no messages' stamp: 'BAG 6/10/2021 22:00:27'!
initializeFor: aExpirationDate
	expirationDate := aExpirationDate ! !
!Card methodsFor: 'nil' stamp: 'BAG 6/10/2021 22:01:39'!
hasExpired! !
!Card methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 22:02:39' prior: 50860646!
hasExpired
	^expirationDate < FixedGregorianDate today.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/10/2021 22:03:07' prior: 50860594!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card |
	
	card := Card for: FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart with: card] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier invalidCardErrorMessage.
		].
	
		! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/10/2021 22:03:45' prior: 50860559!
checkout: aCart with: aCard 
	(aCard hasExpired) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/10/2021 22:03:47'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/10/2021 22:03:47'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/10/2021 22:03:47'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/10/2021 22:03:47'!
PASSED!

----SNAPSHOT----(10 June 2021 22:06:03) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (14 June 2021 17:41:01) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!Card methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 17:46:47'!
isExpiredOn: aDate
	^expirationDate < aDate montOfYear.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 17:48:11'!
checkout: aCart with: aCard on: today
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 17:49:13' prior: 50860655!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card today |
	
	card := Card for: FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	today := FixedGregorianDate today.
	
	self should:[cashier checkout: cart with: card on: today] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			error messageText = cashier invalidCardErrorMessage.
		].
	
		! !
!Cart class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 17:57:59'!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber numberOfDigits: 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	"terminar con la instanciacion"! !

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BAG 6/14/2021 17:58:35'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreTestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 17:58:52'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 18:09:41'!
toCheckout: aCart charging: aCard on: today registeredOn: salesBook
	"CHEQUEAER QUE EL CARRITO NO ESTÉ VACIO"
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 18:09:59' prior: 50860755!
toCheckout: aCart charging: aCard on: today registeredOn: salesBook
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !
!Cart class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 18:37:30' prior: 50860723!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber numberOfDigits: 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'BAG 6/14/2021 18:38:30'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'BAG 6/14/2021 18:38:32'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'BAG 6/14/2021 18:38:29'!
initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .
	number := aNumber.
	owner := anOwner.
	 ! !

!methodRemoval: Cart #initializeCardNumbered:owner:expiredOn: stamp: 'BAG 6/14/2021 18:38:54'!
initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .
	number := aNumber.
	owner := anOwner.
	 !

!classDefinition: #Card category: 'TusLibros' stamp: 'BAG 6/14/2021 18:39:14'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'BAG 6/14/2021 18:39:15'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:39:13'!
initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .
	number := aNumber.
	owner := anOwner.
	expirationDate := anExpirationMonthOfYear .! !

!methodRemoval: Cart class #numbered:owner:expiredOn: stamp: 'BAG 6/14/2021 18:39:31'!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber numberOfDigits: 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .!
!Card class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 18:39:41'!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber numberOfDigits: 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .! !

!methodRemoval: Card class #for: stamp: 'BAG 6/14/2021 18:39:46'!
for: aExpirationDate
	^self new initializeFor: aExpirationDate .!

!methodRemoval: Card #initializeFor: stamp: 'BAG 6/14/2021 18:39:52'!
initializeFor: aExpirationDate
	expirationDate := aExpirationDate !

!methodRemoval: Card #hasExpired stamp: 'BAG 6/14/2021 18:39:54'!
hasExpired
	^expirationDate < FixedGregorianDate today.!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 18:40:59'!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.! !

!methodRemoval: Cashier #toCheckout:charging:on:registeredOn: stamp: 'BAG 6/14/2021 18:40:59'!
toCheckout: aCart charging: aCard on: today registeredOn: salesBook
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.!

!methodRemoval: Cashier #checkout:with: stamp: 'BAG 6/14/2021 18:41:09'!
checkout: aCart with: aCard 
	(aCard hasExpired) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.!

!methodRemoval: Cashier #checkout:with:on: stamp: 'BAG 6/14/2021 18:41:24'!
checkout: aCart with: aCard on: today
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	^aCart total.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:46:11' prior: 50860395!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: card on: FixedGregorianDate today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: salesBook isEmpty 
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:46:28' prior: 50860908!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: card on: FixedGregorianDate today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

22 digitLength = 16!

22 digitLength!

222222 digitLength !

222222 digitLength!

22222222 digitLength !

22222222 decimalDigitLength!
!Card class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 18:49:16' prior: 50860850!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber decimalDigitLength = 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 18:49:24'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:55:34' prior: 50860418!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow . 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	catalog := self  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: FixedGregorianDate today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  self itemSellByTheStore equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 18:55:36'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:55:55' prior: 50860696!
isExpiredOn: aDate
	^expirationDate < aDate monthOfYear.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 18:55:57'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:56:34' prior: 50860995!
isExpiredOn: aDate
	^expirationDate < aDate.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 18:56:35'!
FAILURE!

!methodRemoval: Cashier #checkout: stamp: 'BAG 6/14/2021 18:56:52'!
checkout: aCart 
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	
	^aCart total.!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 18:57:54' prior: 50860874!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	sale := aCart total.
	salesBook add: sale.
	
	^sale.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 18:58:42' prior: 50860969!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow . 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	catalog := self  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: FixedGregorianDate today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 18:58:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 18:58:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 18:58:44'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 18:58:44'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 18:58:44'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:01:17' prior: 50860708!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := Card for: FixedGregorianDate yesterday.
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:01:24'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:01:55' prior: 50861068!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cashier := Cashier new.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:01:58'!
FAILURE!
!Card class methodsFor: 'nil' stamp: 'BAG 6/14/2021 19:02:39'!
invalidCardErrorMessage
	^'No se puede cobrar con una tarjeta vencida.'! !
!Card class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:02:59'!
expiredCardErrorMessage
	^'No se puede cobrar con una tarjeta vencida.'! !

!methodRemoval: Card class #invalidCardErrorMessage stamp: 'BAG 6/14/2021 19:02:59'!
invalidCardErrorMessage
	^'No se puede cobrar con una tarjeta vencida.'!
!Card class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 19:03:27' prior: 50860953!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber decimalDigitLength = 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: self expiredCardErrorMessage].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .! !
!Card class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 19:04:45' prior: 50861129!
numbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear
	(aNumber decimalDigitLength = 16) ifFalse: [self error: ''].
	anOwner withBlanksTrimmed isEmpty ifTrue: [self error: ''].
	
	^ self new initializeCardNumbered: aNumber owner: anOwner expiredOn: anExpirationMonthOfYear .! !

!methodRemoval: Card class #expiredCardErrorMessage stamp: 'BAG 6/14/2021 19:04:50'!
expiredCardErrorMessage
	^'No se puede cobrar con una tarjeta vencida.'!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:05:00'!
FAILURE!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:05:00'!
FAILURE!

error messageText!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:06:57' prior: 50861090!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier new.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:06:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 19:06:59'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 19:06:59'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 19:06:59'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:06:59'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 19:06:59'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:07:08'!
PASSED!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/14/2021 19:18:41'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator class methodsFor: 'nil' stamp: 'BAG 6/14/2021 19:31:30'!
debitFor: creditCardNumber with: aCardExpirationDate owner: anOwner amount: anAmount
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:32:42'!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	
	salesBook := OrderedCollection new.
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier new.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!StoreTestObjectFactory methodsFor: 'no messages' stamp: 'BAG 6/14/2021 19:36:25'!
createMerchantProcessor
	^MerchantProcessorSimulator new.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 19:37:00'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:36:58' overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:39:59' prior: 50861230!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 19:40:03'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 19:40:10'!
for: aMerchantProcessorSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aMerchantProcessorSimulator ! !
!Cashier class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 19:40:31' prior: 50861296!
for: aMerchantProcessor
	^self new initializeFor: aMerchantProcessor ! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 19:40:34'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'BAG 6/14/2021 19:41:07'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'BAG 6/14/2021 19:41:07'!
initializeFor: aMerchantProcessor 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'BAG 6/14/2021 19:41:15' prior: 50861320!
initializeFor: aMerchantProcessor 
	merchantProcessor := aMerchantProcessor.! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 19:41:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 19:41:18'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 19:41:18'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 19:41:18'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 19:41:18'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 19:41:18'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 19:41:18'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 19:41:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:42:11' prior: 50861270!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := Card numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'validCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/14/2021 19:48:20'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'validCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'BAG 6/14/2021 19:49:25'!
initializeWithValidCards: aCollectionOfValidCards
	validCards := aCollectionOfValidCards .! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:50:14'!
withValidCards: aCollectionOfValidCards
	^self new initializeWithValidCards: aCollectionOfValidCards. ! !

!methodRemoval: MerchantProcessorSimulator class #debitFor:with:owner:amount: stamp: 'BAG 6/14/2021 19:50:43'!
debitFor: creditCardNumber with: aCardExpirationDate owner: anOwner amount: anAmount
	!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'BAG 6/14/2021 19:51:06'!
debitFor: creditCard amount: anAmount
	! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:51:42' prior: 50861415!
debitFor: card amount: anAmount
	! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:56:28' prior: 50861420!
debitFor: card amount: anAmount
	validCards includes: card ifFalse: [self error: self ]! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:56:34' prior: 50861425!
debitFor: card amount: anAmount
	(validCards includes: card) ifFalse: [self error: self ]! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:57:08' prior: 50861432!
debitFor: card amount: anAmount
	(validCards includes: card) ifFalse: [self error: MerchantProcessorSimulator stolenCreditCardErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:57:12' prior: 50861439!
debitFor: card amount: anAmount
	(validCards includes: card) ifFalse: [self error: self class stolenCreditCardErrorDescription].! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 19:57:54'!
stolenCreditCardErrorDescription
	^'No puede realizarse el débito porque la tarjeta es robada'.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/14/2021 19:58:49' prior: 50861016!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	sale := aCart total.
	merchantProcessor debitFor: aCard amount: sale.
	salesBook add: sale.
	
	^sale.! !

!classRenamed: #Card as: #CreditCard stamp: 'BAG 6/14/2021 20:03:19'!
Smalltalk renameClassNamed: #Card as: #CreditCard!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:03:19' prior: 50861359!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:03:19' prior: 50861028!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow . 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier new.
	catalog := self  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: FixedGregorianDate today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:03:19' prior: 50860928!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: card on: FixedGregorianDate today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:03:19' prior: 50861167!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier new.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:03:35'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 20:03:35'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 20:03:35'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:03:35'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:09:02'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:11:30' prior: 50861548!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:11:48' prior: 50861504!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate tomorrow . 
	salesBook := OrderedCollection new.
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	catalog := self  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: FixedGregorianDate today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:11:50'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:13:26'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:13:26'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:15:08' prior: 50861252!
createMerchantProcessor
	| validCards |
	validCards := OrderedCollection with: CreditCard new.
	^MerchantProcessorSimulator withValidCards: validCards.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:16:13' prior: 50861677!
createMerchantProcessor
	| validCards card |
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday.
	validCards := OrderedCollection with: card.
	^MerchantProcessorSimulator withValidCards: validCards.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:16:24' prior: 50861480!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := CreditCard numbered: 1234567812345678 owner: 'Pepe' expiredOn: FixedGregorianDate tomorrow. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:16:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 20:16:26'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:16:26'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 20:16:26'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 20:16:26'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:16:26'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:16:31'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 20:16:52'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 20:16:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:17:01'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 20:17:01'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:50:02'!
initializeWithValidAccounts: aCollectionOfValidAccount
	validCards := aCollectionOfValidAccount .! !

!methodRemoval: MerchantProcessorSimulator #initializeWithValidCards: stamp: 'BAG 6/14/2021 20:50:07'!
initializeWithValidCards: aCollectionOfValidCards
	validCards := aCollectionOfValidCards .!
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:50:27' prior: 50861402!
withValidCards: aCollectionOfValidAccounts
	^self new initializeWithValidAccounts: aCollectionOfValidAccounts. ! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:51:03'!
withValidAccounts: aCollectionOfValidAccounts
	^self new initializeWithValidAccounts: aCollectionOfValidAccounts. ! !

!methodRemoval: MerchantProcessorSimulator class #withValidCards: stamp: 'BAG 6/14/2021 20:51:03'!
withValidCards: aCollectionOfValidAccounts
	^self new initializeWithValidAccounts: aCollectionOfValidAccounts. !
!StoreTestObjectFactory methodsFor: 'nil' stamp: 'BAG 6/14/2021 20:59:16'!
createCart
	^Cart for: self createMerchantProcessor. ! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 20:59:42' prior: 50861790!
createCart
	^Cart for: self defaultCatalog. ! !
!StoreTestObjectFactory methodsFor: 'nil' stamp: 'BAG 6/14/2021 20:59:55'!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: 5).! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:00:07'!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:00:19' prior: 50861796!
createCart
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	^cart! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:00:33' prior: 50861811!
createCart
	^Cart acceptingItemsOf: self defaultCatalog.
	
	! !
!StoreTestObjectFactory methodsFor: 'nil' stamp: 'BAG 6/14/2021 21:01:00'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:01:17'!
today
	^FixedGregorianDate today! !

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:02:21'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'nil' stamp: 'BAG 6/14/2021 21:02:19' overrides: 16896425!
initialize
	today:= FixedGregorianDate today.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:02:29' prior: 50861828!
today
	^today! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:03:16'!
expiredCreditCart
	^CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:03:37'!
notExpiredCreditCart
	^CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:04:18' prior: 50861527!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory notExpiredCreditCart. 
	salesBook := OrderedCollection new.
	cart := testObjectFactory createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: card on: FixedGregorianDate today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:04:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:04:20'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:04:20'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:04:20'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 21:04:20'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:04:20'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:04:26'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:04:47' prior: 50861863!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory notExpiredCreditCart. 
	salesBook := OrderedCollection new.
	cart := testObjectFactory createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart charging: card on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !
!StoreTestObjectFactory methodsFor: 'nil' stamp: 'BAG 6/14/2021 21:05:08'!
createCashier
	^Cashier new.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:05:23'!
createSalesBook
	^OrderedCollection new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:05:55' prior: 50861905!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory notExpiredCreditCart. 
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier := testObjectFactory createCashier .
	
	self 
		should: [cashier checkout: cart charging: card on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:06:01'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:06:33' prior: 50861642!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory notExpiredCreditCart.
	salesBook := OrderedCollection new.
	cart := self createCart.
	cart add: self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	catalog := self  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: FixedGregorianDate today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:07:24' prior: 50861957!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory notExpiredCreditCart.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCart. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:07:27'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:07:27'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:07:56'!
expiredCreditCard
	^CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.! !

!methodRemoval: StoreTestObjectFactory #expiredCreditCart stamp: 'BAG 6/14/2021 21:07:56'!
expiredCreditCart
	^CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:08:06'!
notExpiredCreditCard
	^CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:08:06' prior: 50861980!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory notExpiredCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCart. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:08:06' prior: 50861933!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory notExpiredCreditCard. 
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier := testObjectFactory createCashier .
	
	self 
		should: [cashier checkout: cart charging: card on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!methodRemoval: StoreTestObjectFactory #notExpiredCreditCart stamp: 'BAG 6/14/2021 21:08:06'!
notExpiredCreditCart
	^CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:08:32' prior: 50862031!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory notExpiredCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:08:34'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:11:57'!
initializeWithValidCards: aCollectionOfValidAccount
	validCards := aCollectionOfValidAccount .! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:11:57' prior: 50861777!
withValidAccounts: aCollectionOfValidAccounts
	^self new initializeWithValidCards: aCollectionOfValidAccounts. ! !

!methodRemoval: MerchantProcessorSimulator #initializeWithValidAccounts: stamp: 'BAG 6/14/2021 21:11:57'!
initializeWithValidAccounts: aCollectionOfValidAccount
	validCards := aCollectionOfValidAccount .!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:12:06' prior: 50862109!
initializeWithValidCards: aCollectionOfValidCards
	validCards := aCollectionOfValidCards .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:13:31'!
initializeWithStolenCards: aCollectionOfValidCards
	validCards := aCollectionOfValidCards .! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:13:31' prior: 50862116!
withValidAccounts: aCollectionOfValidAccounts
	^self new initializeWithStolenCards: aCollectionOfValidAccounts. ! !

!methodRemoval: MerchantProcessorSimulator #initializeWithValidCards: stamp: 'BAG 6/14/2021 21:13:31'!
initializeWithValidCards: aCollectionOfValidCards
	validCards := aCollectionOfValidCards .!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/14/2021 21:13:40'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:13:41' prior: 50862136!
initializeWithStolenCards: aCollectionOfValidCards
	stolenCards := aCollectionOfValidCards .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:13:41' prior: 50861448!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifFalse: [self error: self class stolenCreditCardErrorDescription].! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:14:30'!
withStolenCards: aCollectionOfValidAccounts
	^self new initializeWithStolenCards: aCollectionOfValidAccounts. ! !

!methodRemoval: MerchantProcessorSimulator class #withValidAccounts: stamp: 'BAG 6/14/2021 21:14:30'!
withValidAccounts: aCollectionOfValidAccounts
	^self new initializeWithStolenCards: aCollectionOfValidAccounts. !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:14:43' prior: 50862180!
withStolenCards: aCollectionOfValidStolen
	^self new initializeWithStolenCards: aCollectionOfValidStolen. ! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:15:40' prior: 50861686!
createMerchantProcessor
	| stolenCards card |
	card := CreditCard numbered: 1234567812345678 owner: 'Ruperto' expiredOn: FixedGregorianDate yesterday.
	stolenCards := OrderedCollection with: card.
	^MerchantProcessorSimulator withStolenCards: stolenCards.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:15:56'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:15:56'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:17:13'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:17:13'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:17:48' prior: 50861924!
createCashier
	^Cashier for: self createMerchantProcessor .! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:17:53'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:17:53'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:18:22' prior: 50862201!
createMerchantProcessor
	| stolenCards card |
	card := self expiredCreditCard .
	stolenCards := OrderedCollection with: card.
	^MerchantProcessorSimulator withStolenCards: stolenCards.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:19:23'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:19:23'!
ERROR!

testFactory:=StoreTestObjectFactory new.!

testFactory expiredCreditCard = testFactory notExpiredCreditCard. !

testFactory expiredCreditCard = testFactory expiredCreditCard.   !

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:23:08'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:23:09'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today expiredCreditCard notExpiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:23:06' prior: 50861840 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.
	notExpiredCreditCard := CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:23:17' prior: 50862010!
expiredCreditCard
	^expiredCreditCard .! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:23:25' prior: 50862024!
notExpiredCreditCard
	^notExpiredCreditCard .! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:23:32'!
ERROR!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:23:32'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:24:35' prior: 50862238!
createMerchantProcessor
	| stolenCards card |
	card := self notExpiredCreditCard .
	stolenCards := OrderedCollection with: card.
	^MerchantProcessorSimulator withStolenCards: stolenCards.! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:24:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:24:46'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:28:50' prior: 50860474!
test03CheckoutCartWithManyItemsReturnsTotal
	| card cart cashier catalog |
	catalog := testObjectFactory defaultCatalog .	
	cart := testObjectFactory createCart.
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	cashier := testObjectFactory createCashier.
	card :=  testObjectFactory expiredCreditCard.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  card 
								  on: testObjectFactory today 
								  registeredOn: testObjectFactory createSalesBook ). 
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:29:13' prior: 50862323!
test03CheckoutCartWithManyItemsReturnsTotal
	| card cart cashier |
	
	cart := testObjectFactory createCart.
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	cashier := testObjectFactory createCashier.
	card :=  testObjectFactory expiredCreditCard.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  card 
								  on: testObjectFactory today 
								  registeredOn: testObjectFactory createSalesBook ). 
	
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:29:16'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:01'!
stolenCreditCard
	^notExpiredCreditCard .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:01' prior: 50862082!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory stolenCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:01' prior: 50862055!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory stolenCreditCard. 
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier := testObjectFactory createCashier .
	
	self 
		should: [cashier checkout: cart charging: card on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:01' prior: 50862307!
createMerchantProcessor
	| stolenCards card |
	card := self stolenCreditCard .
	stolenCards := OrderedCollection with: card.
	^MerchantProcessorSimulator withStolenCards: stolenCards.! !

!methodRemoval: StoreTestObjectFactory #notExpiredCreditCard stamp: 'BAG 6/14/2021 21:30:01'!
notExpiredCreditCard
	^notExpiredCreditCard .!

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:30:20'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today expiredCreditCard stolenCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:20' prior: 50862277 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.
	stolenCreditCard := CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:20' prior: 50862363!
stolenCreditCard
	^stolenCreditCard .! !

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:31:00'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today expiredCreditCard stolenCreditCard validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:30:59' prior: 50862436 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.
	stolenCreditCard := CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .
	validCreditCard := CreditCard numbered: 1234567812345689  owner: 'Roberto'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:31:21'!
validCreditCard
	^validCreditCard .! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:32:50'!
PASSED!

stolenCards includes: card!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:35:11' prior: 50862172!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:35:12'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:35:22' prior: 50862368!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory validCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: self itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: self itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:35:29' prior: 50862392!
test01CanNotCheckoutAnEmptyCart
	| card cart cashier salesBook |
	
	card := testObjectFactory validCreditCard. 
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier := testObjectFactory createCashier .
	
	self 
		should: [cashier checkout: cart charging: card on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:35:32'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:35:34'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:35:45' prior: 50862342!
test03CheckoutCartWithManyItemsReturnsTotal
	| card cart cashier |
	
	cart := testObjectFactory createCart.
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	cashier := testObjectFactory createCashier.
	card :=  testObjectFactory validCreditCard.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  card 
								  on: testObjectFactory today 
								  registeredOn: testObjectFactory createSalesBook ). 
	
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:35:48'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:36:07' prior: 50861618!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := testObjectFactory expiredCreditCard. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := Cashier for: testObjectFactory createMerchantProcessor.
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:36:18' prior: 50862572!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := OrderedCollection new.
	card := testObjectFactory expiredCreditCard. 
	cart := self createCart.
	cart add:self itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:36:47' prior: 50862594!
test04CanNotCheckoutWithExpiredCard
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory expiredCreditCard. 
	cart := testObjectFactory createCart.
	cart add:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 21:36:51'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:37:28' prior: 50861697!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory stolenCreditCard. 
	cart := testObjectFactory createCart.
	cart add:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on: FixedGregorianDate today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:37:34' prior: 50862640!
test05CanNotCheckoutWithStolenCard
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory stolenCreditCard. 
	cart := testObjectFactory createCart.
	cart add:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:37:39'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:37:42'!
PASSED!

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'BAG 6/14/2021 21:37:50'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CashierTest #defaultCatalog stamp: 'BAG 6/14/2021 21:37:53'!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: 5).!

!methodRemoval: CashierTest #createCart stamp: 'BAG 6/14/2021 21:37:56'!
createCart
	| cart |
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	^cart!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:38:03' prior: 50862500!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory validCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: testObjectFactory itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (catalog at: testObjectFactory itemSellByTheStore) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:38:10'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:38:47'!
test06CanNotCheckoutWithFakeCard
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory fakeCreditCard. 
	cart := testObjectFactory createCart.
	cart add:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:38:55'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:39:04'!
fakeCreditCard
	self shouldBeImplemented.! !

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/14/2021 21:39:20'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today expiredCreditCard stolenCreditCard validCreditCard fakeCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:39:19' prior: 50862843!
fakeCreditCard
	^ fakeCreditCard! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:39:56'!
fakeCreditCardErrorDescription
	^'No puede realizarse el débito porque la tarjeta es falsa'.! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 21:42:11'!
withStolenCards: aCollectionOfValidStolen andValidCards: withValidCards 
	^self new initializeWithStolenCards: aCollectionOfValidStolen. ! !

!methodRemoval: MerchantProcessorSimulator class #withStolenCards: stamp: 'BAG 6/14/2021 21:42:11'!
withStolenCards: aCollectionOfValidStolen
	^self new initializeWithStolenCards: aCollectionOfValidStolen. !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 21:42:45' prior: 50862870!
withStolenCards: aCollectionOfValidStolen andValidCards: withValidCards 
	^self new initializeWithStolenCards: aCollectionOfValidStolen andValidCards: withValidCards. ! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/14/2021 21:43:47'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards validCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:43:46'!
initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards
	stolenCards := aCollectionOfStolenCards .
	validCards := aCollectionOfValidCards.! !

!methodRemoval: MerchantProcessorSimulator #initializeWithStolenCards: stamp: 'BAG 6/14/2021 21:43:51'!
initializeWithStolenCards: aCollectionOfValidCards
	stolenCards := aCollectionOfValidCards .!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 21:44:20' prior: 50862885!
withStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards 
	^self new initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards. ! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:47:06' prior: 50862413!
createMerchantProcessor
	| stolenCards validCards |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCreditCards: validCards.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:47:14' prior: 50862928!
createMerchantProcessor
	| stolenCards validCards |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards.! !

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:47:41'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:47:41'!
ERROR!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:48:20' prior: 50862464 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.
	stolenCreditCard := CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .
	validCreditCard := CreditCard numbered: 1234567812345689  owner: 'Roberto'  expiredOn: FixedGregorianDate tomorrow .
	fakeCreditCard := CreditCard numbered: 1234567812345689  owner: 'Carlos'  expiredOn: FixedGregorianDate tomorrow .! !

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:48:28'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:48:28'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:48:43'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:48:49'!
FAILURE!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:48:49'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:49:55' prior: 50862489!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 21:50:03'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:57:03'!
test07CanNotCheckoutWithoutEnoughBalance
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory fakeCreditCard. 
	cart := testObjectFactory createCart.
	cart add:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator withoutBalanceCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:57:52' prior: 50863024!
test07CanNotCheckoutWithoutEnoughBalance
	| cart cashier card salesBook |
	
	salesBook := testObjectFactory createSalesBook .
	card := testObjectFactory validCreditCard. 
	cart := testObjectFactory createCart.
	cart add: 80 of:testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier .
	
	self should:[cashier checkout: cart charging: card  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!MerchantProcessorSimulator class methodsFor: 'error description' stamp: 'BAG 6/14/2021 21:58:13'!
notEnoughBalanceErrorDescription
	^'No puede realizarse el débito porque la tarjeta no tiene saldo suficiente'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:59:27'!
initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards andAccounts: aCollectionOfAccounts
	stolenCards := aCollectionOfStolenCards .
	validCards := aCollectionOfValidCards.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/14/2021 21:59:51'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards validCards accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 21:59:47' prior: 50863077!
initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards andAccounts: anAccounts
	stolenCards := aCollectionOfStolenCards .
	validCards := aCollectionOfValidCards.
	accounts := anAccounts .! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 22:00:47'!
withStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards andAccounts: accounts
	^self new initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards andAccounts: accounts. ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/14/2021 22:01:22' prior: 50863107!
withStolenCards: aStolenCards andValidCards: aValidCards andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: accounts. ! !

!methodRemoval: MerchantProcessorSimulator class #withStolenCards:andValidCards: stamp: 'BAG 6/14/2021 22:01:34'!
withStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards 
	^self new initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards. !

!methodRemoval: MerchantProcessorSimulator #initializeWithStolenCards:andValidCards: stamp: 'BAG 6/14/2021 22:01:47'!
initializeWithStolenCards: aCollectionOfStolenCards andValidCards: aCollectionOfValidCards
	stolenCards := aCollectionOfStolenCards .
	validCards := aCollectionOfValidCards.!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:02:05' prior: 50863096!
initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: anAccounts
	stolenCards := aStolenCards .
	validCards := aValidCards.
	accounts := anAccounts .! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:05:10' prior: 50862940!
createMerchantProcessor
	| stolenCards validCards accounts |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: 30).
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:05:24' prior: 50863155!
createMerchantProcessor
	| stolenCards validCards accounts |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: 30).
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards andAccounts: accounts.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:05:46' prior: 50861800!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: self itemSellByTheStorePrice).! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:05:59'!
itemSellByTheStorePrice
	
	^ 5! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:06:34' prior: 50863170!
createMerchantProcessor
	| stolenCards validCards accounts |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards andAccounts: accounts.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:07:00' prior: 50863198!
createMerchantProcessor
	| stolenCards validCards accounts |
	stolenCards := OrderedCollection with: self stolenCreditCard.
	validCards := OrderedCollection with: self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards andAccounts: accounts.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:11:22' prior: 50862995!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 22:11:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:14:12' prior: 50862551!
test03CheckoutCartWithManyItemsReturnsTotal
	| card cart cashier salesBook |
	
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	cashier := testObjectFactory createCashier.
	card :=  testObjectFactory validCreditCard.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  card 
								  on: testObjectFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: 25 equals: salesBook first.
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 22:14:15'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:14:54' prior: 50863249!
test03CheckoutCartWithManyItemsReturnsTotal
	| card cart cashier salesBook |
	
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	cashier := testObjectFactory createCashier.
	card :=  testObjectFactory validCreditCard.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  card 
								  on: testObjectFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: (5 * testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
		! !

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 22:14:57'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:15:41' prior: 50862748!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory validCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: testObjectFactory itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert: 5 equals: salesBook first.
	self assert:  (catalog at: testObjectFactory itemSellByTheStore) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 22:15:56' prior: 50863300!
test02CheckoutCartWithOneItemReturnsTotal
	| card cart cashier catalog salesBook |
	
	card := testObjectFactory validCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore. 
	cashier := testObjectFactory createCashier. 
	catalog := testObjectFactory  defaultCatalog .	
	
	self assert: (catalog at: testObjectFactory itemSellByTheStore) equals: (cashier checkout: cart charging: card  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 22:15:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 22:16:00'!
PASSED!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:03:49'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'nil' stamp: 'BAG 6/14/2021 23:03:48' overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:04:28' prior: 50860006!
test01NewCartsAreCreatedEmpty

	self assert: testObjectFactory createCart isEmpty! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 23:04:31'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:04:50' prior: 50859984!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectFactory createCart.
	
	self 
		should: [ cart add: testObjectFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:04:57' prior: 50860011!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectFactory createCart.
	
	cart add: testObjectFactory itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:05:05' prior: 50859971!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:05:12' prior: 50860026!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:10:15' prior: 50860039!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectFactory createCart.
	
	cart add: testObjectFactory itemSellByTheStore.
	self assert: (cart includes: testObjectFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:10:23' prior: 50860019!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectFactory createCart.
	
	self deny: (cart includes: testObjectFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'BAG 6/14/2021 23:10:38' prior: 50859997!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectFactory createCart.
	
	cart add: 2 of: testObjectFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectFactory itemSellByTheStore) = 2! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 23:10:40'!
PASSED!

!methodRemoval: CartTest #createCart stamp: 'BAG 6/14/2021 23:10:47'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'BAG 6/14/2021 23:10:50'!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: 5).!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'BAG 6/14/2021 23:10:53'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'BAG 6/14/2021 23:10:55'!
itemNotSellByTheStore
	
	^'invalidBook'!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 23:11:02'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:08'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:10'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1 cart1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:39'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1 cart1 cashier1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:13:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1 cart1 cashier1 catalog1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:13:36' prior: 50861265 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	salesBook1 := testObjectFactory createSalesBook.
	cart1 := testObjectFactory createCart.
	cashier1 := testObjectFactory createCashier.
	catalog1 := testObjectFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:14:35' prior: 50862524!
test01CanNotCheckoutAnEmptyCart
	self 
		should: [cashier1 checkout: cart1 charging: validCreditCard on: testObjectFactory today registeredOn: salesBook1]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier1 invalidCartErrorMessage.
			self assert: cart1 isEmpty.
			self assert: salesBook1 isEmpty. 
		].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 23:14:39'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:15:25' prior: 50863326!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart1 add: testObjectFactory itemSellByTheStore. 
	self assert: (catalog1 at: testObjectFactory itemSellByTheStore) equals: (cashier1 checkout: cart1 charging: validCreditCard  on: testObjectFactory today registeredOn: salesBook1 ). 
	self assert: 1 equals: salesBook1 size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook1 first.
	
		! !

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 23:15:30'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:16:09' prior: 50863274!
test03CheckoutCartWithManyItemsReturnsTotal
	cart1 add: 5 of: testObjectFactory itemSellByTheStore.
	
	self assert: cart1 total equals: (cashier1 checkout: cart1 
								  charging:  validCreditCard 
								  on: testObjectFactory today 
								  registeredOn: salesBook1). 
	self assert: 1 equals: salesBook1 size. 
	self assert: (5 * testObjectFactory itemSellByTheStorePrice) equals: salesBook1 first.
		! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:16:47'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1 cart1 cashier1 catalog1 expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:16:45' prior: 50862615!
test04CanNotCheckoutWithExpiredCard
	cart1 add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart1 charging: expiredCreditCard  on: testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier1 invalidCardErrorMessage.
			self assert: salesBook1 isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:17:03' prior: 50863688 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	expiredCreditCard := testObjectFactory expiredCreditCard.
	salesBook1 := testObjectFactory createSalesBook.
	cart1 := testObjectFactory createCart.
	cashier1 := testObjectFactory createCashier.
	catalog1 := testObjectFactory defaultCatalog .! !

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 23:17:08'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:17:34' prior: 50862663!
test05CanNotCheckoutWithStolenCard
	cart1 add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart1 charging: stolenCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:17:37'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:18:05' prior: 50862817!
test06CanNotCheckoutWithFakeCard
	cart1 add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart1 charging: fakeCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 23:18:08'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:18:37' prior: 50863047!
test07CanNotCheckoutWithoutEnoughBalance
	cart1 add: 80 of:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart1 charging: validCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 23:18:39'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:19:23'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook1 cart cashier1 catalog1 expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863826!
test06CanNotCheckoutWithFakeCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: fakeCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863846!
test07CanNotCheckoutWithoutEnoughBalance
	cart add: 80 of:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: validCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863806!
test05CanNotCheckoutWithStolenCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: stolenCreditCard  on:testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook1 isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863721!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart add: testObjectFactory itemSellByTheStore. 
	self assert: (catalog1 at: testObjectFactory itemSellByTheStore) equals: (cashier1 checkout: cart charging: validCreditCard  on: testObjectFactory today registeredOn: salesBook1 ). 
	self assert: 1 equals: salesBook1 size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook1 first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863768!
test04CanNotCheckoutWithExpiredCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: expiredCreditCard  on: testObjectFactory today  registeredOn: salesBook1 ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier1 invalidCardErrorMessage.
			self assert: salesBook1 isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863785 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	expiredCreditCard := testObjectFactory expiredCreditCard.
	salesBook1 := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier1 := testObjectFactory createCashier.
	catalog1 := testObjectFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863741!
test03CheckoutCartWithManyItemsReturnsTotal
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	
	self assert: cart total equals: (cashier1 checkout: cart 
								  charging:  validCreditCard 
								  on: testObjectFactory today 
								  registeredOn: salesBook1). 
	self assert: 1 equals: salesBook1 size. 
	self assert: (5 * testObjectFactory itemSellByTheStorePrice) equals: salesBook1 first.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:23' prior: 50863704!
test01CanNotCheckoutAnEmptyCart
	self 
		should: [cashier1 checkout: cart charging: validCreditCard on: testObjectFactory today registeredOn: salesBook1]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier1 invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook1 isEmpty. 
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:19:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook cart cashier1 catalog1 expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50863925!
test06CanNotCheckoutWithFakeCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: fakeCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50863942!
test07CanNotCheckoutWithoutEnoughBalance
	cart add: 80 of:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: validCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50863959!
test05CanNotCheckoutWithStolenCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: stolenCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50863976!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart add: testObjectFactory itemSellByTheStore. 
	self assert: (catalog1 at: testObjectFactory itemSellByTheStore) equals: (cashier1 checkout: cart charging: validCreditCard  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50863992!
test04CanNotCheckoutWithExpiredCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier1 checkout: cart charging: expiredCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier1 invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50864009 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	expiredCreditCard := testObjectFactory expiredCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier1 := testObjectFactory createCashier.
	catalog1 := testObjectFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50864027!
test03CheckoutCartWithManyItemsReturnsTotal
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	
	self assert: cart total equals: (cashier1 checkout: cart 
								  charging:  validCreditCard 
								  on: testObjectFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: (5 * testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:31' prior: 50864043!
test01CanNotCheckoutAnEmptyCart
	self 
		should: [cashier1 checkout: cart charging: validCreditCard on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier1 invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:19:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook cart cashier1 catalog expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:36' prior: 50864151 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	expiredCreditCard := testObjectFactory expiredCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier1 := testObjectFactory createCashier.
	catalog := testObjectFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:36' prior: 50864118!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart add: testObjectFactory itemSellByTheStore. 
	self assert: (catalog at: testObjectFactory itemSellByTheStore) equals: (cashier1 checkout: cart charging: validCreditCard  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/14/2021 23:19:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory validCreditCard stolenCreditCard fakeCreditCard salesBook cart cashier catalog expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864068!
test06CanNotCheckoutWithFakeCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: fakeCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864084!
test07CanNotCheckoutWithoutEnoughBalance
	cart add: 80 of:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: validCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864101!
test05CanNotCheckoutWithStolenCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: stolenCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864228!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart add: testObjectFactory itemSellByTheStore. 
	self assert: (catalog at: testObjectFactory itemSellByTheStore) equals: (cashier checkout: cart charging: validCreditCard  on: testObjectFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864134!
test04CanNotCheckoutWithExpiredCard
	cart add:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: expiredCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864210 overrides: 16927572!
setUp
	testObjectFactory := StoreTestObjectFactory new.
	validCreditCard := testObjectFactory validCreditCard.
	stolenCreditCard := testObjectFactory stolenCreditCard.
	fakeCreditCard := testObjectFactory fakeCreditCard.
	expiredCreditCard := testObjectFactory expiredCreditCard.
	salesBook := testObjectFactory createSalesBook.
	cart := testObjectFactory createCart.
	cashier := testObjectFactory createCashier.
	catalog := testObjectFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864169!
test03CheckoutCartWithManyItemsReturnsTotal
	cart add: 5 of: testObjectFactory itemSellByTheStore.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  validCreditCard 
								  on: testObjectFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: (5 * testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/14/2021 23:19:41' prior: 50864185!
test01CanNotCheckoutAnEmptyCart
	self 
		should: [cashier checkout: cart charging: validCreditCard on: testObjectFactory today registeredOn: salesBook]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/14/2021 23:19:45'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:25' prior: 50863146!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCards := aStolenCard .
	validCards := aValidCard.
	accounts := anAccount .! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:08:32'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCards accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:32' prior: 50864437!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCard := aStolenCard .
	validCards := aValidCard.
	accounts := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:32' prior: 50863232!
debitFor: card amount: anAmount
	(stolenCard includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:08:38'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCard accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:38' prior: 50864455!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCard := aStolenCard .
	validCard := aValidCard.
	accounts := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:38' prior: 50864464!
debitFor: card amount: anAmount
	(stolenCard includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:08:43'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCard account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:43' prior: 50864487!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCard := aStolenCard .
	validCard := aValidCard.
	account := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:43' prior: 50864496!
debitFor: card amount: anAmount
	(stolenCard includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > account at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:08:59'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards validCard account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:59' prior: 50864519!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCards := aStolenCard .
	validCard := aValidCard.
	account := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:08:59' prior: 50864528!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > account at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:09:04'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards validCards account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:04' prior: 50864551!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCards := aStolenCard .
	validCards := aValidCard.
	account := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:04' prior: 50864560!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > account at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 00:09:08'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCards validCards accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:08' prior: 50864583!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccount
	stolenCards := aStolenCard .
	validCards := aValidCard.
	accounts := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:08' prior: 50864592!
debitFor: card amount: anAmount
	(stolenCards includes: card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:16' prior: 50864615!
initializeWithStolenCards: aStolenCards andValidCards: aValidCard andAccounts: anAccount
	stolenCards := aStolenCards .
	validCards := aValidCard.
	accounts := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:19' prior: 50864638!
initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: anAccount
	stolenCards := aStolenCards .
	validCards := aValidCards.
	accounts := anAccount .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 00:09:23' prior: 50864647!
initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: anAccounts
	stolenCards := aStolenCards .
	validCards := aValidCards.
	accounts := anAccounts .! !

----SNAPSHOT----(15 June 2021 00:09:30) CuisUniversity-4532.image priorSource: 16929209!

----QUIT----(15 June 2021 00:10:12) CuisUniversity-4532.image priorSource: 17056434!

----STARTUP---- (15 June 2021 18:27:42) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:29' prior: 50864624!
debitFor: card amount: anAmount
	(stolenCards = card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 18:30:32'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCards accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:32' prior: 50864656!
initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: anAccounts
	stolenCard := aStolenCards .
	validCards := aValidCards.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:32' prior: 50864675!
debitFor: card amount: anAmount
	(stolenCard = card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards includes: card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:42' prior: 50864707!
debitFor: card amount: anAmount
	(stolenCard = card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCards = card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/15/2021 18:30:45'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCard accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:45' prior: 50864697!
initializeWithStolenCards: aStolenCards andValidCards: aValidCards andAccounts: anAccounts
	stolenCard := aStolenCards .
	validCard := aValidCards.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:30:45' prior: 50864721!
debitFor: card amount: anAmount
	(stolenCard = card) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard = card) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:33:34' prior: 50864743!
initializeWithStolenCards: aStolenCard andValidCards: aValidCards andAccounts: anAccounts
	stolenCard := aStolenCard .
	validCard := aValidCards.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:33:39' prior: 50864766!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCard := aStolenCard .
	validCard := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/15/2021 18:33:52' prior: 50863118!
withStolenCards: aStolenCard andValidCards: aValidCards andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCards andAccounts: accounts. ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/15/2021 18:34:03' prior: 50864784!
withStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts. ! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:34:59' prior: 50863215!
createMerchantProcessor
	| stolenCards validCards accounts |
	stolenCards := self stolenCreditCard.
	validCards := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCards: stolenCards andValidCards: validCards andAccounts: accounts.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/15/2021 18:35:02'!
PASSED!
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:40:15' prior: 50864803!
createMerchantProcessor
	| stolenCard validCards accounts |
	stolenCard := self stolenCreditCard.
	validCards := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCards: stolenCard andValidCards: validCards andAccounts: accounts.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:40:20' prior: 50864866!
createMerchantProcessor
	| stolenCard validCard accounts |
	stolenCard := self stolenCreditCard.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCards: stolenCard andValidCards: validCard andAccounts: accounts.! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/15/2021 18:40:38' prior: 50864881!
createMerchantProcessor
	| stolenCard validCard accounts |
	stolenCard := self stolenCreditCard.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCard: stolenCard andValidCard: validCard andAccounts: accounts.! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/15/2021 18:40:53'!
withStolenCard: aStolenCard andValidCard: aValidCard andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts. ! !

!methodRemoval: MerchantProcessorSimulator class #withStolenCards:andValidCards:andAccounts: stamp: 'BAG 6/15/2021 18:40:53'!
withStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts. !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/15/2021 18:40:57'!
PASSED!

----SNAPSHOT----(15 June 2021 18:50:04) CuisUniversity-4532.image priorSource: 17056524!

----STARTUP---- (16 June 2021 23:07:22) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:17:57' prior: 50864752!
debitFor: card amount: anAmount
	(stolenCard = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/16/2021 23:18:18'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCardNumber validCard accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:18:18' prior: 50864775!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCardNumber := aStolenCard .
	validCard := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:18:18' prior: 50864985!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:21:34' prior: 50865018!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard number = card number and: validCard owner = card owner) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!CreditCard methodsFor: 'accesing' stamp: 'BAG 6/16/2021 23:28:11'!
number
	^number ! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:28:32' prior: 50865032!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard number = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/16/2021 23:28:36'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCard validCard accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:28:36' prior: 50865008!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCard := aStolenCard .
	validCard := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:28:36' prior: 50865050!
debitFor: card amount: anAmount
	(stolenCard = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard number = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:29:13' prior: 50865082!
debitFor: card amount: anAmount
	(stolenCard number = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard number = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/16/2021 23:29:18'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCardNumber validCard accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:29:18' prior: 50865073!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCardNumber := aStolenCard .
	validCard := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:29:18' prior: 50865096!
debitFor: card amount: anAmount
	(stolenCardNumber number = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard number = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:29:29' prior: 50865129!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCard = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'BAG 6/16/2021 23:29:33'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'stolenCardNumber validCardNumber accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:29:33' prior: 50865119!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCardNumber := aStolenCard .
	validCardNumber := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:29:33' prior: 50865143!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCardNumber = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/16/2021 23:30:49'!
withStolenCardNumber: aStolenCard andValidCardNumber: aValidCard andAccount: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts. ! !
!StoreTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:30:49' prior: 50864896!
createMerchantProcessor
	| stolenCard validCard accounts |
	stolenCard := self stolenCreditCard.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCard andValidCardNumber: validCard andAccount: accounts.! !

!methodRemoval: MerchantProcessorSimulator class #withStolenCard:andValidCard:andAccounts: stamp: 'BAG 6/16/2021 23:30:49'!
withStolenCard: aStolenCard andValidCard: aValidCard andAccounts: accounts
	^self new initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: accounts. !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/16/2021 23:30:55' prior: 50865190!
withStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCard andAccount: accounts
	^self new initializeWithStolenCards: aStolenCardNumber andValidCards: aValidCard andAccounts: accounts. ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/16/2021 23:31:00' prior: 50865225!
withStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: accounts
	^self new initializeWithStolenCards: aStolenCardNumber andValidCards: aValidCardNumber andAccounts: accounts. ! !
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'BAG 6/16/2021 23:31:08' prior: 50865235!
withStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: account
	^self new initializeWithStolenCards: aStolenCardNumber andValidCards: aValidCardNumber andAccounts: account. ! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:31:28'!
initializeWithStolenCardNumber: aStolenCard andValidCardNumber: aValidCard andAccount: anAccounts
	stolenCardNumber := aStolenCard .
	validCardNumber := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:31:28' prior: 50865246!
withStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: account
	^self new initializeWithStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: account. ! !

!methodRemoval: MerchantProcessorSimulator #initializeWithStolenCards:andValidCards:andAccounts: stamp: 'BAG 6/16/2021 23:31:28'!
initializeWithStolenCards: aStolenCard andValidCards: aValidCard andAccounts: anAccounts
	stolenCardNumber := aStolenCard .
	validCardNumber := aValidCard.
	accounts := anAccounts .!
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:31:36' prior: 50865256!
initializeWithStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCard andAccount: anAccounts
	stolenCardNumber := aStolenCardNumber .
	validCardNumber := aValidCard.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:31:41' prior: 50865286!
initializeWithStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: anAccounts
	stolenCardNumber := aStolenCardNumber .
	validCardNumber := aValidCardNumber.
	accounts := anAccounts .! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:31:45' prior: 50865296!
initializeWithStolenCardNumber: aStolenCardNumber andValidCardNumber: aValidCardNumber andAccount: anAccount
	stolenCardNumber := aStolenCardNumber .
	validCardNumber := aValidCardNumber.
	accounts := anAccount .! !
!StoreTestObjectFactory methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:35:45' prior: 50862959 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := 
	stolenCreditCard := CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .
	validCreditCard := CreditCard numbered: 1234567812345689  owner: 'Roberto'  expiredOn: FixedGregorianDate tomorrow .
	fakeCreditCard := CreditCard numbered: 1234567812345690  owner: 'Carlos'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'credit card' stamp: 'BAG 6/16/2021 23:36:08' prior: 50862290!
expiredCreditCard
	^CreditCard numbered: 1234567812345678  owner: 'Ruperto'  expiredOn: FixedGregorianDate yesterday.! !
!StoreTestObjectFactory methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:36:37' prior: 50865318 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := 
	stolenCreditCard := 
	validCreditCard := CreditCard numbered: 1234567812345689  owner: 'Roberto'  expiredOn: FixedGregorianDate tomorrow .
	fakeCreditCard := CreditCard numbered: 1234567812345690  owner: 'Carlos'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'credit card' stamp: 'BAG 6/16/2021 23:36:51' prior: 50862449!
stolenCreditCard
	^CreditCard numbered: 1234567812345679  owner: 'Pepe'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:37:06' prior: 50865343 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.
	expiredCreditCard := 
	stolenCreditCard := 
	validCreditCard := 
	fakeCreditCard := CreditCard numbered: 1234567812345690  owner: 'Carlos'  expiredOn: FixedGregorianDate tomorrow .! !
!StoreTestObjectFactory methodsFor: 'credit card' stamp: 'BAG 6/16/2021 23:37:22' prior: 50862480!
validCreditCard
	^CreditCard numbered: 1234567812345689  owner: 'Roberto'  expiredOn: FixedGregorianDate tomorrow.! !
!StoreTestObjectFactory methodsFor: 'initialization' stamp: 'BAG 6/16/2021 23:37:35' prior: 50865365 overrides: 16896425!
initialize
	today:= FixedGregorianDate today.! !
!StoreTestObjectFactory methodsFor: 'credit card' stamp: 'BAG 6/16/2021 23:37:45' prior: 50862858!
fakeCreditCard
	^ CreditCard numbered: 1234567812345690  owner: 'Carlos'  expiredOn: FixedGregorianDate tomorrow .! !

Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectFactory category: 'TusLibros' stamp: 'BAG 6/16/2021 23:37:52'!
Object subclass: #StoreTestObjectFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:39:13' prior: 50865200!
createMerchantProcessor
	| stolenCard validCard accounts |
	stolenCard := self stolenCreditCard.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: 1234567812345679 andValidCardNumber: validCard andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:39:39' prior: 50865409!
createMerchantProcessor
	| stolenCard validCard accounts |
	stolenCard := self stolenCreditCard number.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: 1234567812345679 andValidCardNumber: validCard andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:39:47' prior: 50865424!
createMerchantProcessor
	| stolenCardNumber validCard accounts |
	stolenCardNumber := self stolenCreditCard number.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: 1234567812345679 andValidCardNumber: validCard andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:40:01' prior: 50865440!
createMerchantProcessor
	| stolenCardNumber validCard accounts |
	stolenCardNumber := self stolenCreditCard number.
	validCard := self validCreditCard.
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCard andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:40:23' prior: 50865456!
createMerchantProcessor
	| stolenCardNumber validCard accounts |
	stolenCardNumber := self stolenCreditCard number.
	validCard := self validCreditCard .
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCard andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:40:27' prior: 50865472!
createMerchantProcessor
	| stolenCardNumber validCardNumber accounts |
	stolenCardNumber := self stolenCreditCard number.
	validCardNumber := self validCreditCard .
	accounts := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCardNumber andAccount: accounts.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:40:32' prior: 50865488!
createMerchantProcessor
	| stolenCardNumber validCardNumber account |
	stolenCardNumber := self stolenCreditCard number.
	validCardNumber := self validCreditCard .
	account := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCardNumber andAccount: account.! !
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:40:37' prior: 50865505!
createMerchantProcessor
	| stolenCardNumber validCardNumber account |
	stolenCardNumber := self stolenCreditCard number.
	validCardNumber := self validCreditCard number.
	account := Dictionary with: (Association key: self validCreditCard value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCardNumber andAccount: account.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/16/2021 23:40:51'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:40:51'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/16/2021 23:40:51'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/16/2021 23:40:51'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/16/2021 23:40:51'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/16/2021 23:40:51'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/16/2021 23:40:51'!
FAILURE!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:40:58'!
ERROR!
!StoreTestObjectFactory methodsFor: 'merchant processor' stamp: 'BAG 6/16/2021 23:42:21' prior: 50865521!
createMerchantProcessor
	| stolenCardNumber validCardNumber account |
	stolenCardNumber := self stolenCreditCard number.
	validCardNumber := self validCreditCard number.
	account := Dictionary with: (Association key: validCardNumber value: (self itemSellByTheStorePrice)*5 ).
	
	^MerchantProcessorSimulator withStolenCardNumber: stolenCardNumber andValidCardNumber: validCardNumber andAccount: account.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/16/2021 23:42:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:42:24'!
ERROR!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/16/2021 23:42:24'!
ERROR!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/16/2021 23:42:24'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/16/2021 23:42:24'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/16/2021 23:42:24'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/16/2021 23:42:24'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:42:37' prior: 50865176!
debitFor: card amount: anAmount
	(stolenCardNumber = card number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCardNumber = card number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: card number) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/16/2021 23:42:40'!
PASSED!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:46:08' prior: 50861462!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage].
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	sale := aCart total.
	merchantProcessor debitFor: aCard amount: sale.
	salesBook add: sale.
	
	^sale.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:46:53'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self invalidCartErrorMessage]! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:46:53' prior: 50865639!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	self assertCartIsNotEmpty: aCart.
	(aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage].
	
	sale := aCart total.
	merchantProcessor debitFor: aCard amount: sale.
	salesBook add: sale.
	
	^sale.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:48:31'!
assertCreditCard: today IsNotExpiredOn: aCard

	^ (aCard isExpiredOn: today) ifTrue:[self error: self invalidCardErrorMessage]! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:48:31' prior: 50865658!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCard: today IsNotExpiredOn: aCard.
	
	sale := aCart total.
	merchantProcessor debitFor: aCard amount: sale.
	salesBook add: sale.
	
	^sale.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:49:06' prior: 50865670!
assertCreditCard: aCreditCard IsNotExpiredOn: aDate

	^ (aCreditCard isExpiredOn: aDate) ifTrue:[self error: self invalidCardErrorMessage]! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:49:36' prior: 50865677!
checkout: aCart charging: aCard on: today registeredOn: salesBook
	| sale |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCard: aCard IsNotExpiredOn: today.
	
	sale := aCart total.
	merchantProcessor debitFor: aCard amount: sale.
	salesBook add: sale.
	
	^sale.! !
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:49:42' prior: 50865697!
checkout: aCart charging: aCreditCard on: today registeredOn: salesBook
	| sale |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCard: aCreditCard IsNotExpiredOn: today.
	
	sale := aCart total.
	merchantProcessor debitFor: aCreditCard amount: sale.
	salesBook add: sale.
	
	^sale.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/16/2021 23:49:52'!
PASSED!
!Cashier methodsFor: 'operations' stamp: 'BAG 6/16/2021 23:49:59' prior: 50865709!
checkout: aCart charging: aCreditCard on: aDate registeredOn: salesBook
	| sale |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCard: aCreditCard IsNotExpiredOn: aDate.
	
	sale := aCart total.
	merchantProcessor debitFor: aCreditCard amount: sale.
	salesBook add: sale.
	
	^sale.! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:51:10' prior: 50865603!
debitFor: aCreditCard amount: anAmount
	(stolenCardNumber = aCreditCard number) ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(validCardNumber = aCreditCard number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:52:11'!
assertCreditCardIsNotStolen: aCreditCard

	^ (stolenCardNumber = aCreditCard number) ifTrue: [self error: self class stolenCreditCardErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:52:11' prior: 50865782!
debitFor: aCreditCard amount: anAmount
	self assertCreditCardIsNotStolen: aCreditCard.
	(validCardNumber = aCreditCard number) ifFalse: [self error: self class fakeCreditCardErrorDescription].
	(anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:52:36'!
assertCreditCardIsValid: aCreditCard

	^ (validCardNumber = aCreditCard number) ifFalse: [self error: self class fakeCreditCardErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:52:36' prior: 50865806!
debitFor: aCreditCard amount: anAmount
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	(anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription].! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:56:22'!
assertAccountForCreditCard: aCreditCard canDebit: anAmount

	^ (anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:56:22' prior: 50865827!
debitFor: aCreditCard amount: anAmount
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountForCreditCard: aCreditCard canDebit: anAmount.! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/16/2021 23:56:36'!
assertAccountFor: aCreditCard canDebit: anAmount

	^ (anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription]! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'BAG 6/16/2021 23:56:36' prior: 50865847!
debitFor: aCreditCard amount: anAmount
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.! !

!methodRemoval: MerchantProcessorSimulator #assertAccountForCreditCard:canDebit: stamp: 'BAG 6/16/2021 23:56:36'!
assertAccountForCreditCard: aCreditCard canDebit: anAmount

	^ (anAmount > accounts at: aCreditCard number) ifTrue: [self error: self class notEnoughBalanceErrorDescription]!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/16/2021 23:57:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:02:11'!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:testObjectFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: validCreditCard  on:testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:03:00' prior: 50865931!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:testObjectFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:03:05'!
FAILURE!

accounts!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 00:12:15' prior: 50865865!
debitFor: aCreditCard amount: anAmount
	| balance |
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	balance := accounts at: aCreditCard number.
	balance := balance - anAmount .
	accounts at: aCreditCard number put: balance.! !

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:12:17'!
ERROR!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:12:26'!
FAILURE!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:12:26'!
FAILURE!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:12:30'!
FAILURE!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:12:30'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:13:03' prior: 50865948!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:testObjectFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:14:35' prior: 50866005!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:testObjectFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (testObjectFactory itemSellByTheStorePrice) equals: salesBook size.
		].
	
		! !

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:14:37'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:14:52' prior: 50866025!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:testObjectFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: testObjectFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (testObjectFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:14:55'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:17:02' prior: 50864371!
test01CanNotCheckoutAnEmptyCart
	| salesBook1 |
	salesBook1 := testObjectFactory createSalesBook.
	
	self 
		should: [cashier checkout: cart charging: testObjectFactory validCreditCard on: testObjectFactory today registeredOn: salesBook1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 00:17:06'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory cart cashier '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/17/2021 00:17:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory cart cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'BAG 6/17/2021 00:17:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'storeFactory cart cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864288!
test05CanNotCheckoutWithStolenCard
	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: stolenCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864271!
test07CanNotCheckoutWithoutEnoughBalance
	cart add: 80 of:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: validCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864337 overrides: 16927572!
setUp
	storeFactory := StoreTestObjectFactory new.
	validCreditCard := storeFactory validCreditCard.
	stolenCreditCard := storeFactory stolenCreditCard.
	fakeCreditCard := storeFactory fakeCreditCard.
	expiredCreditCard := storeFactory expiredCreditCard.
	salesBook := storeFactory createSalesBook.
	cart := storeFactory createCart.
	cashier := storeFactory createCashier.
	catalog := storeFactory defaultCatalog .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864355!
test03CheckoutCartWithManyItemsReturnsTotal
	cart add: 5 of: storeFactory itemSellByTheStore.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  validCreditCard 
								  on: storeFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: (5 * storeFactory itemSellByTheStorePrice) equals: salesBook first.
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864321!
test04CanNotCheckoutWithExpiredCard
	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: expiredCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864255!
test06CanNotCheckoutWithFakeCard
	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: fakeCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50866105!
test01CanNotCheckoutAnEmptyCart
	| salesBook1 |
	salesBook1 := storeFactory createSalesBook.
	
	self 
		should: [cashier checkout: cart charging: storeFactory validCreditCard on: storeFactory today registeredOn: salesBook1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50864305!
test02CheckoutCartWithOneItemReturnsTotal
	
	cart add: storeFactory itemSellByTheStore. 
	self assert: (catalog at: storeFactory itemSellByTheStore) equals: (cashier checkout: cart charging: validCreditCard  on: storeFactory today registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (storeFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'BAG 6/17/2021 00:17:37' prior: 50866052!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	cart add: 5 of:storeFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (storeFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:17:48' prior: 50866243!
test01CanNotCheckoutAnEmptyCart
	| salesBook |
	salesBook := storeFactory createSalesBook.
	
	self 
		should: [cashier checkout: cart charging: storeFactory validCreditCard on: storeFactory today registeredOn: salesBook ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier invalidCartErrorMessage.
			self assert: cart isEmpty.
			self assert: salesBook isEmpty. 
		].! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:19:15' prior: 50866260!
test02CheckoutCartWithOneItemReturnsTotal
	| catalog salesBook |
	salesBook := storeFactory createSalesBook .
	catalog := storeFactory  defaultCatalog.
	 
	cart add: storeFactory itemSellByTheStore. 
	self assert: (catalog at: storeFactory itemSellByTheStore) equals: (cashier checkout: 
														cart charging: storeFactory validCreditCard  
														on: storeFactory today 
														registeredOn: salesBook ). 
	self assert: 1 equals: salesBook size. 
	self assert:  (storeFactory itemSellByTheStorePrice) equals: salesBook first.
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:24:33' prior: 50866195!
test03CheckoutCartWithManyItemsReturnsTotal
	| salesBook |
	salesBook := storeFactory createSalesBook.
	
	cart add: 5 of: storeFactory itemSellByTheStore.
	
	self assert: cart total equals: (cashier checkout: cart 
								  charging:  storeFactory validCreditCard 
								  on: storeFactory today 
								  registeredOn: salesBook). 
	self assert: 1 equals: salesBook size. 
	self assert: (5 * storeFactory itemSellByTheStorePrice) equals: salesBook first.
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:25:31' prior: 50866211!
test04CanNotCheckoutWithExpiredCard
	| salesBook |
	salesBook := storeFactory createSalesBook. 
	
	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: storeFactory expiredCreditCard  on: storeFactory today  registeredOn: salesBook] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = cashier invalidCardErrorMessage.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:26:10' prior: 50866145!
test05CanNotCheckoutWithStolenCard
	| salesBook |
	salesBook := storeFactory createSalesBook. 
	
	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: storeFactory stolenCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator stolenCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:26:37' prior: 50866227!
test06CanNotCheckoutWithFakeCard
	| salesBook |
	salesBook := storeFactory createSalesBook.

	cart add:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: storeFactory fakeCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator fakeCreditCardErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:26:50' prior: 50866161!
test07CanNotCheckoutWithoutEnoughBalance
	| salesBook |
	salesBook := storeFactory createSalesBook.
	
	cart add: 80 of:storeFactory itemSellByTheStore. 
	
	self should:[cashier checkout: cart charging: storeFactory validCreditCard  on:storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: salesBook isEmpty.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 00:28:18' prior: 50866276!
test08CanNotCheckoutSecondTimeWithoutEnoughBalance
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 5 of:storeFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (storeFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:28:21'!
PASSED!
!CashierTest methodsFor: 'setup' stamp: 'BAG 6/17/2021 00:29:45' prior: 50866178 overrides: 16927572!
setUp
	storeFactory := StoreTestObjectFactory new.
	cart := storeFactory createCart.
	cashier := storeFactory createCashier.
	! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 00:36:03'!
substract: anAmount from: anAccountNumber
	| balance |
	
	balance := accounts at: anAccountNumber .
	balance := balance - anAmount .
	accounts at: anAccountNumber put: balance.! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 00:36:27' prior: 50865973!
debitFor: aCreditCard amount: anAmount
	
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 00:36:33'!
PASSED!

----SNAPSHOT----(17 June 2021 00:41:06) CuisUniversity-4532.image priorSource: 17066442!

----QUIT----(17 June 2021 00:41:12) CuisUniversity-4532.image priorSource: 17117940!

----STARTUP---- (17 June 2021 16:07:41) as /home/bruno/Documents/UBA/Ingenieria del software 1/linux64New/CuisUniversity-4532.image!

!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 16:09:34'!
test09CanNotCheckoutWithBalanceExceeded
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 5 of:storeFactory itemSellByTheStore. 
	
	cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook.
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (storeFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 16:10:03' prior: 50866596!
test09CanNotCheckoutWithBalanceExceeded
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 5 of:storeFactory expensiveItemSellByTheStore. 
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (storeFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 16:10:09' prior: 50866622!
test09CanNotCheckoutWithBalanceExceeded
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 2 of:storeFactory expensiveItemSellByTheStore. 
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 1 equals: salesBook size.
			self assert: 5 * (storeFactory itemSellByTheStorePrice) equals: salesBook first.
		].
	
		! !
!StoreTestObjectFactory methodsFor: 'sell item' stamp: 'BAG 6/17/2021 16:10:28'!
expensiveItemSellByTheStore
	
	^ 'expensive validBook'! !
!StoreTestObjectFactory methodsFor: 'sell item' stamp: 'BAG 6/17/2021 16:11:34'!
expensiveItemSellByTheStorePrice
	
	^ 923456789123456! !
!StoreTestObjectFactory methodsFor: 'catalog' stamp: 'BAG 6/17/2021 16:12:36' prior: 50863186!
defaultCatalog
	
	^ Dictionary with: (Association key: self itemSellByTheStore  value: self itemSellByTheStorePrice) 
			     with: (Association key: self expensiveItemSellByTheStore  value: self expensiveItemSellByTheStorePrice).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:12:43'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:12:43'!
FAILURE!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:12:43'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 16:13:23' prior: 50866645!
test09CanNotCheckoutWithBalanceExceeded
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 2 of:storeFactory expensiveItemSellByTheStore. 
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator notEnoughBalanceErrorDescription.
			self assert: 0 equals: salesBook size.
		].
	
		! !
!CashierTest methodsFor: 'tests' stamp: 'BAG 6/17/2021 16:13:51' prior: 50866747!
test09CanNotCheckoutWithBalanceExceeded
	| salesBook validCreditCard |
	validCreditCard  := storeFactory validCreditCard. 
	salesBook := storeFactory createSalesBook.
	
	cart add: 2 of:storeFactory expensiveItemSellByTheStore. 
	 
	self should:[cashier checkout: cart charging: validCreditCard  on: storeFactory today  registeredOn: salesBook ] 
	raise: Error - MessageNotUnderstood  
	withExceptionDo: [ :error | 
			self assert: error messageText = MerchantProcessorSimulator balanceExceededErrorDescription.
			self assert: 0 equals: salesBook size.
		].
	
		! !

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:13:55'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'error description' stamp: 'BAG 6/17/2021 16:14:10'!
balanceExceededErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessorSimulator class methodsFor: 'error description' stamp: 'BAG 6/17/2021 16:14:47' prior: 50866793!
balanceExceededErrorDescription
	^'No puede debitarse un monto con más de 15 digitos'.! !

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:14:51'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:16:47' prior: 50866524!
debitFor: aCreditCard amount: anAmount
	
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	(anAmount asInteger asString size > 15) ifTrue: [self error: self class balanceExceededErrorDescription ].
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:16:53'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:16:53'!
FAILURE!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:16:53'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:17:09' prior: 50866809!
debitFor: aCreditCard amount: anAmount

	(anAmount asInteger asString size > 15) ifTrue: [self error: self class balanceExceededErrorDescription ].
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:17:12'!
PASSED!

123456789 numberOfDigitsInBase: 10.!

123456789123456789 numberOfDigitsInBase: 10. !

123456789123456789123 numberOfDigitsInBase: 10.  18 !

123456789123456789123 numberOfDigitsInBase: 10.!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:18:43' prior: 50866882!
debitFor: aCreditCard amount: anAmount

	((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class balanceExceededErrorDescription ].
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:18:46'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:19:02' prior: 50866958!
debitFor: aCreditCard amount: anAmount

	((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class balanceExceededErrorDescription ].
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:19:05'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:19:42'!
assertValidAmount: anAmount

	^ ((anAmount numberOfDigitsInBase: 10) > 15) ifTrue: [self error: self class balanceExceededErrorDescription ]! !
!MerchantProcessorSimulator methodsFor: 'transactions' stamp: 'BAG 6/17/2021 16:19:42' prior: 50867028!
debitFor: aCreditCard amount: anAmount

	self assertValidAmount: anAmount.
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCardIsValid: aCreditCard.
	self assertAccountFor: aCreditCard canDebit: anAmount.
	
	
	self substract: anAmount from: aCreditCard number.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test02CheckoutCartWithOneItemReturnsTotal stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test03CheckoutCartWithManyItemsReturnsTotal stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test04CanNotCheckoutWithExpiredCard stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithStolenCard stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithFakeCard stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test07CanNotCheckoutWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test08CanNotCheckoutSecondTimeWithoutEnoughBalance stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

!testRun: #CashierTest #test09CanNotCheckoutWithBalanceExceeded stamp: 'BAG 6/17/2021 16:19:54'!
PASSED!

----SNAPSHOT----(17 June 2021 16:20:30) CuisUniversity-4532.image priorSource: 17118030!

----QUIT----(17 June 2021 16:20:34) CuisUniversity-4532.image priorSource: 17136706!